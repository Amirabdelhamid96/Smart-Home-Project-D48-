
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066f  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e9  00000000  00000000  0000083b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a2  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000010c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000339  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bd  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001502  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_init>:
{
/*	setbit(ADMUX,REFS0);  // external v refrance
	setbit(ADCSRA,ADEN);  // ADC enable
	setbit(ADCSRA,ADPS2);	// pres caller 16 ADC f = 62500 with the range of ADC (50k:200k)Hz
*/
    ADMUX|=(1<<REFS0);//AVCC with external capacitor at AREF pin
  6c:	87 b1       	in	r24, 0x07	; 7
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(1<<ADEN);//ADC Enable
  72:	86 b1       	in	r24, 0x06	; 6
  74:	80 68       	ori	r24, 0x80	; 128
  76:	86 b9       	out	0x06, r24	; 6
	//ADC speed must be in range of 50k to 200k HZ
	ADCSRA |=(1<<ADPS2);//PRESCALER 16 --> freq = 62500 Hz
  78:	86 b1       	in	r24, 0x06	; 6
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	86 b9       	out	0x06, r24	; 6
  7e:	08 95       	ret

00000080 <ADC_read>:
	//0b01000000 &
	//0b11100000 |
	//0b00000100
//==> 0b01000100

	ADMUX = (ADMUX&0xE0)|ADC_chanel;//choose which ADC will work channel
  80:	97 b1       	in	r25, 0x07	; 7
  82:	90 7e       	andi	r25, 0xE0	; 224
  84:	89 2b       	or	r24, r25
  86:	87 b9       	out	0x07, r24	; 7
	//0xE0 ==> 0b11100000
	
	ADCSRA |=(1<<ADSC);//ADC Start Conversion
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	86 b9       	out	0x06, r24	; 6
	
	while(readbit(ADCSRA,ADIF)==0) //wait until Conversion complete using polling not int
  8e:	34 9b       	sbis	0x06, 4	; 6
  90:	fe cf       	rjmp	.-4      	; 0x8e <ADC_read+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	8a 95       	dec	r24
  96:	f1 f7       	brne	.-4      	; 0x94 <ADC_read+0x14>
  98:	00 00       	nop
	//decimal max 1023
	//2.5v == 512
	//1.25 == 256
	//5    == 1023
	
	adc_value =(int)ADCL+(int)ADCH*256;//calculate the ADC value
  9a:	24 b1       	in	r18, 0x04	; 4
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	98 2f       	mov	r25, r24
  a2:	88 27       	eor	r24, r24
	// x = (ADCL =256 )+(ADCH =1*256 )= 512
	
	 
	//10-bit 11 1111 1111 => 1023 
	return adc_value ;
  a4:	82 0f       	add	r24, r18
  a6:	91 1d       	adc	r25, r1
  a8:	08 95       	ret

000000aa <main>:


int main(void)
{
    int x =0;
    clearbit(DDRA,4);//adc4 input
  aa:	8a b3       	in	r24, 0x1a	; 26
  ac:	8f 7e       	andi	r24, 0xEF	; 239
  ae:	8a bb       	out	0x1a, r24	; 26
	
    setbit(DDRA,7);//led output
  b0:	8a b3       	in	r24, 0x1a	; 26
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	8a bb       	out	0x1a, r24	; 26
    ADC_init();// calling init
  b6:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_init>
    
    while (1)
    {
	    x =ADC_read(4);//adc_value
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 40 00 	call	0x80	; 0x80 <ADC_read>
	    if (x>511)
  c2:	81 15       	cp	r24, r1
  c4:	92 40       	sbci	r25, 0x02	; 2
  c6:	24 f0       	brlt	.+8      	; 0xd0 <main+0x26>
		    setbit(PORTA,7);//led on
  c8:	8b b3       	in	r24, 0x1b	; 27
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	8b bb       	out	0x1b, r24	; 27
  ce:	f5 cf       	rjmp	.-22     	; 0xba <main+0x10>
	    else
		    clearbit(PORTA,7);//led off
  d0:	8b b3       	in	r24, 0x1b	; 27
  d2:	8f 77       	andi	r24, 0x7F	; 127
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	f1 cf       	rjmp	.-30     	; 0xba <main+0x10>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
