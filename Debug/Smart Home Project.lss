
Smart Home Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fd8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000154  00800060  00000fd8  0000104c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000210  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002de7  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f25  00000000  00000000  00004203  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c87  00000000  00000000  00005128  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000420  00000000  00000000  00006db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000061b  00000000  00000000  000071d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f72  00000000  00000000  000077eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  0000975d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_1>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_2>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3b       	cpi	r26, 0xB4	; 180
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <main>
  7a:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Buzzer_on>:


void Buzzer_on(void)
{
	//buzzer
	setbit(DDRA,3);
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	88 60       	ori	r24, 0x08	; 8
  86:	8a bb       	out	0x1a, r24	; 26
	setbit(PORTA,3);
  88:	8b b3       	in	r24, 0x1b	; 27
  8a:	88 60       	ori	r24, 0x08	; 8
  8c:	8b bb       	out	0x1b, r24	; 27
  8e:	08 95       	ret

00000090 <Buzzer_off>:
}

void Buzzer_off(void)
{
	//buzzer
	setbit(DDRA,3);
  90:	8a b3       	in	r24, 0x1a	; 26
  92:	88 60       	ori	r24, 0x08	; 8
  94:	8a bb       	out	0x1a, r24	; 26
	clearbit(PORTA,3);
  96:	8b b3       	in	r24, 0x1b	; 27
  98:	87 7f       	andi	r24, 0xF7	; 247
  9a:	8b bb       	out	0x1b, r24	; 27
  9c:	08 95       	ret

0000009e <__vector_2>:



// int1 --> set bit 5
ISR(INT1_vect)  // interrupt service routine ISR handler --> vetor name ==>table--> address to the function --> process subroutine
{	// the code needed
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	3f 93       	push	r19
  ac:	4f 93       	push	r20
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
	int x;
	for(x=0;x<7;x++)
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	0f c0       	rjmp	.+30     	; 0xd6 <__vector_2+0x38>
	{
		toggelbit(PORTA,5);
  b8:	9b b3       	in	r25, 0x1b	; 27
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	89 27       	eor	r24, r25
  be:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	4f e9       	ldi	r20, 0x9F	; 159
  c2:	86 e8       	ldi	r24, 0x86	; 134
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	41 50       	subi	r20, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <__vector_2+0x28>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <__vector_2+0x32>
  d0:	00 00       	nop

// int1 --> set bit 5
ISR(INT1_vect)  // interrupt service routine ISR handler --> vetor name ==>table--> address to the function --> process subroutine
{	// the code needed
	int x;
	for(x=0;x<7;x++)
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
  d6:	27 30       	cpi	r18, 0x07	; 7
  d8:	31 05       	cpc	r19, r1
  da:	74 f3       	brlt	.-36     	; 0xb8 <__vector_2+0x1a>
	{
		toggelbit(PORTA,5);
		_delay_ms(500);
	}
}
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	4f 91       	pop	r20
  e2:	3f 91       	pop	r19
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_1>:

// int0 --> clear bit 5
ISR(INT0_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
	clearbit(PORTA,5);
  fc:	8b b3       	in	r24, 0x1b	; 27
  fe:	8f 7d       	andi	r24, 0xDF	; 223
 100:	8b bb       	out	0x1b, r24	; 27
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <keypad_init>:
	 // 4rows p0 p1 p2 p3    output power
	 //columns p4 p5 p6 p7   input  reading pin
	 
	 
	 ///////////////////////  output pins //////////////////////////////
	 setbit(R1_dir,R1);    //DDRA
 10e:	81 b3       	in	r24, 0x11	; 17
 110:	80 61       	ori	r24, 0x10	; 16
 112:	81 bb       	out	0x11, r24	; 17
	 setbit(R2_dir,R2);
 114:	81 b3       	in	r24, 0x11	; 17
 116:	80 62       	ori	r24, 0x20	; 32
 118:	81 bb       	out	0x11, r24	; 17
	 setbit(R3_dir,R3);
 11a:	84 b3       	in	r24, 0x14	; 20
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	84 bb       	out	0x14, r24	; 20
	 setbit(R4_dir,R4);
 120:	84 b3       	in	r24, 0x14	; 20
 122:	82 60       	ori	r24, 0x02	; 2
 124:	84 bb       	out	0x14, r24	; 20
	 /////////////////// input pins /////////////////////////////////////
	 clearbit(C1_dir,C1);
 126:	84 b3       	in	r24, 0x14	; 20
 128:	87 7f       	andi	r24, 0xF7	; 247
 12a:	84 bb       	out	0x14, r24	; 20
	 clearbit(C2_dir,C2);
 12c:	84 b3       	in	r24, 0x14	; 20
 12e:	8f 7e       	andi	r24, 0xEF	; 239
 130:	84 bb       	out	0x14, r24	; 20
	 clearbit(C3_dir,C3);
 132:	84 b3       	in	r24, 0x14	; 20
 134:	8f 7d       	andi	r24, 0xDF	; 223
 136:	84 bb       	out	0x14, r24	; 20
	 clearbit(C4_dir,C4);
 138:	84 b3       	in	r24, 0x14	; 20
 13a:	8f 7b       	andi	r24, 0xBF	; 191
 13c:	84 bb       	out	0x14, r24	; 20
	 ///////////////// internal pull up resistor for input pins /////////////////////////////
	 //input power
	 
	 setbit(C1_Port,C1); // porta = 0000100  -- > pull up  input & port output
 13e:	85 b3       	in	r24, 0x15	; 21
 140:	88 60       	ori	r24, 0x08	; 8
 142:	85 bb       	out	0x15, r24	; 21
	 setbit(C2_Port,C2);
 144:	85 b3       	in	r24, 0x15	; 21
 146:	80 61       	ori	r24, 0x10	; 16
 148:	85 bb       	out	0x15, r24	; 21
	 setbit(C3_Port,C3);
 14a:	85 b3       	in	r24, 0x15	; 21
 14c:	80 62       	ori	r24, 0x20	; 32
 14e:	85 bb       	out	0x15, r24	; 21
	 setbit(C4_Port,C4);// noise
 150:	85 b3       	in	r24, 0x15	; 21
 152:	80 64       	ori	r24, 0x40	; 64
 154:	85 bb       	out	0x15, r24	; 21
 156:	08 95       	ret

00000158 <switch_output>:

 void switch_output(int x)
 {
	 //power loop function for rows
	 
	 switch(x)
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	91 05       	cpc	r25, r1
 15c:	89 f1       	breq	.+98     	; 0x1c0 <switch_output+0x68>
 15e:	1c f4       	brge	.+6      	; 0x166 <switch_output+0xe>
 160:	89 2b       	or	r24, r25
 162:	09 f1       	breq	.+66     	; 0x1a6 <switch_output+0x4e>
 164:	08 95       	ret
 166:	84 30       	cpi	r24, 0x04	; 4
 168:	91 05       	cpc	r25, r1
 16a:	19 f0       	breq	.+6      	; 0x172 <switch_output+0x1a>
 16c:	05 97       	sbiw	r24, 0x05	; 5
 16e:	71 f0       	breq	.+28     	; 0x18c <switch_output+0x34>
 170:	08 95       	ret
	 {   // output r0 r1 r2 r3  high to low
		 case R1:
		 clearbit(R1_Port,R1);  //r0 low
 172:	82 b3       	in	r24, 0x12	; 18
 174:	8f 7e       	andi	r24, 0xEF	; 239
 176:	82 bb       	out	0x12, r24	; 18
		 setbit(R2_Port,R2);
 178:	82 b3       	in	r24, 0x12	; 18
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	82 bb       	out	0x12, r24	; 18
		 setbit(R3_Port,R3);
 17e:	85 b3       	in	r24, 0x15	; 21
 180:	81 60       	ori	r24, 0x01	; 1
 182:	85 bb       	out	0x15, r24	; 21
		 setbit(R4_Port,R4);
 184:	85 b3       	in	r24, 0x15	; 21
 186:	82 60       	ori	r24, 0x02	; 2
 188:	85 bb       	out	0x15, r24	; 21
		 break;
 18a:	08 95       	ret
		 case R2:
		 clearbit(R2_Port,R2); // r1 low
 18c:	82 b3       	in	r24, 0x12	; 18
 18e:	8f 7d       	andi	r24, 0xDF	; 223
 190:	82 bb       	out	0x12, r24	; 18
		 setbit(R1_Port,R1);
 192:	82 b3       	in	r24, 0x12	; 18
 194:	80 61       	ori	r24, 0x10	; 16
 196:	82 bb       	out	0x12, r24	; 18
		 setbit(R3_Port,R3);
 198:	85 b3       	in	r24, 0x15	; 21
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	85 bb       	out	0x15, r24	; 21
		 setbit(R4_Port,R4);
 19e:	85 b3       	in	r24, 0x15	; 21
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	85 bb       	out	0x15, r24	; 21
		 break;
 1a4:	08 95       	ret
		 case R3:
		 clearbit(R3_Port,R3); // r2 low
 1a6:	85 b3       	in	r24, 0x15	; 21
 1a8:	8e 7f       	andi	r24, 0xFE	; 254
 1aa:	85 bb       	out	0x15, r24	; 21
		 setbit(R1_Port,R1);
 1ac:	82 b3       	in	r24, 0x12	; 18
 1ae:	80 61       	ori	r24, 0x10	; 16
 1b0:	82 bb       	out	0x12, r24	; 18
		 setbit(R2_Port,R2);
 1b2:	82 b3       	in	r24, 0x12	; 18
 1b4:	80 62       	ori	r24, 0x20	; 32
 1b6:	82 bb       	out	0x12, r24	; 18
		 setbit(R4_Port,R4);
 1b8:	85 b3       	in	r24, 0x15	; 21
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	85 bb       	out	0x15, r24	; 21
		 break;
 1be:	08 95       	ret
		 case R4:
		 clearbit(R4_Port,R4); //r3 low
 1c0:	85 b3       	in	r24, 0x15	; 21
 1c2:	8d 7f       	andi	r24, 0xFD	; 253
 1c4:	85 bb       	out	0x15, r24	; 21
		 setbit(R1_Port,R1);
 1c6:	82 b3       	in	r24, 0x12	; 18
 1c8:	80 61       	ori	r24, 0x10	; 16
 1ca:	82 bb       	out	0x12, r24	; 18
		 setbit(R2_Port,R2);
 1cc:	82 b3       	in	r24, 0x12	; 18
 1ce:	80 62       	ori	r24, 0x20	; 32
 1d0:	82 bb       	out	0x12, r24	; 18
		 setbit(R3_Port,R3);
 1d2:	85 b3       	in	r24, 0x15	; 21
 1d4:	81 60       	ori	r24, 0x01	; 1
 1d6:	85 bb       	out	0x15, r24	; 21
 1d8:	08 95       	ret

000001da <get_key_value>:




 char get_key_value(void)
 {
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
	 char key = notpressed; // 255 
	 int i=0;
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	10 e0       	ldi	r17, 0x00	; 0



 char get_key_value(void)
 {
	 char key = notpressed; // 255 
 1e4:	cf ef       	ldi	r28, 0xFF	; 255
	 int i=0;
	 while(key == notpressed && i<3)// key = '1' break condition
 1e6:	6e c0       	rjmp	.+220    	; 0x2c4 <get_key_value+0xea>
	 {
		 i++;
 1e8:	0f 5f       	subi	r16, 0xFF	; 255
 1ea:	1f 4f       	sbci	r17, 0xFF	; 255
		 switch_output(R1);
 1ec:	84 e0       	ldi	r24, 0x04	; 4
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 ac 00 	call	0x158	; 0x158 <switch_output>
		 if (readbit(C1_Pin,C1)==0)// pull up power--> low
 1f4:	9b 99       	sbic	0x13, 3	; 19
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <get_key_value+0x26>
		 {
			 key ='1';// char
			 while(readbit(C1_Pin,C1)==0);// skip loop infinte
 1f8:	9b 9b       	sbis	0x13, 3	; 19
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <get_key_value+0x1e>
	 {
		 i++;
		 switch_output(R1);
		 if (readbit(C1_Pin,C1)==0)// pull up power--> low
		 {
			 key ='1';// char
 1fc:	c1 e3       	ldi	r28, 0x31	; 49
 1fe:	11 c0       	rjmp	.+34     	; 0x222 <get_key_value+0x48>
			 while(readbit(C1_Pin,C1)==0);// skip loop infinte
			 // there is no pressing anymore
		 }
		 else if (readbit(C2_Pin,C2)==0)
 200:	9c 99       	sbic	0x13, 4	; 19
 202:	04 c0       	rjmp	.+8      	; 0x20c <get_key_value+0x32>
		 {
			 key ='2';
			 while(readbit(C2_Pin,C2)==0);
 204:	9c 9b       	sbis	0x13, 4	; 19
 206:	fe cf       	rjmp	.-4      	; 0x204 <get_key_value+0x2a>
			 while(readbit(C1_Pin,C1)==0);// skip loop infinte
			 // there is no pressing anymore
		 }
		 else if (readbit(C2_Pin,C2)==0)
		 {
			 key ='2';
 208:	c2 e3       	ldi	r28, 0x32	; 50
 20a:	0b c0       	rjmp	.+22     	; 0x222 <get_key_value+0x48>
			 while(readbit(C2_Pin,C2)==0);
		 }
		 else if (readbit(C3_Pin,C3)==0)
 20c:	9d 99       	sbic	0x13, 5	; 19
 20e:	04 c0       	rjmp	.+8      	; 0x218 <get_key_value+0x3e>
		 {
			 key ='3';
			 while(readbit(C3_Pin,C3)==0);
 210:	9d 9b       	sbis	0x13, 5	; 19
 212:	fe cf       	rjmp	.-4      	; 0x210 <get_key_value+0x36>
			 key ='2';
			 while(readbit(C2_Pin,C2)==0);
		 }
		 else if (readbit(C3_Pin,C3)==0)
		 {
			 key ='3';
 214:	c3 e3       	ldi	r28, 0x33	; 51
 216:	05 c0       	rjmp	.+10     	; 0x222 <get_key_value+0x48>
			 while(readbit(C3_Pin,C3)==0);
		 }
		 else if (readbit(C4_Pin,C4)==0)
 218:	9e 99       	sbic	0x13, 6	; 19
 21a:	03 c0       	rjmp	.+6      	; 0x222 <get_key_value+0x48>
		 {
			 key ='/';
			 while(readbit(C4_Pin,C4)==0);
 21c:	9e 9b       	sbis	0x13, 6	; 19
 21e:	fe cf       	rjmp	.-4      	; 0x21c <get_key_value+0x42>
			 key ='3';
			 while(readbit(C3_Pin,C3)==0);
		 }
		 else if (readbit(C4_Pin,C4)==0)
		 {
			 key ='/';
 220:	cf e2       	ldi	r28, 0x2F	; 47
			 while(readbit(C4_Pin,C4)==0);
		 }
		 switch_output(R2);
 222:	85 e0       	ldi	r24, 0x05	; 5
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 ac 00 	call	0x158	; 0x158 <switch_output>
		 if (readbit(C1_Pin,C1)==0)
 22a:	9b 99       	sbic	0x13, 3	; 19
 22c:	04 c0       	rjmp	.+8      	; 0x236 <get_key_value+0x5c>
		 {
			 key ='4';
			 while(readbit(C1_Pin,C1)==0);
 22e:	9b 9b       	sbis	0x13, 3	; 19
 230:	fe cf       	rjmp	.-4      	; 0x22e <get_key_value+0x54>
			 while(readbit(C4_Pin,C4)==0);
		 }
		 switch_output(R2);
		 if (readbit(C1_Pin,C1)==0)
		 {
			 key ='4';
 232:	c4 e3       	ldi	r28, 0x34	; 52
 234:	11 c0       	rjmp	.+34     	; 0x258 <get_key_value+0x7e>
			 while(readbit(C1_Pin,C1)==0);
		 }
		 else if (readbit(C2_Pin,C2)==0)
 236:	9c 99       	sbic	0x13, 4	; 19
 238:	04 c0       	rjmp	.+8      	; 0x242 <get_key_value+0x68>
		 {
			 key ='5';
			 while(readbit(C2_Pin,C2)==0);
 23a:	9c 9b       	sbis	0x13, 4	; 19
 23c:	fe cf       	rjmp	.-4      	; 0x23a <get_key_value+0x60>
			 key ='4';
			 while(readbit(C1_Pin,C1)==0);
		 }
		 else if (readbit(C2_Pin,C2)==0)
		 {
			 key ='5';
 23e:	c5 e3       	ldi	r28, 0x35	; 53
 240:	0b c0       	rjmp	.+22     	; 0x258 <get_key_value+0x7e>
			 while(readbit(C2_Pin,C2)==0);
		 }
		 else if (readbit(C3_Pin,C3)==0)
 242:	9d 99       	sbic	0x13, 5	; 19
 244:	04 c0       	rjmp	.+8      	; 0x24e <get_key_value+0x74>
		 {
			 key ='6';
			 while(readbit(C3_Pin,C3)==0);
 246:	9d 9b       	sbis	0x13, 5	; 19
 248:	fe cf       	rjmp	.-4      	; 0x246 <get_key_value+0x6c>
			 key ='5';
			 while(readbit(C2_Pin,C2)==0);
		 }
		 else if (readbit(C3_Pin,C3)==0)
		 {
			 key ='6';
 24a:	c6 e3       	ldi	r28, 0x36	; 54
 24c:	05 c0       	rjmp	.+10     	; 0x258 <get_key_value+0x7e>
			 while(readbit(C3_Pin,C3)==0);
		 }
		 else if (readbit(C4_Pin,C4)==0)
 24e:	9e 99       	sbic	0x13, 6	; 19
 250:	03 c0       	rjmp	.+6      	; 0x258 <get_key_value+0x7e>
		 {
			 key ='*';
			 while(readbit(C4_Pin,C4)==0);
 252:	9e 9b       	sbis	0x13, 6	; 19
 254:	fe cf       	rjmp	.-4      	; 0x252 <get_key_value+0x78>
			 key ='6';
			 while(readbit(C3_Pin,C3)==0);
		 }
		 else if (readbit(C4_Pin,C4)==0)
		 {
			 key ='*';
 256:	ca e2       	ldi	r28, 0x2A	; 42
			 while(readbit(C4_Pin,C4)==0);
		 }
		 switch_output(R3);
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 ac 00 	call	0x158	; 0x158 <switch_output>
		 if (readbit(C1_Pin,C1)==0)
 260:	9b 99       	sbic	0x13, 3	; 19
 262:	04 c0       	rjmp	.+8      	; 0x26c <get_key_value+0x92>
		 {
			 key ='7';
			 while(readbit(C1_Pin,C1)==0);
 264:	9b 9b       	sbis	0x13, 3	; 19
 266:	fe cf       	rjmp	.-4      	; 0x264 <get_key_value+0x8a>
			 while(readbit(C4_Pin,C4)==0);
		 }
		 switch_output(R3);
		 if (readbit(C1_Pin,C1)==0)
		 {
			 key ='7';
 268:	c7 e3       	ldi	r28, 0x37	; 55
 26a:	11 c0       	rjmp	.+34     	; 0x28e <get_key_value+0xb4>
			 while(readbit(C1_Pin,C1)==0);
		 }
		 else if (readbit(C2_Pin,C2)==0)
 26c:	9c 99       	sbic	0x13, 4	; 19
 26e:	04 c0       	rjmp	.+8      	; 0x278 <get_key_value+0x9e>
		 {
			 key ='8';
			 while(readbit(C2_Pin,C2)==0);
 270:	9c 9b       	sbis	0x13, 4	; 19
 272:	fe cf       	rjmp	.-4      	; 0x270 <get_key_value+0x96>
			 key ='7';
			 while(readbit(C1_Pin,C1)==0);
		 }
		 else if (readbit(C2_Pin,C2)==0)
		 {
			 key ='8';
 274:	c8 e3       	ldi	r28, 0x38	; 56
 276:	0b c0       	rjmp	.+22     	; 0x28e <get_key_value+0xb4>
			 while(readbit(C2_Pin,C2)==0);
		 }
		 else if (readbit(C3_Pin,C3)==0)
 278:	9d 99       	sbic	0x13, 5	; 19
 27a:	04 c0       	rjmp	.+8      	; 0x284 <get_key_value+0xaa>
		 {
			 key ='9';
			 while(readbit(C3_Pin,C3)==0);
 27c:	9d 9b       	sbis	0x13, 5	; 19
 27e:	fe cf       	rjmp	.-4      	; 0x27c <get_key_value+0xa2>
			 key ='8';
			 while(readbit(C2_Pin,C2)==0);
		 }
		 else if (readbit(C3_Pin,C3)==0)
		 {
			 key ='9';
 280:	c9 e3       	ldi	r28, 0x39	; 57
 282:	05 c0       	rjmp	.+10     	; 0x28e <get_key_value+0xb4>
			 while(readbit(C3_Pin,C3)==0);
		 }
		 else if (readbit(C4_Pin,C4)==0)
 284:	9e 99       	sbic	0x13, 6	; 19
 286:	03 c0       	rjmp	.+6      	; 0x28e <get_key_value+0xb4>
		 {
			 key ='-';
			 while(readbit(C4_Pin,C4)==0);
 288:	9e 9b       	sbis	0x13, 6	; 19
 28a:	fe cf       	rjmp	.-4      	; 0x288 <get_key_value+0xae>
			 key ='9';
			 while(readbit(C3_Pin,C3)==0);
		 }
		 else if (readbit(C4_Pin,C4)==0)
		 {
			 key ='-';
 28c:	cd e2       	ldi	r28, 0x2D	; 45
			 while(readbit(C4_Pin,C4)==0);
		 }
		 switch_output(R4);
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 ac 00 	call	0x158	; 0x158 <switch_output>
		 if (readbit(C1_Pin,C1)==0)
 296:	9b 99       	sbic	0x13, 3	; 19
 298:	04 c0       	rjmp	.+8      	; 0x2a2 <get_key_value+0xc8>
		 {
			 key ='C';
			 while(readbit(C1_Pin,C1)==0);
 29a:	9b 9b       	sbis	0x13, 3	; 19
 29c:	fe cf       	rjmp	.-4      	; 0x29a <get_key_value+0xc0>
			 while(readbit(C4_Pin,C4)==0);
		 }
		 switch_output(R4);
		 if (readbit(C1_Pin,C1)==0)
		 {
			 key ='C';
 29e:	c3 e4       	ldi	r28, 0x43	; 67
 2a0:	11 c0       	rjmp	.+34     	; 0x2c4 <get_key_value+0xea>
			 while(readbit(C1_Pin,C1)==0);
		 }
		 else if (readbit(C2_Pin,C2)==0)
 2a2:	9c 99       	sbic	0x13, 4	; 19
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <get_key_value+0xd4>
		 {
			 key ='0';
			 while(readbit(C2_Pin,C2)==0);
 2a6:	9c 9b       	sbis	0x13, 4	; 19
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <get_key_value+0xcc>
			 key ='C';
			 while(readbit(C1_Pin,C1)==0);
		 }
		 else if (readbit(C2_Pin,C2)==0)
		 {
			 key ='0';
 2aa:	c0 e3       	ldi	r28, 0x30	; 48
 2ac:	0b c0       	rjmp	.+22     	; 0x2c4 <get_key_value+0xea>
			 while(readbit(C2_Pin,C2)==0);
		 }
		 else if (readbit(C3_Pin,C3)==0)
 2ae:	9d 99       	sbic	0x13, 5	; 19
 2b0:	04 c0       	rjmp	.+8      	; 0x2ba <get_key_value+0xe0>
		 {
			 key ='=';
			 while(readbit(C3_Pin,C3)==0);
 2b2:	9d 9b       	sbis	0x13, 5	; 19
 2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <get_key_value+0xd8>
			 key ='0';
			 while(readbit(C2_Pin,C2)==0);
		 }
		 else if (readbit(C3_Pin,C3)==0)
		 {
			 key ='=';
 2b6:	cd e3       	ldi	r28, 0x3D	; 61
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <get_key_value+0xea>
			 while(readbit(C3_Pin,C3)==0);
		 }
		 else if (readbit(C4_Pin,C4)==0)
 2ba:	9e 99       	sbic	0x13, 6	; 19
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <get_key_value+0xea>
		 {
			 key ='+';
			 while(readbit(C4_Pin,C4)==0);
 2be:	9e 9b       	sbis	0x13, 6	; 19
 2c0:	fe cf       	rjmp	.-4      	; 0x2be <get_key_value+0xe4>
			 key ='=';
			 while(readbit(C3_Pin,C3)==0);
		 }
		 else if (readbit(C4_Pin,C4)==0)
		 {
			 key ='+';
 2c2:	cb e2       	ldi	r28, 0x2B	; 43

 char get_key_value(void)
 {
	 char key = notpressed; // 255 
	 int i=0;
	 while(key == notpressed && i<3)// key = '1' break condition
 2c4:	cf 3f       	cpi	r28, 0xFF	; 255
 2c6:	21 f4       	brne	.+8      	; 0x2d0 <get_key_value+0xf6>
 2c8:	03 30       	cpi	r16, 0x03	; 3
 2ca:	11 05       	cpc	r17, r1
 2cc:	0c f4       	brge	.+2      	; 0x2d0 <get_key_value+0xf6>
 2ce:	8c cf       	rjmp	.-232    	; 0x1e8 <get_key_value+0xe>
			 while(readbit(C4_Pin,C4)==0);
		 }
	 }
	 return key;
	 
 2d0:	8c 2f       	mov	r24, r28
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	08 95       	ret

000002da <LCD_send_data_4bit>:
}

void LCD_Next_Line(void)
{LCD_send_command_4bit(0xC0);}
void LCD_Shift_Right(void)
{LCD_send_command_4bit(0x14);}
 2da:	9b b3       	in	r25, 0x1b	; 27
 2dc:	9f 70       	andi	r25, 0x0F	; 15
 2de:	28 2f       	mov	r18, r24
 2e0:	20 7f       	andi	r18, 0xF0	; 240
 2e2:	92 2b       	or	r25, r18
 2e4:	9b bb       	out	0x1b, r25	; 27
 2e6:	98 b3       	in	r25, 0x18	; 24
 2e8:	92 60       	ori	r25, 0x02	; 2
 2ea:	98 bb       	out	0x18, r25	; 24
 2ec:	98 b3       	in	r25, 0x18	; 24
 2ee:	9b 7f       	andi	r25, 0xFB	; 251
 2f0:	98 bb       	out	0x18, r25	; 24
 2f2:	98 b3       	in	r25, 0x18	; 24
 2f4:	98 60       	ori	r25, 0x08	; 8
 2f6:	98 bb       	out	0x18, r25	; 24
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <LCD_send_data_4bit+0x20>
 2fa:	00 00       	nop
 2fc:	98 b3       	in	r25, 0x18	; 24
 2fe:	97 7f       	andi	r25, 0xF7	; 247
 300:	98 bb       	out	0x18, r25	; 24
 302:	32 e4       	ldi	r19, 0x42	; 66
 304:	3a 95       	dec	r19
 306:	f1 f7       	brne	.-4      	; 0x304 <LCD_send_data_4bit+0x2a>
 308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_send_data_4bit+0x30>
 30a:	2b b3       	in	r18, 0x1b	; 27
 30c:	30 e1       	ldi	r19, 0x10	; 16
 30e:	83 9f       	mul	r24, r19
 310:	c0 01       	movw	r24, r0
 312:	11 24       	eor	r1, r1
 314:	92 2f       	mov	r25, r18
 316:	9f 70       	andi	r25, 0x0F	; 15
 318:	89 2b       	or	r24, r25
 31a:	8b bb       	out	0x1b, r24	; 27
 31c:	88 b3       	in	r24, 0x18	; 24
 31e:	88 60       	ori	r24, 0x08	; 8
 320:	88 bb       	out	0x18, r24	; 24
 322:	00 c0       	rjmp	.+0      	; 0x324 <LCD_send_data_4bit+0x4a>
 324:	00 00       	nop
 326:	88 b3       	in	r24, 0x18	; 24
 328:	87 7f       	andi	r24, 0xF7	; 247
 32a:	88 bb       	out	0x18, r24	; 24
 32c:	8d ee       	ldi	r24, 0xED	; 237
 32e:	92 e0       	ldi	r25, 0x02	; 2
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <LCD_send_data_4bit+0x56>
 334:	00 c0       	rjmp	.+0      	; 0x336 <LCD_send_data_4bit+0x5c>
 336:	00 00       	nop
 338:	08 95       	ret

0000033a <LCD_send_command_4bit>:
 33a:	9b b3       	in	r25, 0x1b	; 27
 33c:	9f 70       	andi	r25, 0x0F	; 15
 33e:	28 2f       	mov	r18, r24
 340:	20 7f       	andi	r18, 0xF0	; 240
 342:	92 2b       	or	r25, r18
 344:	9b bb       	out	0x1b, r25	; 27
 346:	98 b3       	in	r25, 0x18	; 24
 348:	9d 7f       	andi	r25, 0xFD	; 253
 34a:	98 bb       	out	0x18, r25	; 24
 34c:	98 b3       	in	r25, 0x18	; 24
 34e:	9b 7f       	andi	r25, 0xFB	; 251
 350:	98 bb       	out	0x18, r25	; 24
 352:	98 b3       	in	r25, 0x18	; 24
 354:	98 60       	ori	r25, 0x08	; 8
 356:	98 bb       	out	0x18, r25	; 24
 358:	00 c0       	rjmp	.+0      	; 0x35a <LCD_send_command_4bit+0x20>
 35a:	00 00       	nop
 35c:	98 b3       	in	r25, 0x18	; 24
 35e:	97 7f       	andi	r25, 0xF7	; 247
 360:	98 bb       	out	0x18, r25	; 24
 362:	32 e4       	ldi	r19, 0x42	; 66
 364:	3a 95       	dec	r19
 366:	f1 f7       	brne	.-4      	; 0x364 <LCD_send_command_4bit+0x2a>
 368:	00 c0       	rjmp	.+0      	; 0x36a <LCD_send_command_4bit+0x30>
 36a:	2b b3       	in	r18, 0x1b	; 27
 36c:	30 e1       	ldi	r19, 0x10	; 16
 36e:	83 9f       	mul	r24, r19
 370:	c0 01       	movw	r24, r0
 372:	11 24       	eor	r1, r1
 374:	92 2f       	mov	r25, r18
 376:	9f 70       	andi	r25, 0x0F	; 15
 378:	89 2b       	or	r24, r25
 37a:	8b bb       	out	0x1b, r24	; 27
 37c:	88 b3       	in	r24, 0x18	; 24
 37e:	88 60       	ori	r24, 0x08	; 8
 380:	88 bb       	out	0x18, r24	; 24
 382:	00 c0       	rjmp	.+0      	; 0x384 <LCD_send_command_4bit+0x4a>
 384:	00 00       	nop
 386:	88 b3       	in	r24, 0x18	; 24
 388:	87 7f       	andi	r24, 0xF7	; 247
 38a:	88 bb       	out	0x18, r24	; 24
 38c:	8d ee       	ldi	r24, 0xED	; 237
 38e:	92 e0       	ldi	r25, 0x02	; 2
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_send_command_4bit+0x56>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_send_command_4bit+0x5c>
 396:	00 00       	nop
 398:	08 95       	ret

0000039a <LCD_Next_Line>:
 39a:	80 ec       	ldi	r24, 0xC0	; 192
 39c:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_command_4bit>
 3a0:	08 95       	ret

000003a2 <LCD_Shift_Left>:
void LCD_Shift_Left(void)
{LCD_send_command_4bit(0x10);}
 3a2:	80 e1       	ldi	r24, 0x10	; 16
 3a4:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_command_4bit>
 3a8:	08 95       	ret

000003aa <LCD_Clear>:
void LCD_Clear(void)
{LCD_send_command_4bit(0x01);}
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_command_4bit>
 3b0:	08 95       	ret

000003b2 <LCD_Home>:
void LCD_Home(void)
{LCD_send_command_4bit(0x02);}
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_command_4bit>
 3b8:	08 95       	ret

000003ba <LCD_INIT_4bit>:


void LCD_INIT_4bit(void)
{
	LCD_DATA_DIR|= 0xf0;
 3ba:	8a b3       	in	r24, 0x1a	; 26
 3bc:	80 6f       	ori	r24, 0xF0	; 240
 3be:	8a bb       	out	0x1a, r24	; 26
	setbit(LCD_control_DIR,EN);
 3c0:	87 b3       	in	r24, 0x17	; 23
 3c2:	88 60       	ori	r24, 0x08	; 8
 3c4:	87 bb       	out	0x17, r24	; 23
	setbit(LCD_control_DIR,RS);
 3c6:	87 b3       	in	r24, 0x17	; 23
 3c8:	82 60       	ori	r24, 0x02	; 2
 3ca:	87 bb       	out	0x17, r24	; 23
	setbit(LCD_control_DIR,RW);
 3cc:	87 b3       	in	r24, 0x17	; 23
 3ce:	84 60       	ori	r24, 0x04	; 4
 3d0:	87 bb       	out	0x17, r24	; 23
	LCD_send_command_4bit(0x02);// return home
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_command_4bit>
	LCD_send_command_4bit(0x28);// 2 line  and 4 bit mode
 3d8:	88 e2       	ldi	r24, 0x28	; 40
 3da:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_command_4bit>
	LCD_send_command_4bit(0x0c);// display on
 3de:	8c e0       	ldi	r24, 0x0C	; 12
 3e0:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_command_4bit>
	LCD_send_command_4bit(0x06);// auto increment
 3e4:	86 e0       	ldi	r24, 0x06	; 6
 3e6:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_command_4bit>
	LCD_send_command_4bit(0x01);// clear screen
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_send_command_4bit>
 3f0:	87 e8       	ldi	r24, 0x87	; 135
 3f2:	93 e1       	ldi	r25, 0x13	; 19
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCD_INIT_4bit+0x3a>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <LCD_INIT_4bit+0x40>
 3fa:	00 00       	nop
 3fc:	08 95       	ret

000003fe <LCD_send_string_4bit>:
	_delay_ms(20);
	
	
}
void LCD_send_string_4bit( char* str)
{
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	8c 01       	movw	r16, r24
	int count =0;
 408:	c0 e0       	ldi	r28, 0x00	; 0
 40a:	d0 e0       	ldi	r29, 0x00	; 0
	while(str[count]!=0)
 40c:	03 c0       	rjmp	.+6      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
	{
		LCD_send_data_4bit(str[count]);
 40e:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_send_data_4bit>
		count++;
 412:	21 96       	adiw	r28, 0x01	; 1
	
}
void LCD_send_string_4bit( char* str)
{
	int count =0;
	while(str[count]!=0)
 414:	f8 01       	movw	r30, r16
 416:	ec 0f       	add	r30, r28
 418:	fd 1f       	adc	r31, r29
 41a:	80 81       	ld	r24, Z
 41c:	81 11       	cpse	r24, r1
 41e:	f7 cf       	rjmp	.-18     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	{
		LCD_send_data_4bit(str[count]);
		count++;
	}
}
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	08 95       	ret

0000042a <Int_ASC>:

void Int_ASC(unsigned int ab)
{
 42a:	0f 93       	push	r16
 42c:	1f 93       	push	r17
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	28 97       	sbiw	r28, 0x08	; 8
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	fc 01       	movw	r30, r24
	int i;
	int array[4]; // array arrange data
	for(i=0; i<=3; i++)                  /* Convert decimal to ASCII                     */
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	50 e0       	ldi	r21, 0x00	; 0
 448:	33 c0       	rjmp	.+102    	; 0x4b0 <Int_ASC+0x86>
	{	// 35% 10 ==> 5
		array[i] = ab%10; // remainder  500   10 % 10 ==> 0  -->
 44a:	9f 01       	movw	r18, r30
 44c:	ad ec       	ldi	r26, 0xCD	; 205
 44e:	bc ec       	ldi	r27, 0xCC	; 204
 450:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__umulhisi3>
 454:	96 95       	lsr	r25
 456:	87 95       	ror	r24
 458:	96 95       	lsr	r25
 45a:	87 95       	ror	r24
 45c:	96 95       	lsr	r25
 45e:	87 95       	ror	r24
 460:	9c 01       	movw	r18, r24
 462:	22 0f       	add	r18, r18
 464:	33 1f       	adc	r19, r19
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	82 0f       	add	r24, r18
 474:	93 1f       	adc	r25, r19
 476:	9f 01       	movw	r18, r30
 478:	28 1b       	sub	r18, r24
 47a:	39 0b       	sbc	r19, r25
 47c:	c9 01       	movw	r24, r18
 47e:	da 01       	movw	r26, r20
 480:	aa 0f       	add	r26, r26
 482:	bb 1f       	adc	r27, r27
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	2c 0f       	add	r18, r28
 48a:	3d 1f       	adc	r19, r29
 48c:	a2 0f       	add	r26, r18
 48e:	b3 1f       	adc	r27, r19
 490:	8d 93       	st	X+, r24
 492:	9c 93       	st	X, r25
		//array[0]  last ab = 1 (1 % 10)==> 1 --> array[1]
		// 0 % 10 = 0 --> 0%10 = 0
		ab       = ab/10; // ab = 10/10 = 1 --> 1/10 ==> 0 int
 494:	9f 01       	movw	r18, r30
 496:	ad ec       	ldi	r26, 0xCD	; 205
 498:	bc ec       	ldi	r27, 0xCC	; 204
 49a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__umulhisi3>
 49e:	fc 01       	movw	r30, r24
 4a0:	f6 95       	lsr	r31
 4a2:	e7 95       	ror	r30
 4a4:	f6 95       	lsr	r31
 4a6:	e7 95       	ror	r30
 4a8:	f6 95       	lsr	r31
 4aa:	e7 95       	ror	r30

void Int_ASC(unsigned int ab)
{
	int i;
	int array[4]; // array arrange data
	for(i=0; i<=3; i++)                  /* Convert decimal to ASCII                     */
 4ac:	4f 5f       	subi	r20, 0xFF	; 255
 4ae:	5f 4f       	sbci	r21, 0xFF	; 255
 4b0:	44 30       	cpi	r20, 0x04	; 4
 4b2:	51 05       	cpc	r21, r1
 4b4:	54 f2       	brlt	.-108    	; 0x44a <Int_ASC+0x20>
 4b6:	04 e0       	ldi	r16, 0x04	; 4
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	83 e0       	ldi	r24, 0x03	; 3
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	1a c0       	rjmp	.+52     	; 0x4f4 <Int_ASC+0xca>
		//  5300
	}
	int k=4;
	for(i=3; i>=0; i--)
	{
		if(array[i]!=0 || i==0)
 4c0:	fc 01       	movw	r30, r24
 4c2:	ee 0f       	add	r30, r30
 4c4:	ff 1f       	adc	r31, r31
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	2c 0f       	add	r18, r28
 4cc:	3d 1f       	adc	r19, r29
 4ce:	e2 0f       	add	r30, r18
 4d0:	f3 1f       	adc	r31, r19
 4d2:	20 81       	ld	r18, Z
 4d4:	31 81       	ldd	r19, Z+1	; 0x01
 4d6:	23 2b       	or	r18, r19
 4d8:	29 f4       	brne	.+10     	; 0x4e4 <Int_ASC+0xba>
 4da:	00 97       	sbiw	r24, 0x00	; 0
 4dc:	31 f0       	breq	.+12     	; 0x4ea <Int_ASC+0xc0>
 4de:	9c 01       	movw	r18, r24
 4e0:	c8 01       	movw	r24, r16
 4e2:	05 c0       	rjmp	.+10     	; 0x4ee <Int_ASC+0xc4>
		{k=i;i=0;}
 4e4:	20 e0       	ldi	r18, 0x00	; 0
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <Int_ASC+0xc4>
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 e0       	ldi	r19, 0x00	; 0
		// 0100
		// 0010
		//  5300
	}
	int k=4;
	for(i=3; i>=0; i--)
 4ee:	8c 01       	movw	r16, r24
 4f0:	c9 01       	movw	r24, r18
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	99 23       	and	r25, r25
 4f6:	24 f7       	brge	.-56     	; 0x4c0 <Int_ASC+0x96>
 4f8:	0f c0       	rjmp	.+30     	; 0x518 <Int_ASC+0xee>

	}
	
	for(i=k; i>=0; i--)
	{
		LCD_send_data_4bit(array[i]+'0');
 4fa:	f8 01       	movw	r30, r16
 4fc:	ee 0f       	add	r30, r30
 4fe:	ff 1f       	adc	r31, r31
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	8c 0f       	add	r24, r28
 506:	9d 1f       	adc	r25, r29
 508:	e8 0f       	add	r30, r24
 50a:	f9 1f       	adc	r31, r25
 50c:	80 81       	ld	r24, Z
 50e:	80 5d       	subi	r24, 0xD0	; 208
 510:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_send_data_4bit>
		if(array[i]!=0 || i==0)
		{k=i;i=0;}

	}
	
	for(i=k; i>=0; i--)
 514:	01 50       	subi	r16, 0x01	; 1
 516:	11 09       	sbc	r17, r1
 518:	11 23       	and	r17, r17
 51a:	7c f7       	brge	.-34     	; 0x4fa <Int_ASC+0xd0>
		// 0 0 1 0
		// sending no : 48 ====> '0'
		// 0 1 2 3 ---> 9
		// 48 49 50 ---> end
	}
}
 51c:	28 96       	adiw	r28, 0x08	; 8
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	f8 94       	cli
 522:	de bf       	out	0x3e, r29	; 62
 524:	0f be       	out	0x3f, r0	; 63
 526:	cd bf       	out	0x3d, r28	; 61
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	1f 91       	pop	r17
 52e:	0f 91       	pop	r16
 530:	08 95       	ret

00000532 <SPI_Init>:
//1-init
//2-function send
//3-function recive
void SPI_Init()					/* SPI Initialize function */
{
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SS);	//Make MOSI, SCK, SS as Output pin
 532:	87 b3       	in	r24, 0x17	; 23
 534:	80 6b       	ori	r24, 0xB0	; 176
 536:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<MISO);			// Make MISO pin as input pin
 538:	87 b3       	in	r24, 0x17	; 23
 53a:	8f 7b       	andi	r24, 0xBF	; 191
 53c:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<SS);			// Make high on SS pin
 53e:	88 b3       	in	r24, 0x18	; 24
 540:	80 61       	ori	r24, 0x10	; 16
 542:	88 bb       	out	0x18, r24	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	// Enable SPI in master mode with Fosc/16
 544:	81 e5       	ldi	r24, 0x51	; 81
 546:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1<<SPI2X);			// Disable speed doubler
 548:	8e b1       	in	r24, 0x0e	; 14
 54a:	8e 7f       	andi	r24, 0xFE	; 254
 54c:	8e b9       	out	0x0e, r24	; 14
	PORTB &=~(1<<SS);  //Deselect
 54e:	88 b3       	in	r24, 0x18	; 24
 550:	8f 7e       	andi	r24, 0xEF	; 239
 552:	88 bb       	out	0x18, r24	; 24
 554:	08 95       	ret

00000556 <SPI_Write>:


void SPI_Write(unsigned char data)		/* SPI write data function */
{
	
	SPDR = data;			/* Write data to SPI data register */
 556:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	/* Wait till transmission complete */
 558:	77 9b       	sbis	0x0e, 7	; 14
 55a:	fe cf       	rjmp	.-4      	; 0x558 <SPI_Write+0x2>
	
	
}
 55c:	08 95       	ret

0000055e <SPI_Read>:


char SPI_Read()				/* SPI read data function */
{
	SPDR = 0xFF;
 55e:	8f ef       	ldi	r24, 0xFF	; 255
 560:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	/* Wait till reception complete */
 562:	77 9b       	sbis	0x0e, 7	; 14
 564:	fe cf       	rjmp	.-4      	; 0x562 <SPI_Read+0x4>
	return(SPDR);			/* Return received data */
 566:	8f b1       	in	r24, 0x0f	; 15
}
 568:	08 95       	ret

0000056a <UART_INIT>:


void UART_sendchar(unsigned char data)
{   
		while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
		UDR = data ;
 56a:	2a b1       	in	r18, 0x0a	; 10
 56c:	28 61       	ori	r18, 0x18	; 24
 56e:	2a b9       	out	0x0a, r18	; 10
 570:	20 b5       	in	r18, 0x20	; 32
 572:	26 68       	ori	r18, 0x86	; 134
 574:	20 bd       	out	0x20, r18	; 32
 576:	89 b9       	out	0x09, r24	; 9
 578:	90 bd       	out	0x20, r25	; 32
 57a:	8a b1       	in	r24, 0x0a	; 10
 57c:	80 68       	ori	r24, 0x80	; 128
 57e:	8a b9       	out	0x0a, r24	; 10
 580:	78 94       	sei
 582:	08 95       	ret

00000584 <UART_receivechar>:
}
unsigned char UART_receivechar()
{
	while(readbit(UCSRA,RXC)==0) // wait the data to be receive
 584:	09 c0       	rjmp	.+18     	; 0x598 <UART_receivechar+0x14>
	{	SPI_Write(0XFF);
 586:	8f ef       	ldi	r24, 0xFF	; 255
 588:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 58c:	83 ed       	ldi	r24, 0xD3	; 211
 58e:	90 e3       	ldi	r25, 0x30	; 48
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <UART_receivechar+0xc>
 594:	00 c0       	rjmp	.+0      	; 0x596 <UART_receivechar+0x12>
 596:	00 00       	nop
		while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
		UDR = data ;
}
unsigned char UART_receivechar()
{
	while(readbit(UCSRA,RXC)==0) // wait the data to be receive
 598:	5f 9b       	sbis	0x0b, 7	; 11
 59a:	f5 cf       	rjmp	.-22     	; 0x586 <UART_receivechar+0x2>
	{	SPI_Write(0XFF);
		_delay_ms(50);	}
	
	return UDR;// data source for variables
 59c:	8c b1       	in	r24, 0x0c	; 12
}
 59e:	08 95       	ret

000005a0 <main>:
 5a0:	2f ef       	ldi	r18, 0xFF	; 255
 5a2:	89 e6       	ldi	r24, 0x69	; 105
 5a4:	98 e1       	ldi	r25, 0x18	; 24
 5a6:	21 50       	subi	r18, 0x01	; 1
 5a8:	80 40       	sbci	r24, 0x00	; 0
 5aa:	90 40       	sbci	r25, 0x00	; 0
 5ac:	e1 f7       	brne	.-8      	; 0x5a6 <main+0x6>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <main+0x10>
 5b0:	00 00       	nop

int main(void)
{
	//Initialize
	_delay_ms(500);
	LCD_INIT_4bit();    // init lcd
 5b2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LCD_INIT_4bit>
	keypad_init();      // define key pad   //1//
 5b6:	0e 94 87 00 	call	0x10e	; 0x10e <keypad_init>
	UART_INIT(103);
 5ba:	87 e6       	ldi	r24, 0x67	; 103
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 b5 02 	call	0x56a	; 0x56a <UART_INIT>
	SPI_Init();
 5c2:	0e 94 99 02 	call	0x532	; 0x532 <SPI_Init>
	
    //Opening
	LCD_Clear();
 5c6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
	LCD_Home();
 5ca:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
	LCD_send_string_4bit("Smart Home Proj.");
 5ce:	80 e6       	ldi	r24, 0x60	; 96
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
	Buzzer_on();
 5d6:	0e 94 41 00 	call	0x82	; 0x82 <Buzzer_on>
 5da:	2f ef       	ldi	r18, 0xFF	; 255
 5dc:	84 e3       	ldi	r24, 0x34	; 52
 5de:	9c e0       	ldi	r25, 0x0C	; 12
 5e0:	21 50       	subi	r18, 0x01	; 1
 5e2:	80 40       	sbci	r24, 0x00	; 0
 5e4:	90 40       	sbci	r25, 0x00	; 0
 5e6:	e1 f7       	brne	.-8      	; 0x5e0 <main+0x40>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <main+0x4a>
 5ea:	00 00       	nop
	_delay_ms(250);
	Buzzer_off();
 5ec:	0e 94 48 00 	call	0x90	; 0x90 <Buzzer_off>
 5f0:	2f ef       	ldi	r18, 0xFF	; 255
 5f2:	80 e7       	ldi	r24, 0x70	; 112
 5f4:	92 e0       	ldi	r25, 0x02	; 2
 5f6:	21 50       	subi	r18, 0x01	; 1
 5f8:	80 40       	sbci	r24, 0x00	; 0
 5fa:	90 40       	sbci	r25, 0x00	; 0
 5fc:	e1 f7       	brne	.-8      	; 0x5f6 <main+0x56>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <main+0x60>
 600:	00 00       	nop
	_delay_ms(50);
	Buzzer_on();
 602:	0e 94 41 00 	call	0x82	; 0x82 <Buzzer_on>
 606:	2f ef       	ldi	r18, 0xFF	; 255
 608:	84 e3       	ldi	r24, 0x34	; 52
 60a:	9c e0       	ldi	r25, 0x0C	; 12
 60c:	21 50       	subi	r18, 0x01	; 1
 60e:	80 40       	sbci	r24, 0x00	; 0
 610:	90 40       	sbci	r25, 0x00	; 0
 612:	e1 f7       	brne	.-8      	; 0x60c <main+0x6c>
 614:	00 c0       	rjmp	.+0      	; 0x616 <main+0x76>
 616:	00 00       	nop
	_delay_ms(250);
	Buzzer_off();
 618:	0e 94 48 00 	call	0x90	; 0x90 <Buzzer_off>
 61c:	2f ef       	ldi	r18, 0xFF	; 255
 61e:	80 e7       	ldi	r24, 0x70	; 112
 620:	92 e0       	ldi	r25, 0x02	; 2
 622:	21 50       	subi	r18, 0x01	; 1
 624:	80 40       	sbci	r24, 0x00	; 0
 626:	90 40       	sbci	r25, 0x00	; 0
 628:	e1 f7       	brne	.-8      	; 0x622 <main+0x82>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <main+0x8c>
 62c:	00 00       	nop
 62e:	2f ef       	ldi	r18, 0xFF	; 255
 630:	87 ea       	ldi	r24, 0xA7	; 167
 632:	91 e6       	ldi	r25, 0x61	; 97
 634:	21 50       	subi	r18, 0x01	; 1
 636:	80 40       	sbci	r24, 0x00	; 0
 638:	90 40       	sbci	r25, 0x00	; 0
 63a:	e1 f7       	brne	.-8      	; 0x634 <main+0x94>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <main+0x9e>
 63e:	00 00       	nop
	_delay_ms(50);	
	_delay_ms(2000);
	
	//Main Functions
	User_login();
 640:	0e 94 14 07 	call	0xe28	; 0xe28 <User_login>
	menu();			
 644:	0e 94 ab 04 	call	0x956	; 0x956 <menu>
	
}
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	08 95       	ret

0000064e <__vector_13>:
ISR(USART_RXC_vect)
{
 64e:	1f 92       	push	r1
 650:	0f 92       	push	r0
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	0f 92       	push	r0
 656:	11 24       	eor	r1, r1
 658:	2f 93       	push	r18
 65a:	3f 93       	push	r19
 65c:	4f 93       	push	r20
 65e:	5f 93       	push	r21
 660:	6f 93       	push	r22
 662:	7f 93       	push	r23
 664:	8f 93       	push	r24
 666:	9f 93       	push	r25
 668:	af 93       	push	r26
 66a:	bf 93       	push	r27
 66c:	ef 93       	push	r30
 66e:	ff 93       	push	r31
	LCD_Clear();
 670:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
	LCD_Home();
 674:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
 678:	2f ef       	ldi	r18, 0xFF	; 255
 67a:	81 ee       	ldi	r24, 0xE1	; 225
 67c:	94 e0       	ldi	r25, 0x04	; 4
 67e:	21 50       	subi	r18, 0x01	; 1
 680:	80 40       	sbci	r24, 0x00	; 0
 682:	90 40       	sbci	r25, 0x00	; 0
 684:	e1 f7       	brne	.-8      	; 0x67e <__vector_13+0x30>
 686:	00 c0       	rjmp	.+0      	; 0x688 <__vector_13+0x3a>
 688:	00 00       	nop
	_delay_ms(100);
	LCD_send_string_4bit("Bluetooth Mode");
 68a:	81 e7       	ldi	r24, 0x71	; 113
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
	Bluetooth_Menu();	
 692:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <Bluetooth_Menu>
 696:	ff 91       	pop	r31
 698:	ef 91       	pop	r30
 69a:	bf 91       	pop	r27
 69c:	af 91       	pop	r26
 69e:	9f 91       	pop	r25
 6a0:	8f 91       	pop	r24
 6a2:	7f 91       	pop	r23
 6a4:	6f 91       	pop	r22
 6a6:	5f 91       	pop	r21
 6a8:	4f 91       	pop	r20
 6aa:	3f 91       	pop	r19
 6ac:	2f 91       	pop	r18
 6ae:	0f 90       	pop	r0
 6b0:	0f be       	out	0x3f, r0	; 63
 6b2:	0f 90       	pop	r0
 6b4:	1f 90       	pop	r1
 6b6:	18 95       	reti

000006b8 <Bluetooth_Menu>:


void Bluetooth_Menu(void)
{
	int x=0;
		x=UART_receivechar();
 6b8:	0e 94 c2 02 	call	0x584	; 0x584 <UART_receivechar>
 6bc:	90 e0       	ldi	r25, 0x00	; 0
		if(x=='1')
 6be:	81 33       	cpi	r24, 0x31	; 49
 6c0:	91 05       	cpc	r25, r1
 6c2:	51 f4       	brne	.+20     	; 0x6d8 <Bluetooth_Menu+0x20>
		{SPI_Write(1);
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 6ca:	87 ea       	ldi	r24, 0xA7	; 167
 6cc:	91 e6       	ldi	r25, 0x61	; 97
 6ce:	01 97       	sbiw	r24, 0x01	; 1
 6d0:	f1 f7       	brne	.-4      	; 0x6ce <Bluetooth_Menu+0x16>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <Bluetooth_Menu+0x1c>
 6d4:	00 00       	nop
 6d6:	08 95       	ret
		_delay_ms(100);}
		else if(x=='2')
 6d8:	82 33       	cpi	r24, 0x32	; 50
 6da:	91 05       	cpc	r25, r1
 6dc:	51 f4       	brne	.+20     	; 0x6f2 <Bluetooth_Menu+0x3a>
		{SPI_Write(2);
 6de:	82 e0       	ldi	r24, 0x02	; 2
 6e0:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 6e4:	e7 ea       	ldi	r30, 0xA7	; 167
 6e6:	f1 e6       	ldi	r31, 0x61	; 97
 6e8:	31 97       	sbiw	r30, 0x01	; 1
 6ea:	f1 f7       	brne	.-4      	; 0x6e8 <Bluetooth_Menu+0x30>
 6ec:	00 c0       	rjmp	.+0      	; 0x6ee <Bluetooth_Menu+0x36>
 6ee:	00 00       	nop
 6f0:	08 95       	ret
		_delay_ms(100);}
		else if(x=='3')
 6f2:	83 33       	cpi	r24, 0x33	; 51
 6f4:	91 05       	cpc	r25, r1
 6f6:	51 f4       	brne	.+20     	; 0x70c <Bluetooth_Menu+0x54>
		{	
		SPI_Write(3);
 6f8:	83 e0       	ldi	r24, 0x03	; 3
 6fa:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 6fe:	87 ea       	ldi	r24, 0xA7	; 167
 700:	91 e6       	ldi	r25, 0x61	; 97
 702:	01 97       	sbiw	r24, 0x01	; 1
 704:	f1 f7       	brne	.-4      	; 0x702 <Bluetooth_Menu+0x4a>
 706:	00 c0       	rjmp	.+0      	; 0x708 <Bluetooth_Menu+0x50>
 708:	00 00       	nop
 70a:	08 95       	ret
		_delay_ms(100);
		
		}
		else if(x=='4')
 70c:	84 33       	cpi	r24, 0x34	; 52
 70e:	91 05       	cpc	r25, r1
 710:	51 f4       	brne	.+20     	; 0x726 <Bluetooth_Menu+0x6e>
		{
		SPI_Write(4);
 712:	84 e0       	ldi	r24, 0x04	; 4
 714:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 718:	e7 ea       	ldi	r30, 0xA7	; 167
 71a:	f1 e6       	ldi	r31, 0x61	; 97
 71c:	31 97       	sbiw	r30, 0x01	; 1
 71e:	f1 f7       	brne	.-4      	; 0x71c <Bluetooth_Menu+0x64>
 720:	00 c0       	rjmp	.+0      	; 0x722 <Bluetooth_Menu+0x6a>
 722:	00 00       	nop
 724:	08 95       	ret
		_delay_ms(100);
		}
		else if(x=='5')
 726:	85 33       	cpi	r24, 0x35	; 53
 728:	91 05       	cpc	r25, r1
 72a:	51 f4       	brne	.+20     	; 0x740 <Bluetooth_Menu+0x88>
		{SPI_Write(5);
 72c:	85 e0       	ldi	r24, 0x05	; 5
 72e:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 732:	87 ea       	ldi	r24, 0xA7	; 167
 734:	91 e6       	ldi	r25, 0x61	; 97
 736:	01 97       	sbiw	r24, 0x01	; 1
 738:	f1 f7       	brne	.-4      	; 0x736 <Bluetooth_Menu+0x7e>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <Bluetooth_Menu+0x84>
 73c:	00 00       	nop
 73e:	08 95       	ret
		_delay_ms(100);}
		else if(x=='6')
 740:	86 33       	cpi	r24, 0x36	; 54
 742:	91 05       	cpc	r25, r1
 744:	51 f4       	brne	.+20     	; 0x75a <Bluetooth_Menu+0xa2>
		{SPI_Write(6);
 746:	86 e0       	ldi	r24, 0x06	; 6
 748:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 74c:	e7 ea       	ldi	r30, 0xA7	; 167
 74e:	f1 e6       	ldi	r31, 0x61	; 97
 750:	31 97       	sbiw	r30, 0x01	; 1
 752:	f1 f7       	brne	.-4      	; 0x750 <Bluetooth_Menu+0x98>
 754:	00 c0       	rjmp	.+0      	; 0x756 <Bluetooth_Menu+0x9e>
 756:	00 00       	nop
 758:	08 95       	ret
		_delay_ms(100);}
		else if(x=='7')
 75a:	87 33       	cpi	r24, 0x37	; 55
 75c:	91 05       	cpc	r25, r1
 75e:	39 f4       	brne	.+14     	; 0x76e <Bluetooth_Menu+0xb6>
		{setbit(DDRC,2);
 760:	84 b3       	in	r24, 0x14	; 20
 762:	84 60       	ori	r24, 0x04	; 4
 764:	84 bb       	out	0x14, r24	; 20
		setbit(PORTC,2);}
 766:	85 b3       	in	r24, 0x15	; 21
 768:	84 60       	ori	r24, 0x04	; 4
 76a:	85 bb       	out	0x15, r24	; 21
 76c:	08 95       	ret
		else if(x=='8')
 76e:	88 33       	cpi	r24, 0x38	; 56
 770:	91 05       	cpc	r25, r1
 772:	39 f4       	brne	.+14     	; 0x782 <Bluetooth_Menu+0xca>
		{clearbit(DDRC,2);
 774:	84 b3       	in	r24, 0x14	; 20
 776:	8b 7f       	andi	r24, 0xFB	; 251
 778:	84 bb       	out	0x14, r24	; 20
		clearbit(PORTC,2);}
 77a:	85 b3       	in	r24, 0x15	; 21
 77c:	8b 7f       	andi	r24, 0xFB	; 251
 77e:	85 bb       	out	0x15, r24	; 21
 780:	08 95       	ret
		else if(x=='9')
 782:	89 33       	cpi	r24, 0x39	; 57
 784:	91 05       	cpc	r25, r1
 786:	39 f4       	brne	.+14     	; 0x796 <Bluetooth_Menu+0xde>
		{setbit(DDRC,7);
 788:	84 b3       	in	r24, 0x14	; 20
 78a:	80 68       	ori	r24, 0x80	; 128
 78c:	84 bb       	out	0x14, r24	; 20
		setbit(PORTC,7);}
 78e:	85 b3       	in	r24, 0x15	; 21
 790:	80 68       	ori	r24, 0x80	; 128
 792:	85 bb       	out	0x15, r24	; 21
 794:	08 95       	ret
		else if(x=='0')
 796:	80 33       	cpi	r24, 0x30	; 48
 798:	91 05       	cpc	r25, r1
 79a:	39 f4       	brne	.+14     	; 0x7aa <Bluetooth_Menu+0xf2>
		{clearbit(DDRC,7);
 79c:	84 b3       	in	r24, 0x14	; 20
 79e:	8f 77       	andi	r24, 0x7F	; 127
 7a0:	84 bb       	out	0x14, r24	; 20
		clearbit(PORTC,7);}
 7a2:	85 b3       	in	r24, 0x15	; 21
 7a4:	8f 77       	andi	r24, 0x7F	; 127
 7a6:	85 bb       	out	0x15, r24	; 21
 7a8:	08 95       	ret
		else if(x=='A')
 7aa:	81 34       	cpi	r24, 0x41	; 65
 7ac:	91 05       	cpc	r25, r1
 7ae:	51 f4       	brne	.+20     	; 0x7c4 <Bluetooth_Menu+0x10c>
		{SPI_Write(0X0F);
 7b0:	8f e0       	ldi	r24, 0x0F	; 15
 7b2:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 7b6:	87 ea       	ldi	r24, 0xA7	; 167
 7b8:	91 e6       	ldi	r25, 0x61	; 97
 7ba:	01 97       	sbiw	r24, 0x01	; 1
 7bc:	f1 f7       	brne	.-4      	; 0x7ba <Bluetooth_Menu+0x102>
 7be:	00 c0       	rjmp	.+0      	; 0x7c0 <Bluetooth_Menu+0x108>
 7c0:	00 00       	nop
 7c2:	08 95       	ret
		_delay_ms(100);}
		else if(x=='B')
 7c4:	82 34       	cpi	r24, 0x42	; 66
 7c6:	91 05       	cpc	r25, r1
 7c8:	51 f4       	brne	.+20     	; 0x7de <Bluetooth_Menu+0x126>
		{SPI_Write(0XA0);
 7ca:	80 ea       	ldi	r24, 0xA0	; 160
 7cc:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 7d0:	e7 ea       	ldi	r30, 0xA7	; 167
 7d2:	f1 e6       	ldi	r31, 0x61	; 97
 7d4:	31 97       	sbiw	r30, 0x01	; 1
 7d6:	f1 f7       	brne	.-4      	; 0x7d4 <Bluetooth_Menu+0x11c>
 7d8:	00 c0       	rjmp	.+0      	; 0x7da <Bluetooth_Menu+0x122>
 7da:	00 00       	nop
 7dc:	08 95       	ret
		_delay_ms(100);}
		else if(x=='C')
 7de:	83 34       	cpi	r24, 0x43	; 67
 7e0:	91 05       	cpc	r25, r1
 7e2:	51 f4       	brne	.+20     	; 0x7f8 <Bluetooth_Menu+0x140>
		{SPI_Write(0XA1);
 7e4:	81 ea       	ldi	r24, 0xA1	; 161
 7e6:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 7ea:	87 ea       	ldi	r24, 0xA7	; 167
 7ec:	91 e6       	ldi	r25, 0x61	; 97
 7ee:	01 97       	sbiw	r24, 0x01	; 1
 7f0:	f1 f7       	brne	.-4      	; 0x7ee <Bluetooth_Menu+0x136>
 7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <Bluetooth_Menu+0x13c>
 7f4:	00 00       	nop
 7f6:	08 95       	ret
		_delay_ms(100);}
		else if(x=='D')
 7f8:	84 34       	cpi	r24, 0x44	; 68
 7fa:	91 05       	cpc	r25, r1
 7fc:	51 f4       	brne	.+20     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
		{SPI_Write(0XA3);
 7fe:	83 ea       	ldi	r24, 0xA3	; 163
 800:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 804:	e7 ea       	ldi	r30, 0xA7	; 167
 806:	f1 e6       	ldi	r31, 0x61	; 97
 808:	31 97       	sbiw	r30, 0x01	; 1
 80a:	f1 f7       	brne	.-4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 80c:	00 c0       	rjmp	.+0      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80e:	00 00       	nop
 810:	08 95       	ret
		_delay_ms(100);}
		else if(x=='E')
 812:	85 34       	cpi	r24, 0x45	; 69
 814:	91 05       	cpc	r25, r1
 816:	51 f4       	brne	.+20     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
		{SPI_Write(0XA4);
 818:	84 ea       	ldi	r24, 0xA4	; 164
 81a:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 81e:	87 ea       	ldi	r24, 0xA7	; 167
 820:	91 e6       	ldi	r25, 0x61	; 97
 822:	01 97       	sbiw	r24, 0x01	; 1
 824:	f1 f7       	brne	.-4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 826:	00 c0       	rjmp	.+0      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 828:	00 00       	nop
 82a:	08 95       	ret
		_delay_ms(100);}
		else if(x=='F')
 82c:	86 34       	cpi	r24, 0x46	; 70
 82e:	91 05       	cpc	r25, r1
 830:	09 f0       	breq	.+2      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 832:	47 c0       	rjmp	.+142    	; 0x8c2 <__stack+0x63>
		{
		LCD_Next_Line();
 834:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Next_Line>
		LCD_send_string_4bit("Temp.:");
 838:	80 e8       	ldi	r24, 0x80	; 128
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		SPI_Write(0xA2);
 840:	82 ea       	ldi	r24, 0xA2	; 162
 842:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 846:	e7 ea       	ldi	r30, 0xA7	; 167
 848:	f1 e6       	ldi	r31, 0x61	; 97
 84a:	31 97       	sbiw	r30, 0x01	; 1
 84c:	f1 f7       	brne	.-4      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 84e:	00 c0       	rjmp	.+0      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 850:	00 00       	nop
		_delay_ms(100);
		unsigned int read=0xFF;
		read=SPI_Read();
 852:	0e 94 af 02 	call	0x55e	; 0x55e <SPI_Read>
 856:	28 2f       	mov	r18, r24
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	e7 ea       	ldi	r30, 0xA7	; 167
 85c:	f1 e6       	ldi	r31, 0x61	; 97
 85e:	31 97       	sbiw	r30, 0x01	; 1
 860:	f1 f7       	brne	.-4      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 862:	00 c0       	rjmp	.+0      	; 0x864 <__stack+0x5>
 864:	00 00       	nop
		_delay_ms(100);
		if(read!=0xFF)
 866:	2f 3f       	cpi	r18, 0xFF	; 255
 868:	31 05       	cpc	r19, r1
 86a:	19 f0       	breq	.+6      	; 0x872 <__stack+0x13>
		Int_ASC(read);
 86c:	c9 01       	movw	r24, r18
 86e:	0e 94 15 02 	call	0x42a	; 0x42a <Int_ASC>
		read=0xFF;
		read=SPI_Read();
 872:	0e 94 af 02 	call	0x55e	; 0x55e <SPI_Read>
 876:	28 2f       	mov	r18, r24
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	e7 ea       	ldi	r30, 0xA7	; 167
 87c:	f1 e6       	ldi	r31, 0x61	; 97
 87e:	31 97       	sbiw	r30, 0x01	; 1
 880:	f1 f7       	brne	.-4      	; 0x87e <__stack+0x1f>
 882:	00 c0       	rjmp	.+0      	; 0x884 <__stack+0x25>
 884:	00 00       	nop
		_delay_ms(100);
		if(read!=0xFF)
 886:	2f 3f       	cpi	r18, 0xFF	; 255
 888:	31 05       	cpc	r19, r1
 88a:	19 f0       	breq	.+6      	; 0x892 <__stack+0x33>
		Int_ASC(read);
 88c:	c9 01       	movw	r24, r18
 88e:	0e 94 15 02 	call	0x42a	; 0x42a <Int_ASC>
 892:	ff e3       	ldi	r31, 0x3F	; 63
 894:	22 e4       	ldi	r18, 0x42	; 66
 896:	8f e0       	ldi	r24, 0x0F	; 15
 898:	f1 50       	subi	r31, 0x01	; 1
 89a:	20 40       	sbci	r18, 0x00	; 0
 89c:	80 40       	sbci	r24, 0x00	; 0
 89e:	e1 f7       	brne	.-8      	; 0x898 <__stack+0x39>
 8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <__stack+0x43>
 8a2:	00 00       	nop
		_delay_ms(5000);
		LCD_Clear();
 8a4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
		LCD_Home();
 8a8:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
 8ac:	e7 ea       	ldi	r30, 0xA7	; 167
 8ae:	f1 e6       	ldi	r31, 0x61	; 97
 8b0:	31 97       	sbiw	r30, 0x01	; 1
 8b2:	f1 f7       	brne	.-4      	; 0x8b0 <__stack+0x51>
 8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <__stack+0x57>
 8b6:	00 00       	nop
		_delay_ms(100);
		LCD_send_string_4bit("Bluetooth Mode");
 8b8:	81 e7       	ldi	r24, 0x71	; 113
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
 8c0:	08 95       	ret
		}
		else if(x=='g')
 8c2:	87 36       	cpi	r24, 0x67	; 103
 8c4:	91 05       	cpc	r25, r1
 8c6:	39 f4       	brne	.+14     	; 0x8d6 <__stack+0x77>
		{clearbit(DDRD,3);
 8c8:	81 b3       	in	r24, 0x11	; 17
 8ca:	87 7f       	andi	r24, 0xF7	; 247
 8cc:	81 bb       	out	0x11, r24	; 17
		clearbit(PORTD,3);}									
 8ce:	82 b3       	in	r24, 0x12	; 18
 8d0:	87 7f       	andi	r24, 0xF7	; 247
 8d2:	82 bb       	out	0x12, r24	; 18
 8d4:	08 95       	ret
		else if(x=='h')
 8d6:	88 36       	cpi	r24, 0x68	; 104
 8d8:	91 05       	cpc	r25, r1
 8da:	39 f4       	brne	.+14     	; 0x8ea <__stack+0x8b>
		{setbit(DDRD,3);
 8dc:	81 b3       	in	r24, 0x11	; 17
 8de:	88 60       	ori	r24, 0x08	; 8
 8e0:	81 bb       	out	0x11, r24	; 17
		setbit(PORTD,3);}
 8e2:	82 b3       	in	r24, 0x12	; 18
 8e4:	88 60       	ori	r24, 0x08	; 8
 8e6:	82 bb       	out	0x12, r24	; 18
 8e8:	08 95       	ret
		else if(x=='i')
 8ea:	89 36       	cpi	r24, 0x69	; 105
 8ec:	91 05       	cpc	r25, r1
 8ee:	39 f4       	brne	.+14     	; 0x8fe <__stack+0x9f>
		{setbit(DDRD,3);
 8f0:	81 b3       	in	r24, 0x11	; 17
 8f2:	88 60       	ori	r24, 0x08	; 8
 8f4:	81 bb       	out	0x11, r24	; 17
		setbit(PORTD,3);}
 8f6:	82 b3       	in	r24, 0x12	; 18
 8f8:	88 60       	ori	r24, 0x08	; 8
 8fa:	82 bb       	out	0x12, r24	; 18
 8fc:	08 95       	ret
		else if(x=='j')
 8fe:	8a 36       	cpi	r24, 0x6A	; 106
 900:	91 05       	cpc	r25, r1
 902:	39 f4       	brne	.+14     	; 0x912 <__stack+0xb3>
		{setbit(DDRD,3);
 904:	81 b3       	in	r24, 0x11	; 17
 906:	88 60       	ori	r24, 0x08	; 8
 908:	81 bb       	out	0x11, r24	; 17
		setbit(PORTD,3);}
 90a:	82 b3       	in	r24, 0x12	; 18
 90c:	88 60       	ori	r24, 0x08	; 8
 90e:	82 bb       	out	0x12, r24	; 18
 910:	08 95       	ret
		else if(x=='k')
 912:	8b 36       	cpi	r24, 0x6B	; 107
 914:	91 05       	cpc	r25, r1
 916:	31 f4       	brne	.+12     	; 0x924 <__stack+0xc5>
		{setbit(DDRD,3);
 918:	81 b3       	in	r24, 0x11	; 17
 91a:	88 60       	ori	r24, 0x08	; 8
 91c:	81 bb       	out	0x11, r24	; 17
		setbit(PORTD,3);}																													
 91e:	82 b3       	in	r24, 0x12	; 18
 920:	88 60       	ori	r24, 0x08	; 8
 922:	82 bb       	out	0x12, r24	; 18
 924:	08 95       	ret

00000926 <get_answer>:
void Servo_close(void);
void Buzzer(void);


unsigned char get_answer(void)
{
 926:	cf 93       	push	r28
			unsigned char k=0xFF;
 928:	cf ef       	ldi	r28, 0xFF	; 255
			while(k==notpressed)
 92a:	10 c0       	rjmp	.+32     	; 0x94c <get_answer+0x26>
			{
			k=get_key_value();
 92c:	0e 94 ed 00 	call	0x1da	; 0x1da <get_key_value>
 930:	c8 2f       	mov	r28, r24
			if(k!=notpressed)
 932:	8f 3f       	cpi	r24, 0xFF	; 255
 934:	11 f0       	breq	.+4      	; 0x93a <get_answer+0x14>
			LCD_send_data_4bit(k);
 936:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_send_data_4bit>
			SPI_Write(0XFF);
 93a:	8f ef       	ldi	r24, 0xFF	; 255
 93c:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 940:	83 ed       	ldi	r24, 0xD3	; 211
 942:	90 e3       	ldi	r25, 0x30	; 48
 944:	01 97       	sbiw	r24, 0x01	; 1
 946:	f1 f7       	brne	.-4      	; 0x944 <get_answer+0x1e>
 948:	00 c0       	rjmp	.+0      	; 0x94a <get_answer+0x24>
 94a:	00 00       	nop


unsigned char get_answer(void)
{
			unsigned char k=0xFF;
			while(k==notpressed)
 94c:	cf 3f       	cpi	r28, 0xFF	; 255
 94e:	71 f3       	breq	.-36     	; 0x92c <get_answer+0x6>
			LCD_send_data_4bit(k);
			SPI_Write(0XFF);
			_delay_ms(50);
			}
			return k;
}
 950:	8c 2f       	mov	r24, r28
 952:	cf 91       	pop	r28
 954:	08 95       	ret

00000956 <menu>:

void menu(void)
{	
	int Menu_flag=0;
 956:	c0 e0       	ldi	r28, 0x00	; 0
 958:	d0 e0       	ldi	r29, 0x00	; 0
 95a:	02 c0       	rjmp	.+4      	; 0x960 <menu+0xa>
		if(choice=='1')
		{SPI_Write(0xA3);}
		if(choice=='2')
		{SPI_Write(0xA4);}*/
		if(choice=='0')
		{Menu_flag=4;}
 95c:	c4 e0       	ldi	r28, 0x04	; 4
 95e:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char choice=0xFF;
	
	while(1)
	{
	
	if(Menu_flag==0)
 960:	20 97       	sbiw	r28, 0x00	; 0
 962:	51 f5       	brne	.+84     	; 0x9b8 <menu+0x62>
	{
		LCD_Clear();
 964:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
		LCD_Home();
 968:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
 96c:	87 ea       	ldi	r24, 0xA7	; 167
 96e:	91 e6       	ldi	r25, 0x61	; 97
 970:	01 97       	sbiw	r24, 0x01	; 1
 972:	f1 f7       	brne	.-4      	; 0x970 <menu+0x1a>
 974:	00 c0       	rjmp	.+0      	; 0x976 <menu+0x20>
 976:	00 00       	nop
		_delay_ms(100);
		LCD_send_string_4bit("User Mode  R:1");
 978:	87 e8       	ldi	r24, 0x87	; 135
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		LCD_Next_Line();
 980:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Next_Line>
		LCD_send_string_4bit("Dim:2 AC:3 ~:4");
 984:	86 e9       	ldi	r24, 0x96	; 150
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		choice=get_answer();
 98c:	0e 94 93 04 	call	0x926	; 0x926 <get_answer>
		
		//Main Menu
		/////////////////////////
		if(choice=='1')
 990:	81 33       	cpi	r24, 0x31	; 49
 992:	39 f0       	breq	.+14     	; 0x9a2 <menu+0x4c>
		{
		Menu_flag=1;	
		}
		else if(choice=='2')
 994:	82 33       	cpi	r24, 0x32	; 50
 996:	41 f0       	breq	.+16     	; 0x9a8 <menu+0x52>
		{
		Menu_flag=2;	
		}		
		else if(choice=='3')
 998:	83 33       	cpi	r24, 0x33	; 51
 99a:	49 f0       	breq	.+18     	; 0x9ae <menu+0x58>
		{
		Menu_flag=3;	
		}
		else if(choice=='4')
 99c:	84 33       	cpi	r24, 0x34	; 52
 99e:	61 f4       	brne	.+24     	; 0x9b8 <menu+0x62>
 9a0:	09 c0       	rjmp	.+18     	; 0x9b4 <menu+0x5e>
		
		//Main Menu
		/////////////////////////
		if(choice=='1')
		{
		Menu_flag=1;	
 9a2:	c1 e0       	ldi	r28, 0x01	; 1
 9a4:	d0 e0       	ldi	r29, 0x00	; 0
 9a6:	08 c0       	rjmp	.+16     	; 0x9b8 <menu+0x62>
		}
		else if(choice=='2')
		{
		Menu_flag=2;	
 9a8:	c2 e0       	ldi	r28, 0x02	; 2
 9aa:	d0 e0       	ldi	r29, 0x00	; 0
 9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <menu+0x62>
		}		
		else if(choice=='3')
		{
		Menu_flag=3;	
 9ae:	c3 e0       	ldi	r28, 0x03	; 3
 9b0:	d0 e0       	ldi	r29, 0x00	; 0
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <menu+0x62>
		}
		else if(choice=='4')
		{
		Menu_flag=4;	
 9b4:	c4 e0       	ldi	r28, 0x04	; 4
 9b6:	d0 e0       	ldi	r29, 0x00	; 0
		}	
	}//0
	////////////////////////////
	
	if(Menu_flag==1)
 9b8:	c1 30       	cpi	r28, 0x01	; 1
 9ba:	d1 05       	cpc	r29, r1
 9bc:	09 f0       	breq	.+2      	; 0x9c0 <menu+0x6a>
 9be:	93 c0       	rjmp	.+294    	; 0xae6 <menu+0x190>
	{
	LCD_Clear();
 9c0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
	LCD_Home();
 9c4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
 9c8:	e7 ea       	ldi	r30, 0xA7	; 167
 9ca:	f1 e6       	ldi	r31, 0x61	; 97
 9cc:	31 97       	sbiw	r30, 0x01	; 1
 9ce:	f1 f7       	brne	.-4      	; 0x9cc <menu+0x76>
 9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <menu+0x7c>
 9d2:	00 00       	nop
	_delay_ms(100);
	LCD_send_string_4bit("R1:1 R2:2 R3:3");
 9d4:	85 ea       	ldi	r24, 0xA5	; 165
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
	LCD_Next_Line();
 9dc:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Next_Line>
	LCD_send_string_4bit("R4:4 R5:5 Ret.:0");		
 9e0:	84 eb       	ldi	r24, 0xB4	; 180
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
	choice=get_answer();
 9e8:	0e 94 93 04 	call	0x926	; 0x926 <get_answer>
 9ec:	18 2f       	mov	r17, r24
	//Bulbs
	////////////////////////////
	if(choice=='1')
 9ee:	81 33       	cpi	r24, 0x31	; 49
 9f0:	b1 f4       	brne	.+44     	; 0xa1e <menu+0xc8>
	{
	LCD_Clear();
 9f2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
	LCD_Home();	
 9f6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
 9fa:	87 ea       	ldi	r24, 0xA7	; 167
 9fc:	91 e6       	ldi	r25, 0x61	; 97
 9fe:	01 97       	sbiw	r24, 0x01	; 1
 a00:	f1 f7       	brne	.-4      	; 0x9fe <menu+0xa8>
 a02:	00 c0       	rjmp	.+0      	; 0xa04 <menu+0xae>
 a04:	00 00       	nop
	_delay_ms(100);
	LCD_send_string_4bit("Room1 Lights");
 a06:	85 ec       	ldi	r24, 0xC5	; 197
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
	LCD_Next_Line();
 a0e:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Next_Line>
	LCD_send_string_4bit("On:1 Off:2 Ret:0");
 a12:	82 ed       	ldi	r24, 0xD2	; 210
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
	Menu_flag=5;
 a1a:	c5 e0       	ldi	r28, 0x05	; 5
 a1c:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(choice=='2')
 a1e:	12 33       	cpi	r17, 0x32	; 50
 a20:	b1 f4       	brne	.+44     	; 0xa4e <menu+0xf8>
	{
		LCD_Clear();
 a22:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
		LCD_Home();
 a26:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
 a2a:	e7 ea       	ldi	r30, 0xA7	; 167
 a2c:	f1 e6       	ldi	r31, 0x61	; 97
 a2e:	31 97       	sbiw	r30, 0x01	; 1
 a30:	f1 f7       	brne	.-4      	; 0xa2e <menu+0xd8>
 a32:	00 c0       	rjmp	.+0      	; 0xa34 <menu+0xde>
 a34:	00 00       	nop
		_delay_ms(100);
		LCD_send_string_4bit("Room2 Lights");
 a36:	83 ee       	ldi	r24, 0xE3	; 227
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		LCD_Next_Line();
 a3e:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Next_Line>
		LCD_send_string_4bit("On:1 Off:2 Ret:0");
 a42:	82 ed       	ldi	r24, 0xD2	; 210
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		Menu_flag=6;
 a4a:	c6 e0       	ldi	r28, 0x06	; 6
 a4c:	d0 e0       	ldi	r29, 0x00	; 0
	}	
	if(choice=='3')
 a4e:	13 33       	cpi	r17, 0x33	; 51
 a50:	b1 f4       	brne	.+44     	; 0xa7e <menu+0x128>
	{
		LCD_Clear();
 a52:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
		LCD_Home();
 a56:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
 a5a:	87 ea       	ldi	r24, 0xA7	; 167
 a5c:	91 e6       	ldi	r25, 0x61	; 97
 a5e:	01 97       	sbiw	r24, 0x01	; 1
 a60:	f1 f7       	brne	.-4      	; 0xa5e <menu+0x108>
 a62:	00 c0       	rjmp	.+0      	; 0xa64 <menu+0x10e>
 a64:	00 00       	nop
		_delay_ms(100);
		LCD_send_string_4bit("Room3 Lights");
 a66:	80 ef       	ldi	r24, 0xF0	; 240
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		LCD_Next_Line();
 a6e:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Next_Line>
		LCD_send_string_4bit("On:1 Off:2 Ret:0");
 a72:	82 ed       	ldi	r24, 0xD2	; 210
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		Menu_flag=7;
 a7a:	c7 e0       	ldi	r28, 0x07	; 7
 a7c:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(choice=='4')
 a7e:	14 33       	cpi	r17, 0x34	; 52
 a80:	b1 f4       	brne	.+44     	; 0xaae <menu+0x158>
	{
		LCD_Clear();
 a82:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
		LCD_Home();
 a86:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
 a8a:	e7 ea       	ldi	r30, 0xA7	; 167
 a8c:	f1 e6       	ldi	r31, 0x61	; 97
 a8e:	31 97       	sbiw	r30, 0x01	; 1
 a90:	f1 f7       	brne	.-4      	; 0xa8e <menu+0x138>
 a92:	00 c0       	rjmp	.+0      	; 0xa94 <menu+0x13e>
 a94:	00 00       	nop
		_delay_ms(100);
		LCD_send_string_4bit("Room4 Lights");
 a96:	8d ef       	ldi	r24, 0xFD	; 253
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		LCD_Next_Line();
 a9e:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Next_Line>
		LCD_send_string_4bit("On:1 Off:2 Ret:0");
 aa2:	82 ed       	ldi	r24, 0xD2	; 210
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		Menu_flag=8;
 aaa:	c8 e0       	ldi	r28, 0x08	; 8
 aac:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(choice=='5')
 aae:	15 33       	cpi	r17, 0x35	; 53
 ab0:	b1 f4       	brne	.+44     	; 0xade <menu+0x188>
	{
		LCD_Clear();
 ab2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
		LCD_Home();
 ab6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
 aba:	87 ea       	ldi	r24, 0xA7	; 167
 abc:	91 e6       	ldi	r25, 0x61	; 97
 abe:	01 97       	sbiw	r24, 0x01	; 1
 ac0:	f1 f7       	brne	.-4      	; 0xabe <menu+0x168>
 ac2:	00 c0       	rjmp	.+0      	; 0xac4 <menu+0x16e>
 ac4:	00 00       	nop
		_delay_ms(100);
		LCD_send_string_4bit("Room5 Lights");
 ac6:	8a e0       	ldi	r24, 0x0A	; 10
 ac8:	91 e0       	ldi	r25, 0x01	; 1
 aca:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		LCD_Next_Line();
 ace:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Next_Line>
		LCD_send_string_4bit("On:1 Off:2 Ret:0");
 ad2:	82 ed       	ldi	r24, 0xD2	; 210
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		Menu_flag=9;
 ada:	c9 e0       	ldi	r28, 0x09	; 9
 adc:	d0 e0       	ldi	r29, 0x00	; 0
	}			
	if(choice=='0')
 ade:	10 33       	cpi	r17, 0x30	; 48
 ae0:	11 f4       	brne	.+4      	; 0xae6 <menu+0x190>
	{
		Menu_flag=0;
 ae2:	c0 e0       	ldi	r28, 0x00	; 0
 ae4:	d0 e0       	ldi	r29, 0x00	; 0
	}
		
	}//1
	if(Menu_flag==5)
 ae6:	c5 30       	cpi	r28, 0x05	; 5
 ae8:	d1 05       	cpc	r29, r1
 aea:	e9 f4       	brne	.+58     	; 0xb26 <menu+0x1d0>
	{
		choice=get_answer();
 aec:	0e 94 93 04 	call	0x926	; 0x926 <get_answer>
 af0:	18 2f       	mov	r17, r24
		if(choice=='1')
 af2:	81 33       	cpi	r24, 0x31	; 49
 af4:	49 f4       	brne	.+18     	; 0xb08 <menu+0x1b2>
		{
		SPI_Write(1);
 af6:	81 e0       	ldi	r24, 0x01	; 1
 af8:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 afc:	e7 ea       	ldi	r30, 0xA7	; 167
 afe:	f1 e6       	ldi	r31, 0x61	; 97
 b00:	31 97       	sbiw	r30, 0x01	; 1
 b02:	f1 f7       	brne	.-4      	; 0xb00 <menu+0x1aa>
 b04:	00 c0       	rjmp	.+0      	; 0xb06 <menu+0x1b0>
 b06:	00 00       	nop
		_delay_ms(100);
		}
		if(choice=='2')
 b08:	12 33       	cpi	r17, 0x32	; 50
 b0a:	49 f4       	brne	.+18     	; 0xb1e <menu+0x1c8>
		{
		SPI_Write(2);
 b0c:	82 e0       	ldi	r24, 0x02	; 2
 b0e:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 b12:	87 ea       	ldi	r24, 0xA7	; 167
 b14:	91 e6       	ldi	r25, 0x61	; 97
 b16:	01 97       	sbiw	r24, 0x01	; 1
 b18:	f1 f7       	brne	.-4      	; 0xb16 <menu+0x1c0>
 b1a:	00 c0       	rjmp	.+0      	; 0xb1c <menu+0x1c6>
 b1c:	00 00       	nop
		_delay_ms(100);
		}	
		if(choice=='0')
 b1e:	10 33       	cpi	r17, 0x30	; 48
 b20:	11 f4       	brne	.+4      	; 0xb26 <menu+0x1d0>
		{Menu_flag=1;}		
 b22:	c1 e0       	ldi	r28, 0x01	; 1
 b24:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(Menu_flag==6)
 b26:	c6 30       	cpi	r28, 0x06	; 6
 b28:	d1 05       	cpc	r29, r1
 b2a:	e9 f4       	brne	.+58     	; 0xb66 <menu+0x210>
	{
		choice=get_answer();
 b2c:	0e 94 93 04 	call	0x926	; 0x926 <get_answer>
 b30:	18 2f       	mov	r17, r24
		if(choice=='1')
 b32:	81 33       	cpi	r24, 0x31	; 49
 b34:	49 f4       	brne	.+18     	; 0xb48 <menu+0x1f2>
		{		
			SPI_Write(3);
 b36:	83 e0       	ldi	r24, 0x03	; 3
 b38:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 b3c:	e7 ea       	ldi	r30, 0xA7	; 167
 b3e:	f1 e6       	ldi	r31, 0x61	; 97
 b40:	31 97       	sbiw	r30, 0x01	; 1
 b42:	f1 f7       	brne	.-4      	; 0xb40 <menu+0x1ea>
 b44:	00 c0       	rjmp	.+0      	; 0xb46 <menu+0x1f0>
 b46:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='2')
 b48:	12 33       	cpi	r17, 0x32	; 50
 b4a:	49 f4       	brne	.+18     	; 0xb5e <menu+0x208>
		{		
			SPI_Write(4);
 b4c:	84 e0       	ldi	r24, 0x04	; 4
 b4e:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 b52:	87 ea       	ldi	r24, 0xA7	; 167
 b54:	91 e6       	ldi	r25, 0x61	; 97
 b56:	01 97       	sbiw	r24, 0x01	; 1
 b58:	f1 f7       	brne	.-4      	; 0xb56 <menu+0x200>
 b5a:	00 c0       	rjmp	.+0      	; 0xb5c <menu+0x206>
 b5c:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='0')
 b5e:	10 33       	cpi	r17, 0x30	; 48
 b60:	11 f4       	brne	.+4      	; 0xb66 <menu+0x210>
		{Menu_flag=1;}
 b62:	c1 e0       	ldi	r28, 0x01	; 1
 b64:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(Menu_flag==7)
 b66:	c7 30       	cpi	r28, 0x07	; 7
 b68:	d1 05       	cpc	r29, r1
 b6a:	e9 f4       	brne	.+58     	; 0xba6 <menu+0x250>
	{
		choice=get_answer();
 b6c:	0e 94 93 04 	call	0x926	; 0x926 <get_answer>
 b70:	18 2f       	mov	r17, r24
		if(choice=='1')
 b72:	81 33       	cpi	r24, 0x31	; 49
 b74:	49 f4       	brne	.+18     	; 0xb88 <menu+0x232>
		{		
			SPI_Write(5);
 b76:	85 e0       	ldi	r24, 0x05	; 5
 b78:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 b7c:	e7 ea       	ldi	r30, 0xA7	; 167
 b7e:	f1 e6       	ldi	r31, 0x61	; 97
 b80:	31 97       	sbiw	r30, 0x01	; 1
 b82:	f1 f7       	brne	.-4      	; 0xb80 <menu+0x22a>
 b84:	00 c0       	rjmp	.+0      	; 0xb86 <menu+0x230>
 b86:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='2')
 b88:	12 33       	cpi	r17, 0x32	; 50
 b8a:	49 f4       	brne	.+18     	; 0xb9e <menu+0x248>
		{		
			SPI_Write(6);
 b8c:	86 e0       	ldi	r24, 0x06	; 6
 b8e:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 b92:	87 ea       	ldi	r24, 0xA7	; 167
 b94:	91 e6       	ldi	r25, 0x61	; 97
 b96:	01 97       	sbiw	r24, 0x01	; 1
 b98:	f1 f7       	brne	.-4      	; 0xb96 <menu+0x240>
 b9a:	00 c0       	rjmp	.+0      	; 0xb9c <menu+0x246>
 b9c:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='0')
 b9e:	10 33       	cpi	r17, 0x30	; 48
 ba0:	11 f4       	brne	.+4      	; 0xba6 <menu+0x250>
		{Menu_flag=1;}
 ba2:	c1 e0       	ldi	r28, 0x01	; 1
 ba4:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	if(Menu_flag==8)
 ba6:	c8 30       	cpi	r28, 0x08	; 8
 ba8:	d1 05       	cpc	r29, r1
 baa:	b1 f4       	brne	.+44     	; 0xbd8 <menu+0x282>
	{
		choice=get_answer();
 bac:	0e 94 93 04 	call	0x926	; 0x926 <get_answer>
		if(choice=='1')
 bb0:	81 33       	cpi	r24, 0x31	; 49
 bb2:	31 f4       	brne	.+12     	; 0xbc0 <menu+0x26a>
		{		
			//SPI_Write(7);
			//_delay_ms(100);
			setbit(DDRC,2);
 bb4:	94 b3       	in	r25, 0x14	; 20
 bb6:	94 60       	ori	r25, 0x04	; 4
 bb8:	94 bb       	out	0x14, r25	; 20
			setbit(PORTC,2);
 bba:	95 b3       	in	r25, 0x15	; 21
 bbc:	94 60       	ori	r25, 0x04	; 4
 bbe:	95 bb       	out	0x15, r25	; 21
		}
		if(choice=='2')
 bc0:	82 33       	cpi	r24, 0x32	; 50
 bc2:	31 f4       	brne	.+12     	; 0xbd0 <menu+0x27a>
		{		
			clearbit(DDRC,2);
 bc4:	94 b3       	in	r25, 0x14	; 20
 bc6:	9b 7f       	andi	r25, 0xFB	; 251
 bc8:	94 bb       	out	0x14, r25	; 20
			clearbit(PORTC,2);			
 bca:	95 b3       	in	r25, 0x15	; 21
 bcc:	9b 7f       	andi	r25, 0xFB	; 251
 bce:	95 bb       	out	0x15, r25	; 21
			//SPI_Write(8);
			//_delay_ms(100);
		}
		if(choice=='0')
 bd0:	80 33       	cpi	r24, 0x30	; 48
 bd2:	11 f4       	brne	.+4      	; 0xbd8 <menu+0x282>
		{Menu_flag=1;}
 bd4:	c1 e0       	ldi	r28, 0x01	; 1
 bd6:	d0 e0       	ldi	r29, 0x00	; 0
	}	
	if(Menu_flag==9)
 bd8:	c9 30       	cpi	r28, 0x09	; 9
 bda:	d1 05       	cpc	r29, r1
 bdc:	b1 f4       	brne	.+44     	; 0xc0a <menu+0x2b4>
	{
		choice=get_answer();
 bde:	0e 94 93 04 	call	0x926	; 0x926 <get_answer>
		if(choice=='1')
 be2:	81 33       	cpi	r24, 0x31	; 49
 be4:	31 f4       	brne	.+12     	; 0xbf2 <menu+0x29c>
		{		
			setbit(DDRC,7);
 be6:	94 b3       	in	r25, 0x14	; 20
 be8:	90 68       	ori	r25, 0x80	; 128
 bea:	94 bb       	out	0x14, r25	; 20
			setbit(PORTC,7);						
 bec:	95 b3       	in	r25, 0x15	; 21
 bee:	90 68       	ori	r25, 0x80	; 128
 bf0:	95 bb       	out	0x15, r25	; 21
			//SPI_Write(9);
			//_delay_ms(100);
		}
		if(choice=='2')
 bf2:	82 33       	cpi	r24, 0x32	; 50
 bf4:	31 f4       	brne	.+12     	; 0xc02 <menu+0x2ac>
		{		
			clearbit(DDRC,7);
 bf6:	94 b3       	in	r25, 0x14	; 20
 bf8:	9f 77       	andi	r25, 0x7F	; 127
 bfa:	94 bb       	out	0x14, r25	; 20
			clearbit(PORTC,7);			
 bfc:	95 b3       	in	r25, 0x15	; 21
 bfe:	9f 77       	andi	r25, 0x7F	; 127
 c00:	95 bb       	out	0x15, r25	; 21
			//SPI_Write(0);
			//_delay_ms(100);
		}
		if(choice=='0')
 c02:	80 33       	cpi	r24, 0x30	; 48
 c04:	11 f4       	brne	.+4      	; 0xc0a <menu+0x2b4>
		{Menu_flag=1;}
 c06:	c1 e0       	ldi	r28, 0x01	; 1
 c08:	d0 e0       	ldi	r29, 0x00	; 0
	}
	//Dimmer
	///////////////////////////
	if(Menu_flag==2)
 c0a:	c2 30       	cpi	r28, 0x02	; 2
 c0c:	d1 05       	cpc	r29, r1
 c0e:	09 f0       	breq	.+2      	; 0xc12 <menu+0x2bc>
 c10:	42 c0       	rjmp	.+132    	; 0xc96 <menu+0x340>
	{
		LCD_Clear();
 c12:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
		LCD_Home();
 c16:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
 c1a:	e7 ea       	ldi	r30, 0xA7	; 167
 c1c:	f1 e6       	ldi	r31, 0x61	; 97
 c1e:	31 97       	sbiw	r30, 0x01	; 1
 c20:	f1 f7       	brne	.-4      	; 0xc1e <menu+0x2c8>
 c22:	00 c0       	rjmp	.+0      	; 0xc24 <menu+0x2ce>
 c24:	00 00       	nop
		_delay_ms(100);
		LCD_send_string_4bit("Dimmer:1~5");
 c26:	87 e1       	ldi	r24, 0x17	; 23
 c28:	91 e0       	ldi	r25, 0x01	; 1
 c2a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		LCD_Next_Line();
 c2e:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Next_Line>
		LCD_send_string_4bit("Ret:0");
 c32:	8d ed       	ldi	r24, 0xDD	; 221
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		choice=get_answer();
 c3a:	0e 94 93 04 	call	0x926	; 0x926 <get_answer>
		if(choice=='1')
 c3e:	81 33       	cpi	r24, 0x31	; 49
 c40:	31 f4       	brne	.+12     	; 0xc4e <menu+0x2f8>
		{clearbit(DDRD,3);
 c42:	91 b3       	in	r25, 0x11	; 17
 c44:	97 7f       	andi	r25, 0xF7	; 247
 c46:	91 bb       	out	0x11, r25	; 17
		clearbit(PORTD,3);}
 c48:	92 b3       	in	r25, 0x12	; 18
 c4a:	97 7f       	andi	r25, 0xF7	; 247
 c4c:	92 bb       	out	0x12, r25	; 18
		if(choice=='2')
 c4e:	82 33       	cpi	r24, 0x32	; 50
 c50:	31 f4       	brne	.+12     	; 0xc5e <menu+0x308>
		{setbit(DDRD,3);
 c52:	91 b3       	in	r25, 0x11	; 17
 c54:	98 60       	ori	r25, 0x08	; 8
 c56:	91 bb       	out	0x11, r25	; 17
		setbit(PORTD,3);}
 c58:	92 b3       	in	r25, 0x12	; 18
 c5a:	98 60       	ori	r25, 0x08	; 8
 c5c:	92 bb       	out	0x12, r25	; 18
		if(choice=='3')
 c5e:	83 33       	cpi	r24, 0x33	; 51
 c60:	31 f4       	brne	.+12     	; 0xc6e <menu+0x318>
		{setbit(DDRD,3);
 c62:	91 b3       	in	r25, 0x11	; 17
 c64:	98 60       	ori	r25, 0x08	; 8
 c66:	91 bb       	out	0x11, r25	; 17
		setbit(PORTD,3);}
 c68:	92 b3       	in	r25, 0x12	; 18
 c6a:	98 60       	ori	r25, 0x08	; 8
 c6c:	92 bb       	out	0x12, r25	; 18
		if(choice=='4')
 c6e:	84 33       	cpi	r24, 0x34	; 52
 c70:	31 f4       	brne	.+12     	; 0xc7e <menu+0x328>
		{setbit(DDRD,3);
 c72:	91 b3       	in	r25, 0x11	; 17
 c74:	98 60       	ori	r25, 0x08	; 8
 c76:	91 bb       	out	0x11, r25	; 17
		setbit(PORTD,3);}
 c78:	92 b3       	in	r25, 0x12	; 18
 c7a:	98 60       	ori	r25, 0x08	; 8
 c7c:	92 bb       	out	0x12, r25	; 18
		if(choice=='5')
 c7e:	85 33       	cpi	r24, 0x35	; 53
 c80:	31 f4       	brne	.+12     	; 0xc8e <menu+0x338>
		{setbit(DDRD,3);
 c82:	91 b3       	in	r25, 0x11	; 17
 c84:	98 60       	ori	r25, 0x08	; 8
 c86:	91 bb       	out	0x11, r25	; 17
		setbit(PORTD,3);}	
 c88:	92 b3       	in	r25, 0x12	; 18
 c8a:	98 60       	ori	r25, 0x08	; 8
 c8c:	92 bb       	out	0x12, r25	; 18
		if(choice=='0')
 c8e:	80 33       	cpi	r24, 0x30	; 48
 c90:	11 f4       	brne	.+4      	; 0xc96 <menu+0x340>
		{Menu_flag=0;}
 c92:	c0 e0       	ldi	r28, 0x00	; 0
 c94:	d0 e0       	ldi	r29, 0x00	; 0
				
	}
	if(Menu_flag==3)
 c96:	c3 30       	cpi	r28, 0x03	; 3
 c98:	d1 05       	cpc	r29, r1
 c9a:	e1 f5       	brne	.+120    	; 0xd14 <menu+0x3be>
	{
		LCD_Clear();
 c9c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
		LCD_Home();
 ca0:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
 ca4:	87 ea       	ldi	r24, 0xA7	; 167
 ca6:	91 e6       	ldi	r25, 0x61	; 97
 ca8:	01 97       	sbiw	r24, 0x01	; 1
 caa:	f1 f7       	brne	.-4      	; 0xca8 <menu+0x352>
 cac:	00 c0       	rjmp	.+0      	; 0xcae <menu+0x358>
 cae:	00 00       	nop
		_delay_ms(100);
		LCD_send_string_4bit("Air Cond. Auto:1");
 cb0:	82 e2       	ldi	r24, 0x22	; 34
 cb2:	91 e0       	ldi	r25, 0x01	; 1
 cb4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		LCD_Next_Line();
 cb8:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Next_Line>
		LCD_send_string_4bit("On:2 Off:3 Ret:0");
 cbc:	83 e3       	ldi	r24, 0x33	; 51
 cbe:	91 e0       	ldi	r25, 0x01	; 1
 cc0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		choice=get_answer();
 cc4:	0e 94 93 04 	call	0x926	; 0x926 <get_answer>
 cc8:	18 2f       	mov	r17, r24
		if(choice=='1')
 cca:	81 33       	cpi	r24, 0x31	; 49
 ccc:	49 f4       	brne	.+18     	; 0xce0 <menu+0x38a>
		{
			SPI_Write(0X0F);
 cce:	8f e0       	ldi	r24, 0x0F	; 15
 cd0:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 cd4:	e7 ea       	ldi	r30, 0xA7	; 167
 cd6:	f1 e6       	ldi	r31, 0x61	; 97
 cd8:	31 97       	sbiw	r30, 0x01	; 1
 cda:	f1 f7       	brne	.-4      	; 0xcd8 <menu+0x382>
 cdc:	00 c0       	rjmp	.+0      	; 0xcde <menu+0x388>
 cde:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='2')
 ce0:	12 33       	cpi	r17, 0x32	; 50
 ce2:	49 f4       	brne	.+18     	; 0xcf6 <menu+0x3a0>
		{
			SPI_Write(0XA0);
 ce4:	80 ea       	ldi	r24, 0xA0	; 160
 ce6:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 cea:	87 ea       	ldi	r24, 0xA7	; 167
 cec:	91 e6       	ldi	r25, 0x61	; 97
 cee:	01 97       	sbiw	r24, 0x01	; 1
 cf0:	f1 f7       	brne	.-4      	; 0xcee <menu+0x398>
 cf2:	00 c0       	rjmp	.+0      	; 0xcf4 <menu+0x39e>
 cf4:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='3')
 cf6:	13 33       	cpi	r17, 0x33	; 51
 cf8:	49 f4       	brne	.+18     	; 0xd0c <menu+0x3b6>
		{
			SPI_Write(0XA1);
 cfa:	81 ea       	ldi	r24, 0xA1	; 161
 cfc:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 d00:	e7 ea       	ldi	r30, 0xA7	; 167
 d02:	f1 e6       	ldi	r31, 0x61	; 97
 d04:	31 97       	sbiw	r30, 0x01	; 1
 d06:	f1 f7       	brne	.-4      	; 0xd04 <menu+0x3ae>
 d08:	00 c0       	rjmp	.+0      	; 0xd0a <menu+0x3b4>
 d0a:	00 00       	nop
			_delay_ms(100);
		}
		if(choice=='0')
 d0c:	10 33       	cpi	r17, 0x30	; 48
 d0e:	11 f4       	brne	.+4      	; 0xd14 <menu+0x3be>
		{Menu_flag=0;}
 d10:	c0 e0       	ldi	r28, 0x00	; 0
 d12:	d0 e0       	ldi	r29, 0x00	; 0
		
	}
	if(Menu_flag==4)
 d14:	c4 30       	cpi	r28, 0x04	; 4
 d16:	d1 05       	cpc	r29, r1
 d18:	11 f5       	brne	.+68     	; 0xd5e <menu+0x408>
	{
		LCD_Clear();
 d1a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
		LCD_Home();
 d1e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
 d22:	87 ea       	ldi	r24, 0xA7	; 167
 d24:	91 e6       	ldi	r25, 0x61	; 97
 d26:	01 97       	sbiw	r24, 0x01	; 1
 d28:	f1 f7       	brne	.-4      	; 0xd26 <menu+0x3d0>
 d2a:	00 c0       	rjmp	.+0      	; 0xd2c <menu+0x3d6>
 d2c:	00 00       	nop
		_delay_ms(100);
		LCD_send_string_4bit("Temp:4");
 d2e:	84 e4       	ldi	r24, 0x44	; 68
 d30:	91 e0       	ldi	r25, 0x01	; 1
 d32:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		LCD_Next_Line();
 d36:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Next_Line>
		LCD_send_string_4bit("Door:5 Ret:0");
 d3a:	8b e4       	ldi	r24, 0x4B	; 75
 d3c:	91 e0       	ldi	r25, 0x01	; 1
 d3e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		choice=get_answer();
 d42:	0e 94 93 04 	call	0x926	; 0x926 <get_answer>
		if(choice=='4')
 d46:	84 33       	cpi	r24, 0x34	; 52
 d48:	11 f4       	brne	.+4      	; 0xd4e <menu+0x3f8>
		{Menu_flag=10;}
 d4a:	ca e0       	ldi	r28, 0x0A	; 10
 d4c:	d0 e0       	ldi	r29, 0x00	; 0
		if(choice=='5')
 d4e:	85 33       	cpi	r24, 0x35	; 53
 d50:	11 f4       	brne	.+4      	; 0xd56 <menu+0x400>
		{Menu_flag=11;}
 d52:	cb e0       	ldi	r28, 0x0B	; 11
 d54:	d0 e0       	ldi	r29, 0x00	; 0
		if(choice=='0')
 d56:	80 33       	cpi	r24, 0x30	; 48
 d58:	11 f4       	brne	.+4      	; 0xd5e <menu+0x408>
		{Menu_flag=0;}	
 d5a:	c0 e0       	ldi	r28, 0x00	; 0
 d5c:	d0 e0       	ldi	r29, 0x00	; 0
	}	
	if(Menu_flag==10)
 d5e:	ca 30       	cpi	r28, 0x0A	; 10
 d60:	d1 05       	cpc	r29, r1
 d62:	09 f0       	breq	.+2      	; 0xd66 <menu+0x410>
 d64:	43 c0       	rjmp	.+134    	; 0xdec <menu+0x496>
	{
		LCD_Clear();
 d66:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
		LCD_Home();
 d6a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
 d6e:	e7 ea       	ldi	r30, 0xA7	; 167
 d70:	f1 e6       	ldi	r31, 0x61	; 97
 d72:	31 97       	sbiw	r30, 0x01	; 1
 d74:	f1 f7       	brne	.-4      	; 0xd72 <menu+0x41c>
 d76:	00 c0       	rjmp	.+0      	; 0xd78 <menu+0x422>
 d78:	00 00       	nop
		_delay_ms(100);
		LCD_send_string_4bit("Temp. Set(21~27)");
 d7a:	88 e5       	ldi	r24, 0x58	; 88
 d7c:	91 e0       	ldi	r25, 0x01	; 1
 d7e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		LCD_Next_Line();
 d82:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Next_Line>
		LCD_send_string_4bit("Temp.:");
 d86:	80 e8       	ldi	r24, 0x80	; 128
 d88:	90 e0       	ldi	r25, 0x00	; 0
 d8a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		SPI_Write(0xA2);
 d8e:	82 ea       	ldi	r24, 0xA2	; 162
 d90:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_Write>
 d94:	87 ea       	ldi	r24, 0xA7	; 167
 d96:	91 e6       	ldi	r25, 0x61	; 97
 d98:	01 97       	sbiw	r24, 0x01	; 1
 d9a:	f1 f7       	brne	.-4      	; 0xd98 <menu+0x442>
 d9c:	00 c0       	rjmp	.+0      	; 0xd9e <menu+0x448>
 d9e:	00 00       	nop
		_delay_ms(100);
		unsigned int read=0xFF;
		read=SPI_Read();
 da0:	0e 94 af 02 	call	0x55e	; 0x55e <SPI_Read>
 da4:	28 2f       	mov	r18, r24
 da6:	30 e0       	ldi	r19, 0x00	; 0
 da8:	e7 ea       	ldi	r30, 0xA7	; 167
 daa:	f1 e6       	ldi	r31, 0x61	; 97
 dac:	31 97       	sbiw	r30, 0x01	; 1
 dae:	f1 f7       	brne	.-4      	; 0xdac <menu+0x456>
 db0:	00 c0       	rjmp	.+0      	; 0xdb2 <menu+0x45c>
 db2:	00 00       	nop
		_delay_ms(100);
		if(read!=0xFF)
 db4:	2f 3f       	cpi	r18, 0xFF	; 255
 db6:	31 05       	cpc	r19, r1
 db8:	19 f0       	breq	.+6      	; 0xdc0 <menu+0x46a>
		Int_ASC(read);
 dba:	c9 01       	movw	r24, r18
 dbc:	0e 94 15 02 	call	0x42a	; 0x42a <Int_ASC>
		read=0xFF;
		read=SPI_Read();
 dc0:	0e 94 af 02 	call	0x55e	; 0x55e <SPI_Read>
 dc4:	28 2f       	mov	r18, r24
 dc6:	30 e0       	ldi	r19, 0x00	; 0
 dc8:	e7 ea       	ldi	r30, 0xA7	; 167
 dca:	f1 e6       	ldi	r31, 0x61	; 97
 dcc:	31 97       	sbiw	r30, 0x01	; 1
 dce:	f1 f7       	brne	.-4      	; 0xdcc <menu+0x476>
 dd0:	00 c0       	rjmp	.+0      	; 0xdd2 <menu+0x47c>
 dd2:	00 00       	nop
		_delay_ms(100);
		if(read!=0xFF)
 dd4:	2f 3f       	cpi	r18, 0xFF	; 255
 dd6:	31 05       	cpc	r19, r1
 dd8:	19 f0       	breq	.+6      	; 0xde0 <menu+0x48a>
		Int_ASC(read);		
 dda:	c9 01       	movw	r24, r18
 ddc:	0e 94 15 02 	call	0x42a	; 0x42a <Int_ASC>
		choice=get_answer();
 de0:	0e 94 93 04 	call	0x926	; 0x926 <get_answer>
		if(choice=='0')
 de4:	80 33       	cpi	r24, 0x30	; 48
 de6:	11 f4       	brne	.+4      	; 0xdec <menu+0x496>
		{Menu_flag=4;}
 de8:	c4 e0       	ldi	r28, 0x04	; 4
 dea:	d0 e0       	ldi	r29, 0x00	; 0
	}	
	if(Menu_flag==11)
 dec:	cb 30       	cpi	r28, 0x0B	; 11
 dee:	d1 05       	cpc	r29, r1
 df0:	09 f0       	breq	.+2      	; 0xdf4 <menu+0x49e>
 df2:	b6 cd       	rjmp	.-1172   	; 0x960 <menu+0xa>
	{
		LCD_Clear();
 df4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
		LCD_Home();
 df8:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
 dfc:	87 ea       	ldi	r24, 0xA7	; 167
 dfe:	91 e6       	ldi	r25, 0x61	; 97
 e00:	01 97       	sbiw	r24, 0x01	; 1
 e02:	f1 f7       	brne	.-4      	; 0xe00 <menu+0x4aa>
 e04:	00 c0       	rjmp	.+0      	; 0xe06 <menu+0x4b0>
 e06:	00 00       	nop
		_delay_ms(100);
		LCD_send_string_4bit("Door:");
 e08:	89 e6       	ldi	r24, 0x69	; 105
 e0a:	91 e0       	ldi	r25, 0x01	; 1
 e0c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		LCD_Next_Line();
 e10:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Next_Line>
		LCD_send_string_4bit("Bluetooth Only");
 e14:	8f e6       	ldi	r24, 0x6F	; 111
 e16:	91 e0       	ldi	r25, 0x01	; 1
 e18:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		choice=get_answer();
 e1c:	0e 94 93 04 	call	0x926	; 0x926 <get_answer>
		choice=get_answer();
		if(choice=='1')
		{SPI_Write(0xA3);}
		if(choice=='2')
		{SPI_Write(0xA4);}*/
		if(choice=='0')
 e20:	80 33       	cpi	r24, 0x30	; 48
 e22:	09 f0       	breq	.+2      	; 0xe26 <menu+0x4d0>
 e24:	9d cd       	rjmp	.-1222   	; 0x960 <menu+0xa>
 e26:	9a cd       	rjmp	.-1228   	; 0x95c <menu+0x6>

00000e28 <User_login>:
void Buzzer_on(void);
void Buzzer_off(void);


void User_login(void)
{
 e28:	df 92       	push	r13
 e2a:	ef 92       	push	r14
 e2c:	ff 92       	push	r15
 e2e:	0f 93       	push	r16
 e30:	1f 93       	push	r17
 e32:	cf 93       	push	r28
 e34:	df 93       	push	r29
 e36:	00 d0       	rcall	.+0      	; 0xe38 <User_login+0x10>
 e38:	00 d0       	rcall	.+0      	; 0xe3a <User_login+0x12>
 e3a:	cd b7       	in	r28, 0x3d	; 61
 e3c:	de b7       	in	r29, 0x3e	; 62
		
		char pass_flag=0;
		char trials=0;
		char saved_pass[4]={'1','2','3','4'};
 e3e:	81 e3       	ldi	r24, 0x31	; 49
 e40:	89 83       	std	Y+1, r24	; 0x01
 e42:	82 e3       	ldi	r24, 0x32	; 50
 e44:	8a 83       	std	Y+2, r24	; 0x02
 e46:	83 e3       	ldi	r24, 0x33	; 51
 e48:	8b 83       	std	Y+3, r24	; 0x03
 e4a:	84 e3       	ldi	r24, 0x34	; 52
 e4c:	8c 83       	std	Y+4, r24	; 0x04
		char k=0xFF;
		char pass[4];
		
		LCD_Clear();
 e4e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
		LCD_Home();
 e52:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
 e56:	87 ea       	ldi	r24, 0xA7	; 167
 e58:	91 e6       	ldi	r25, 0x61	; 97
 e5a:	01 97       	sbiw	r24, 0x01	; 1
 e5c:	f1 f7       	brne	.-4      	; 0xe5a <User_login+0x32>
 e5e:	00 c0       	rjmp	.+0      	; 0xe60 <User_login+0x38>
 e60:	00 00       	nop
		_delay_ms(100);
		LCD_send_string_4bit("User Pass:");
 e62:	8e e7       	ldi	r24, 0x7E	; 126
 e64:	91 e0       	ldi	r25, 0x01	; 1
 e66:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
		LCD_Next_Line();
 e6a:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Next_Line>

void User_login(void)
{
		
		char pass_flag=0;
		char trials=0;
 e6e:	d1 2c       	mov	r13, r1


void User_login(void)
{
		
		char pass_flag=0;
 e70:	00 e0       	ldi	r16, 0x00	; 0
		LCD_Home();
		_delay_ms(100);
		LCD_send_string_4bit("User Pass:");
		LCD_Next_Line();
				
		while(pass_flag!=4)
 e72:	92 c0       	rjmp	.+292    	; 0xf98 <User_login+0x170>
		{
		if(trials==3)
 e74:	93 e0       	ldi	r25, 0x03	; 3
 e76:	d9 12       	cpse	r13, r25
 e78:	38 c0       	rjmp	.+112    	; 0xeea <User_login+0xc2>
		{
			LCD_Home();
 e7a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
			LCD_Next_Line();
 e7e:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Next_Line>
			LCD_send_string_4bit("Please reset");
 e82:	89 e8       	ldi	r24, 0x89	; 137
 e84:	91 e0       	ldi	r25, 0x01	; 1
 e86:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
			while(1)
			{
				Buzzer_on();
 e8a:	0e 94 41 00 	call	0x82	; 0x82 <Buzzer_on>
 e8e:	2f ed       	ldi	r18, 0xDF	; 223
 e90:	83 e9       	ldi	r24, 0x93	; 147
 e92:	94 e0       	ldi	r25, 0x04	; 4
 e94:	21 50       	subi	r18, 0x01	; 1
 e96:	80 40       	sbci	r24, 0x00	; 0
 e98:	90 40       	sbci	r25, 0x00	; 0
 e9a:	e1 f7       	brne	.-8      	; 0xe94 <User_login+0x6c>
 e9c:	00 c0       	rjmp	.+0      	; 0xe9e <User_login+0x76>
 e9e:	00 00       	nop
				_delay_ms(1500);
				Buzzer_off();
 ea0:	0e 94 48 00 	call	0x90	; 0x90 <Buzzer_off>
 ea4:	2f e3       	ldi	r18, 0x3F	; 63
 ea6:	8d e0       	ldi	r24, 0x0D	; 13
 ea8:	93 e0       	ldi	r25, 0x03	; 3
 eaa:	21 50       	subi	r18, 0x01	; 1
 eac:	80 40       	sbci	r24, 0x00	; 0
 eae:	90 40       	sbci	r25, 0x00	; 0
 eb0:	e1 f7       	brne	.-8      	; 0xeaa <User_login+0x82>
 eb2:	00 c0       	rjmp	.+0      	; 0xeb4 <User_login+0x8c>
 eb4:	00 00       	nop
 eb6:	e9 cf       	rjmp	.-46     	; 0xe8a <User_login+0x62>
		for(int i=0;i<4;i++)
		{
		k=0xFF;	
		while(k==0xFF)
		{
			k=get_key_value();
 eb8:	0e 94 ed 00 	call	0x1da	; 0x1da <get_key_value>
 ebc:	18 2f       	mov	r17, r24
			if(k!=0xff)
 ebe:	8f 3f       	cpi	r24, 0xFF	; 255
 ec0:	21 f0       	breq	.+8      	; 0xeca <User_login+0xa2>
			LCD_send_data_4bit(k);
 ec2:	0e 94 6d 01 	call	0x2da	; 0x2da <LCD_send_data_4bit>
 ec6:	01 c0       	rjmp	.+2      	; 0xeca <User_login+0xa2>
 ec8:	1f ef       	ldi	r17, 0xFF	; 255
		}	
		pass_flag=0;
		for(int i=0;i<4;i++)
		{
		k=0xFF;	
		while(k==0xFF)
 eca:	1f 3f       	cpi	r17, 0xFF	; 255
 ecc:	a9 f3       	breq	.-22     	; 0xeb8 <User_login+0x90>
			k=get_key_value();
			if(k!=0xff)
			LCD_send_data_4bit(k);
		}
		pass[i]=k;
		if(pass[i]==saved_pass[i])
 ece:	e1 e0       	ldi	r30, 0x01	; 1
 ed0:	f0 e0       	ldi	r31, 0x00	; 0
 ed2:	ec 0f       	add	r30, r28
 ed4:	fd 1f       	adc	r31, r29
 ed6:	ee 0d       	add	r30, r14
 ed8:	ff 1d       	adc	r31, r15
 eda:	80 81       	ld	r24, Z
 edc:	18 13       	cpse	r17, r24
 ede:	01 c0       	rjmp	.+2      	; 0xee2 <User_login+0xba>
		pass_flag++;
 ee0:	0f 5f       	subi	r16, 0xFF	; 255
				Buzzer_off();
				_delay_ms(1000);
			}
		}	
		pass_flag=0;
		for(int i=0;i<4;i++)
 ee2:	2f ef       	ldi	r18, 0xFF	; 255
 ee4:	e2 1a       	sub	r14, r18
 ee6:	f2 0a       	sbc	r15, r18
 ee8:	03 c0       	rjmp	.+6      	; 0xef0 <User_login+0xc8>
 eea:	e1 2c       	mov	r14, r1
 eec:	f1 2c       	mov	r15, r1
 eee:	00 e0       	ldi	r16, 0x00	; 0
 ef0:	84 e0       	ldi	r24, 0x04	; 4
 ef2:	e8 16       	cp	r14, r24
 ef4:	f1 04       	cpc	r15, r1
 ef6:	44 f3       	brlt	.-48     	; 0xec8 <User_login+0xa0>
		pass[i]=k;
		if(pass[i]==saved_pass[i])
		pass_flag++;
		}
		
		if(pass_flag==4)
 ef8:	04 30       	cpi	r16, 0x04	; 4
 efa:	f9 f4       	brne	.+62     	; 0xf3a <User_login+0x112>
 efc:	9f e3       	ldi	r25, 0x3F	; 63
 efe:	2d e0       	ldi	r18, 0x0D	; 13
 f00:	83 e0       	ldi	r24, 0x03	; 3
 f02:	91 50       	subi	r25, 0x01	; 1
 f04:	20 40       	sbci	r18, 0x00	; 0
 f06:	80 40       	sbci	r24, 0x00	; 0
 f08:	e1 f7       	brne	.-8      	; 0xf02 <User_login+0xda>
 f0a:	00 c0       	rjmp	.+0      	; 0xf0c <User_login+0xe4>
 f0c:	00 00       	nop
		{
			_delay_ms(1000);
			LCD_Shift_Left();LCD_Shift_Left();
 f0e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_Shift_Left>
 f12:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_Shift_Left>
			LCD_Shift_Left();LCD_Shift_Left();
 f16:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_Shift_Left>
 f1a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_Shift_Left>
			LCD_send_string_4bit("Right Password");
 f1e:	86 e9       	ldi	r24, 0x96	; 150
 f20:	91 e0       	ldi	r25, 0x01	; 1
 f22:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
 f26:	9f e7       	ldi	r25, 0x7F	; 127
 f28:	24 e8       	ldi	r18, 0x84	; 132
 f2a:	8e e1       	ldi	r24, 0x1E	; 30
 f2c:	91 50       	subi	r25, 0x01	; 1
 f2e:	20 40       	sbci	r18, 0x00	; 0
 f30:	80 40       	sbci	r24, 0x00	; 0
 f32:	e1 f7       	brne	.-8      	; 0xf2c <User_login+0x104>
 f34:	00 c0       	rjmp	.+0      	; 0xf36 <User_login+0x10e>
 f36:	00 00       	nop
 f38:	2f c0       	rjmp	.+94     	; 0xf98 <User_login+0x170>
 f3a:	9f e3       	ldi	r25, 0x3F	; 63
 f3c:	2d e0       	ldi	r18, 0x0D	; 13
 f3e:	83 e0       	ldi	r24, 0x03	; 3
 f40:	91 50       	subi	r25, 0x01	; 1
 f42:	20 40       	sbci	r18, 0x00	; 0
 f44:	80 40       	sbci	r24, 0x00	; 0
 f46:	e1 f7       	brne	.-8      	; 0xf40 <User_login+0x118>
 f48:	00 c0       	rjmp	.+0      	; 0xf4a <User_login+0x122>
 f4a:	00 00       	nop
		    _delay_ms(10000);
		}
		else
		{
			_delay_ms(1000);
			LCD_Shift_Left();LCD_Shift_Left();
 f4c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_Shift_Left>
 f50:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_Shift_Left>
			LCD_Shift_Left();LCD_Shift_Left();			
 f54:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_Shift_Left>
 f58:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_Shift_Left>
			LCD_send_string_4bit("Wrong Password");
 f5c:	85 ea       	ldi	r24, 0xA5	; 165
 f5e:	91 e0       	ldi	r25, 0x01	; 1
 f60:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
 f64:	9f e7       	ldi	r25, 0x7F	; 127
 f66:	24 e8       	ldi	r18, 0x84	; 132
 f68:	8e e1       	ldi	r24, 0x1E	; 30
 f6a:	91 50       	subi	r25, 0x01	; 1
 f6c:	20 40       	sbci	r18, 0x00	; 0
 f6e:	80 40       	sbci	r24, 0x00	; 0
 f70:	e1 f7       	brne	.-8      	; 0xf6a <User_login+0x142>
 f72:	00 c0       	rjmp	.+0      	; 0xf74 <User_login+0x14c>
 f74:	00 00       	nop
			_delay_ms(10000);
			LCD_Clear();
 f76:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Clear>
			LCD_Home();
 f7a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_Home>
 f7e:	87 ea       	ldi	r24, 0xA7	; 167
 f80:	91 e6       	ldi	r25, 0x61	; 97
 f82:	01 97       	sbiw	r24, 0x01	; 1
 f84:	f1 f7       	brne	.-4      	; 0xf82 <User_login+0x15a>
 f86:	00 c0       	rjmp	.+0      	; 0xf88 <User_login+0x160>
 f88:	00 00       	nop
			_delay_ms(100);
			LCD_send_string_4bit("User Pass:");
 f8a:	8e e7       	ldi	r24, 0x7E	; 126
 f8c:	91 e0       	ldi	r25, 0x01	; 1
 f8e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_send_string_4bit>
			LCD_Next_Line();
 f92:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Next_Line>
			trials++;
 f96:	d3 94       	inc	r13
		LCD_Home();
		_delay_ms(100);
		LCD_send_string_4bit("User Pass:");
		LCD_Next_Line();
				
		while(pass_flag!=4)
 f98:	04 30       	cpi	r16, 0x04	; 4
 f9a:	09 f0       	breq	.+2      	; 0xf9e <User_login+0x176>
 f9c:	6b cf       	rjmp	.-298    	; 0xe74 <User_login+0x4c>
			LCD_Next_Line();
			trials++;
		}
		}

}//void
 f9e:	0f 90       	pop	r0
 fa0:	0f 90       	pop	r0
 fa2:	0f 90       	pop	r0
 fa4:	0f 90       	pop	r0
 fa6:	df 91       	pop	r29
 fa8:	cf 91       	pop	r28
 faa:	1f 91       	pop	r17
 fac:	0f 91       	pop	r16
 fae:	ff 90       	pop	r15
 fb0:	ef 90       	pop	r14
 fb2:	df 90       	pop	r13
 fb4:	08 95       	ret

00000fb6 <__umulhisi3>:
 fb6:	a2 9f       	mul	r26, r18
 fb8:	b0 01       	movw	r22, r0
 fba:	b3 9f       	mul	r27, r19
 fbc:	c0 01       	movw	r24, r0
 fbe:	a3 9f       	mul	r26, r19
 fc0:	70 0d       	add	r23, r0
 fc2:	81 1d       	adc	r24, r1
 fc4:	11 24       	eor	r1, r1
 fc6:	91 1d       	adc	r25, r1
 fc8:	b2 9f       	mul	r27, r18
 fca:	70 0d       	add	r23, r0
 fcc:	81 1d       	adc	r24, r1
 fce:	11 24       	eor	r1, r1
 fd0:	91 1d       	adc	r25, r1
 fd2:	08 95       	ret

00000fd4 <_exit>:
 fd4:	f8 94       	cli

00000fd6 <__stop_program>:
 fd6:	ff cf       	rjmp	.-2      	; 0xfd6 <__stop_program>
