
CTC_Timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056d  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f7  00000000  00000000  000006e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f3  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d5  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


#include "avr/io.h"
int main ( )
{
	DDRB |= (1<<3);		/*PB3 (OC0) as output */
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	88 60       	ori	r24, 0x08	; 8
  70:	87 bb       	out	0x17, r24	; 23
	while (1)
	{
		OCR0 = 69;
  72:	85 e4       	ldi	r24, 0x45	; 69
  74:	8c bf       	out	0x3c, r24	; 60
		// CS00 COM00 COM01 WGM01
		TCCR0 = 0x39;		/* CTC, set on match, no prescaler */
  76:	89 e3       	ldi	r24, 0x39	; 57
  78:	83 bf       	out	0x33, r24	; 51
		while ((TIFR&(1<<OCF0)) == 0);  /* monitor OCF0 flag */
  7a:	08 b6       	in	r0, 0x38	; 56
  7c:	01 fe       	sbrs	r0, 1
  7e:	fd cf       	rjmp	.-6      	; 0x7a <main+0xe>
		TIFR = (1<<OCF0);	/* Clear OCF0 by writing 1 */
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	88 bf       	out	0x38, r24	; 56
		
		OCR0 = 199;
  84:	87 ec       	ldi	r24, 0xC7	; 199
  86:	8c bf       	out	0x3c, r24	; 60
		// CS00 COM01 WGM01
		TCCR0 = 0x29;	  // CTC, clear on match, no prescaler 
  88:	89 e2       	ldi	r24, 0x29	; 41
  8a:	83 bf       	out	0x33, r24	; 51
		while ((TIFR&(1<<OCF0)) == 0);
  8c:	08 b6       	in	r0, 0x38	; 56
  8e:	01 fe       	sbrs	r0, 1
  90:	fd cf       	rjmp	.-6      	; 0x8c <main+0x20>
		TIFR = (1<<OCF0);  // Clear OCF0 by writing 1 
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	88 bf       	out	0x38, r24	; 56
	}
  96:	ed cf       	rjmp	.-38     	; 0x72 <main+0x6>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
