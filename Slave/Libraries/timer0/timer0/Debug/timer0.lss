
timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000012e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005a9  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000052b  00000000  00000000  0000076d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000207  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00000ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002e0  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 43 00 	call	0x86	; 0x86 <main>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <timer_init>:
#define LED PD6
char counter =0;

void timer_init()
{
	TCNT0=0; // defines fraction <--> counting 
  7c:	12 be       	out	0x32, r1	; 50
	TCCR0 |=  (1<<CS02); //256  prescaler
  7e:	83 b7       	in	r24, 0x33	; 51
  80:	84 60       	ori	r24, 0x04	; 4
  82:	83 bf       	out	0x33, r24	; 51
  84:	08 95       	ret

00000086 <main>:



int main()
{
	timer_init();//calling
  86:	0e 94 3e 00 	call	0x7c	; 0x7c <timer_init>
	DDRD|=1<<LED;   //output pd6      
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	81 bb       	out	0x11, r24	; 17
	
	while(1)
	{
		while ((TIFR&(1<<TOV0))==0)
  90:	08 b6       	in	r0, 0x38	; 56
  92:	00 fe       	sbrs	r0, 0
  94:	fd cf       	rjmp	.-6      	; 0x90 <main+0xa>
		{		} // to check tov0 bit flag TIFR 1 
				  // 0 within loop over to end
			
			
			
		counter ++;// major glass
  96:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (counter==15)  // 1 sec
  a0:	8f 30       	cpi	r24, 0x0F	; 15
  a2:	31 f4       	brne	.+12     	; 0xb0 <main+0x2a>
		{
			PORTD ^= (1 << LED);//toggle
  a4:	92 b3       	in	r25, 0x12	; 18
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	89 27       	eor	r24, r25
  aa:	82 bb       	out	0x12, r24	; 18
			counter =0;
  ac:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		TIFR = 0x01;// clear reuse for thhe next loop
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	88 bf       	out	0x38, r24	; 56
	}
  b4:	ed cf       	rjmp	.-38     	; 0x90 <main+0xa>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
