
Interrupt_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000841  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ef  00000000  00000000  00000b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e3  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  000014e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034c  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000368  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_1>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <int1_init>:
	}
}

void int1_init() 
{
	clearbit(DDRD,3);    // set pin as INPUT
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	87 7f       	andi	r24, 0xF7	; 247
  70:	81 bb       	out	0x11, r24	; 17
	setbit(MCUCR,ISC11); // The rising edge of INT1 generates an interrupt request.
  72:	85 b7       	in	r24, 0x35	; 53
  74:	88 60       	ori	r24, 0x08	; 8
  76:	85 bf       	out	0x35, r24	; 53
	setbit(MCUCR,ISC10); // The rising edge of INT1 generates an interrupt request.
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	85 bf       	out	0x35, r24	; 53
	setbit(GICR,INT1);   // external interrupt  EN  INT1
  7e:	8b b7       	in	r24, 0x3b	; 59
  80:	80 68       	ori	r24, 0x80	; 128
  82:	8b bf       	out	0x3b, r24	; 59
	sei();               // global interrupt EN
  84:	78 94       	sei
  86:	08 95       	ret

00000088 <int0_init>:
}

void int0_init()
{
	clearbit(DDRD,2);    // set pin as INPUT
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	8b 7f       	andi	r24, 0xFB	; 251
  8c:	81 bb       	out	0x11, r24	; 17
	setbit(MCUCR,ISC01); // The rising edge of INT1 generates an interrupt request.
  8e:	85 b7       	in	r24, 0x35	; 53
  90:	82 60       	ori	r24, 0x02	; 2
  92:	85 bf       	out	0x35, r24	; 53
	setbit(MCUCR,ISC00); //The rising edge of INT1 generates an interrupt request.
  94:	85 b7       	in	r24, 0x35	; 53
  96:	81 60       	ori	r24, 0x01	; 1
  98:	85 bf       	out	0x35, r24	; 53
	setbit(GICR,INT0);   // external interrupt  EN INT0
  9a:	8b b7       	in	r24, 0x3b	; 59
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	8b bf       	out	0x3b, r24	; 59
	sei();               // global interrupt EN
  a0:	78 94       	sei
  a2:	08 95       	ret

000000a4 <main>:
void int1_init();   // INT1
void int0_init();   // INT0

int main(void)
{
	setbit(DDRA,5);		// make LED as OUTPUT
  a4:	8a b3       	in	r24, 0x1a	; 26
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	8a bb       	out	0x1a, r24	; 26
	int1_init();        // calling
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <int1_init>
	int0_init();
  ae:	0e 94 44 00 	call	0x88	; 0x88 <int0_init>
	setbit(DDRB,6);     // toggle pin LED
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	87 bb       	out	0x17, r24	; 23
	while (1) 
	{
		toggelbit(PORTB,6); // toggling
  b8:	98 b3       	in	r25, 0x18	; 24
  ba:	80 e4       	ldi	r24, 0x40	; 64
  bc:	89 27       	eor	r24, r25
  be:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f e9       	ldi	r18, 0x9F	; 159
  c2:	86 e8       	ldi	r24, 0x86	; 134
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x22>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x2c>
  d0:	00 00       	nop
  d2:	f2 cf       	rjmp	.-28     	; 0xb8 <main+0x14>

000000d4 <__vector_2>:
	setbit(GICR,INT0);   // external interrupt  EN INT0
	sei();               // global interrupt EN
}

ISR(INT1_vect)  
{	DDRC=0XFF;// output
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	84 bb       	out	0x14, r24	; 20
	int x;
	for(x=0;x<10;x++)
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	21 c0       	rjmp	.+66     	; 0x134 <__vector_2+0x60>
	{
		PORTC=0x08;			//1  0  0  0
  f2:	28 e0       	ldi	r18, 0x08	; 8
  f4:	25 bb       	out	0x15, r18	; 21
  f6:	e7 ea       	ldi	r30, 0xA7	; 167
  f8:	f1 e6       	ldi	r31, 0x61	; 97
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <__vector_2+0x26>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <__vector_2+0x2c>
 100:	00 00       	nop
		_delay_ms(100);
		PORTC=0x04;			//0  1  0  0
 102:	24 e0       	ldi	r18, 0x04	; 4
 104:	25 bb       	out	0x15, r18	; 21
 106:	e7 ea       	ldi	r30, 0xA7	; 167
 108:	f1 e6       	ldi	r31, 0x61	; 97
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <__vector_2+0x36>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <__vector_2+0x3c>
 110:	00 00       	nop
		_delay_ms(100);
		PORTC=0x02;			//0  0  1  0
 112:	22 e0       	ldi	r18, 0x02	; 2
 114:	25 bb       	out	0x15, r18	; 21
 116:	e7 ea       	ldi	r30, 0xA7	; 167
 118:	f1 e6       	ldi	r31, 0x61	; 97
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <__vector_2+0x46>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <__vector_2+0x4c>
 120:	00 00       	nop
		_delay_ms(100);
		PORTC=0x01;			//0  0  0  1
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	25 bb       	out	0x15, r18	; 21
 126:	e7 ea       	ldi	r30, 0xA7	; 167
 128:	f1 e6       	ldi	r31, 0x61	; 97
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <__vector_2+0x56>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <__vector_2+0x5c>
 130:	00 00       	nop
}

ISR(INT1_vect)  
{	DDRC=0XFF;// output
	int x;
	for(x=0;x<10;x++)
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	8a 30       	cpi	r24, 0x0A	; 10
 136:	91 05       	cpc	r25, r1
 138:	e4 f2       	brlt	.-72     	; 0xf2 <__vector_2+0x1e>
		_delay_ms(100);
		PORTC=0x01;			//0  0  0  1
		_delay_ms(100);

	}
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <__vector_1>:


ISR(INT0_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
	DDRC=0XFF;
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	84 bb       	out	0x14, r24	; 20
	int x;
	for(x=0;x<10;x++)
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	21 c0       	rjmp	.+66     	; 0x1ae <__vector_1+0x60>
	{
		PORTC=0x01;			
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	25 bb       	out	0x15, r18	; 21
 170:	e7 ea       	ldi	r30, 0xA7	; 167
 172:	f1 e6       	ldi	r31, 0x61	; 97
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <__vector_1+0x26>
 178:	00 c0       	rjmp	.+0      	; 0x17a <__vector_1+0x2c>
 17a:	00 00       	nop
		_delay_ms(100);
		PORTC=0x02;			
 17c:	22 e0       	ldi	r18, 0x02	; 2
 17e:	25 bb       	out	0x15, r18	; 21
 180:	e7 ea       	ldi	r30, 0xA7	; 167
 182:	f1 e6       	ldi	r31, 0x61	; 97
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <__vector_1+0x36>
 188:	00 c0       	rjmp	.+0      	; 0x18a <__vector_1+0x3c>
 18a:	00 00       	nop
		_delay_ms(100);
		PORTC=0x04;			
 18c:	24 e0       	ldi	r18, 0x04	; 4
 18e:	25 bb       	out	0x15, r18	; 21
 190:	e7 ea       	ldi	r30, 0xA7	; 167
 192:	f1 e6       	ldi	r31, 0x61	; 97
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <__vector_1+0x46>
 198:	00 c0       	rjmp	.+0      	; 0x19a <__vector_1+0x4c>
 19a:	00 00       	nop
		_delay_ms(100);
		PORTC=0x08;			
 19c:	28 e0       	ldi	r18, 0x08	; 8
 19e:	25 bb       	out	0x15, r18	; 21
 1a0:	e7 ea       	ldi	r30, 0xA7	; 167
 1a2:	f1 e6       	ldi	r31, 0x61	; 97
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <__vector_1+0x56>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <__vector_1+0x5c>
 1aa:	00 00       	nop

ISR(INT0_vect)
{
	DDRC=0XFF;
	int x;
	for(x=0;x<10;x++)
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	8a 30       	cpi	r24, 0x0A	; 10
 1b0:	91 05       	cpc	r25, r1
 1b2:	e4 f2       	brlt	.-72     	; 0x16c <__vector_1+0x1e>
		_delay_ms(100);
		PORTC=0x08;			
		_delay_ms(100);

	}
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
