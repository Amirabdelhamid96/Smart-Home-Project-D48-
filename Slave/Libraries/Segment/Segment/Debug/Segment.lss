
Segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000639  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a4  00000000  00000000  000007e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027b  00000000  00000000  00000d89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000322  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000df  00000000  00000000  0000135a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001439  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <segment>:
}



void segment (char no){
	if(no == 1)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	19 f4       	brne	.+6      	; 0x76 <segment+0xa>
	PORTC =(1<<PC1)|(1<<PC2);
  70:	86 e0       	ldi	r24, 0x06	; 6
  72:	85 bb       	out	0x15, r24	; 21
  74:	08 95       	ret
	else if(no == 2 )
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	19 f4       	brne	.+6      	; 0x80 <segment+0x14>
	PORTC=(1<<PC0)|(1<<PC1)|(1<<PC6)|(1<<PC4)|(1<<PC3);
  7a:	8b e5       	ldi	r24, 0x5B	; 91
  7c:	85 bb       	out	0x15, r24	; 21
  7e:	08 95       	ret
	else if(no == 3 )
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	11 f4       	brne	.+4      	; 0x88 <segment+0x1c>
	PORTC=(1<<PC0)|(1<<PC1)|(1<<PC6)|(1<<PC2)|(1<<PC3);
  84:	8f e4       	ldi	r24, 0x4F	; 79
  86:	85 bb       	out	0x15, r24	; 21
  88:	08 95       	ret

0000008a <main>:
#include <avr/io.h>
#include<util/delay.h>
void segment (char no);
int main(void)
{
	DDRC = 255; // port c output segment  0b11111111 0xff
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	84 bb       	out	0x14, r24	; 20
    int x=1;
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	04 c0       	rjmp	.+8      	; 0x9c <main+0x12>
	while (1) 
    {  
		segment(x++);// func call 0 
  94:	ce 01       	movw	r24, r28
  96:	02 c0       	rjmp	.+4      	; 0x9c <main+0x12>
		//1 call1 2 call2 3 call3 4-->1
		_delay_ms(2000);
		if(x == 4)
		x=1;
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
{
	DDRC = 255; // port c output segment  0b11111111 0xff
    int x=1;
	while (1) 
    {  
		segment(x++);// func call 0 
  9c:	ec 01       	movw	r28, r24
  9e:	21 96       	adiw	r28, 0x01	; 1
  a0:	0e 94 36 00 	call	0x6c	; 0x6c <segment>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f e7       	ldi	r18, 0x7F	; 127
  a6:	8a e1       	ldi	r24, 0x1A	; 26
  a8:	96 e0       	ldi	r25, 0x06	; 6
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x20>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x2a>
  b4:	00 00       	nop
		//1 call1 2 call2 3 call3 4-->1
		_delay_ms(2000);
		if(x == 4)
  b6:	c4 30       	cpi	r28, 0x04	; 4
  b8:	d1 05       	cpc	r29, r1
  ba:	61 f7       	brne	.-40     	; 0x94 <main+0xa>
  bc:	ed cf       	rjmp	.-38     	; 0x98 <main+0xe>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
