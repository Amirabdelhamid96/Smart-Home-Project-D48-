
PWM_DC_Motor1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000690  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c7  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000282  00000000  00000000  00000e67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032c  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008a  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <motor>:

void motor(unsigned char d,unsigned char r)
{
	
	
	DDRA  |= (1<<PA0 ) | (1<<PA1);
  6c:	9a b3       	in	r25, 0x1a	; 26
  6e:	93 60       	ori	r25, 0x03	; 3
  70:	9a bb       	out	0x1a, r25	; 26
	if (r>=1)
  72:	66 23       	and	r22, r22
  74:	19 f0       	breq	.+6      	; 0x7c <motor+0x10>
		PORTA = 1<<PA0;// PA0 IN1 high
  76:	91 e0       	ldi	r25, 0x01	; 1
  78:	9b bb       	out	0x1b, r25	; 27
  7a:	02 c0       	rjmp	.+4      	; 0x80 <motor+0x14>
	else
		PORTA = 1<<PA1;// PA1 IN2 high
  7c:	92 e0       	ldi	r25, 0x02	; 2
  7e:	9b bb       	out	0x1b, r25	; 27
	
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
  80:	99 e6       	ldi	r25, 0x69	; 105
  82:	93 bf       	out	0x33, r25	; 51
	DDRB|=(1<<PB3);// PIN OC0 output Enable1 pwm
  84:	97 b3       	in	r25, 0x17	; 23
  86:	98 60       	ori	r25, 0x08	; 8
  88:	97 bb       	out	0x17, r25	; 23
	OCR0=((d*255)/100);
  8a:	2f ef       	ldi	r18, 0xFF	; 255
  8c:	82 9f       	mul	r24, r18
  8e:	c0 01       	movw	r24, r0
  90:	11 24       	eor	r1, r1
  92:	64 e6       	ldi	r22, 0x64	; 100
  94:	70 e0       	ldi	r23, 0x00	; 0
  96:	0e 94 6a 00 	call	0xd4	; 0xd4 <__divmodhi4>
  9a:	6c bf       	out	0x3c, r22	; 60
  9c:	08 95       	ret

0000009e <main>:

int main ()
{
	while (1)
	{
			motor(100,1);
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	84 e6       	ldi	r24, 0x64	; 100
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <motor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f e3       	ldi	r18, 0x3F	; 63
  a8:	82 e4       	ldi	r24, 0x42	; 66
  aa:	9f e0       	ldi	r25, 0x0F	; 15
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0xe>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x18>
  b6:	00 00       	nop
			_delay_ms(5000);
			motor(50,0);
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	82 e3       	ldi	r24, 0x32	; 50
  bc:	0e 94 36 00 	call	0x6c	; 0x6c <motor>
  c0:	2f e3       	ldi	r18, 0x3F	; 63
  c2:	82 e4       	ldi	r24, 0x42	; 66
  c4:	9f e0       	ldi	r25, 0x0F	; 15
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x28>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x32>
  d0:	00 00       	nop
  d2:	e5 cf       	rjmp	.-54     	; 0x9e <main>

000000d4 <__divmodhi4>:
  d4:	97 fb       	bst	r25, 7
  d6:	07 2e       	mov	r0, r23
  d8:	16 f4       	brtc	.+4      	; 0xde <__divmodhi4+0xa>
  da:	00 94       	com	r0
  dc:	07 d0       	rcall	.+14     	; 0xec <__divmodhi4_neg1>
  de:	77 fd       	sbrc	r23, 7
  e0:	09 d0       	rcall	.+18     	; 0xf4 <__divmodhi4_neg2>
  e2:	0e 94 7e 00 	call	0xfc	; 0xfc <__udivmodhi4>
  e6:	07 fc       	sbrc	r0, 7
  e8:	05 d0       	rcall	.+10     	; 0xf4 <__divmodhi4_neg2>
  ea:	3e f4       	brtc	.+14     	; 0xfa <__divmodhi4_exit>

000000ec <__divmodhi4_neg1>:
  ec:	90 95       	com	r25
  ee:	81 95       	neg	r24
  f0:	9f 4f       	sbci	r25, 0xFF	; 255
  f2:	08 95       	ret

000000f4 <__divmodhi4_neg2>:
  f4:	70 95       	com	r23
  f6:	61 95       	neg	r22
  f8:	7f 4f       	sbci	r23, 0xFF	; 255

000000fa <__divmodhi4_exit>:
  fa:	08 95       	ret

000000fc <__udivmodhi4>:
  fc:	aa 1b       	sub	r26, r26
  fe:	bb 1b       	sub	r27, r27
 100:	51 e1       	ldi	r21, 0x11	; 17
 102:	07 c0       	rjmp	.+14     	; 0x112 <__udivmodhi4_ep>

00000104 <__udivmodhi4_loop>:
 104:	aa 1f       	adc	r26, r26
 106:	bb 1f       	adc	r27, r27
 108:	a6 17       	cp	r26, r22
 10a:	b7 07       	cpc	r27, r23
 10c:	10 f0       	brcs	.+4      	; 0x112 <__udivmodhi4_ep>
 10e:	a6 1b       	sub	r26, r22
 110:	b7 0b       	sbc	r27, r23

00000112 <__udivmodhi4_ep>:
 112:	88 1f       	adc	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	5a 95       	dec	r21
 118:	a9 f7       	brne	.-22     	; 0x104 <__udivmodhi4_loop>
 11a:	80 95       	com	r24
 11c:	90 95       	com	r25
 11e:	bc 01       	movw	r22, r24
 120:	cd 01       	movw	r24, r26
 122:	08 95       	ret

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
