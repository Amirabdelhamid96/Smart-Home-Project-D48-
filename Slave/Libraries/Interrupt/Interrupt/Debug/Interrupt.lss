
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a8  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ef  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030c  00000000  00000000  00000edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000348  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000118  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_1>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <int1_init>:
    }
}

void int1_init() // int1 intialization 
{
	clearbit(DDRD,3);    // set pin as INPUT
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	87 7f       	andi	r24, 0xF7	; 247
  70:	81 bb       	out	0x11, r24	; 17
	clearbit(MCUCR,ISC11); // The rising edge of INT1 generates an interrupt request.
  72:	85 b7       	in	r24, 0x35	; 53
  74:	87 7f       	andi	r24, 0xF7	; 247
  76:	85 bf       	out	0x35, r24	; 53
	setbit(MCUCR,ISC10); // The rising edge of INT1 generates an interrupt request.	
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	85 bf       	out	0x35, r24	; 53
	setbit(GICR,INT1);   // external interrupt  EN  INT1
  7e:	8b b7       	in	r24, 0x3b	; 59
  80:	80 68       	ori	r24, 0x80	; 128
  82:	8b bf       	out	0x3b, r24	; 59
	sei();               // global interrupt EN
  84:	78 94       	sei
  86:	08 95       	ret

00000088 <int0_init>:



void int0_init()
{
	clearbit(DDRD,2);    // set pin as INPUT
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	8b 7f       	andi	r24, 0xFB	; 251
  8c:	81 bb       	out	0x11, r24	; 17
	setbit(MCUCR,ISC01); // The rising edge of INT1 generates an interrupt request.
  8e:	85 b7       	in	r24, 0x35	; 53
  90:	82 60       	ori	r24, 0x02	; 2
  92:	85 bf       	out	0x35, r24	; 53
	setbit(MCUCR,ISC00); //The rising edge of INT1 generates an interrupt request.
  94:	85 b7       	in	r24, 0x35	; 53
  96:	81 60       	ori	r24, 0x01	; 1
  98:	85 bf       	out	0x35, r24	; 53
	setbit(GICR,INT0);   // external interrupt  EN INT0    
  9a:	8b b7       	in	r24, 0x3b	; 59
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	8b bf       	out	0x3b, r24	; 59
	sei();               // global interrupt EN
  a0:	78 94       	sei
  a2:	08 95       	ret

000000a4 <main>:
void int1_init();   // INT1
void int0_init();   // INT0

int main(void)
{
	setbit(DDRA,5);		// make LED as OUTPUT
  a4:	8a b3       	in	r24, 0x1a	; 26
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	8a bb       	out	0x1a, r24	; 26
	int1_init();        // calling
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <int1_init>
	int0_init();
  ae:	0e 94 44 00 	call	0x88	; 0x88 <int0_init>
	
	setbit(DDRB,6);     // toggle pin LED
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	87 bb       	out	0x17, r24	; 23
    
	while (1) // super loop main_routine 
    {
		toggelbit(PORTB,6); // toggling 
  b8:	98 b3       	in	r25, 0x18	; 24
  ba:	80 e4       	ldi	r24, 0x40	; 64
  bc:	89 27       	eor	r24, r25
  be:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f e9       	ldi	r18, 0x9F	; 159
  c2:	86 e8       	ldi	r24, 0x86	; 134
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x22>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x2c>
  d0:	00 00       	nop
  d2:	f2 cf       	rjmp	.-28     	; 0xb8 <main+0x14>

000000d4 <__vector_2>:



// int1 --> set bit 5
ISR(INT1_vect)  // interrupt service routine ISR handler --> vetor name ==>table--> address to the function --> process subroutine
{	// the code needed
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
	int x;
	for(x=0;x<7;x++)
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	0f c0       	rjmp	.+30     	; 0x10c <__vector_2+0x38>
	{	
		toggelbit(PORTA,5);
  ee:	9b b3       	in	r25, 0x1b	; 27
  f0:	80 e2       	ldi	r24, 0x20	; 32
  f2:	89 27       	eor	r24, r25
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	4f e9       	ldi	r20, 0x9F	; 159
  f8:	86 e8       	ldi	r24, 0x86	; 134
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	41 50       	subi	r20, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <__vector_2+0x28>
 104:	00 c0       	rjmp	.+0      	; 0x106 <__vector_2+0x32>
 106:	00 00       	nop

// int1 --> set bit 5
ISR(INT1_vect)  // interrupt service routine ISR handler --> vetor name ==>table--> address to the function --> process subroutine
{	// the code needed
	int x;
	for(x=0;x<7;x++)
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	27 30       	cpi	r18, 0x07	; 7
 10e:	31 05       	cpc	r19, r1
 110:	74 f3       	brlt	.-36     	; 0xee <__vector_2+0x1a>
	{	
		toggelbit(PORTA,5);
		_delay_ms(500);
	}
}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	4f 91       	pop	r20
 118:	3f 91       	pop	r19
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <__vector_1>:

// int0 --> clear bit 5
ISR(INT0_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	8f 93       	push	r24
	clearbit(PORTA,5);
 132:	8b b3       	in	r24, 0x1b	; 27
 134:	8f 7d       	andi	r24, 0xDF	; 223
 136:	8b bb       	out	0x1b, r24	; 27
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
