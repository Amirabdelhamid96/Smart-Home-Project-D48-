
stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000635  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a2  00000000  00000000  000007d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025b  00000000  00000000  00000d77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031f  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008c  00000000  00000000  00001327  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000013b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3f 00 	call	0x7e	; 0x7e <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <step>:



void step(char x)
{
	PORTC=1<<x;			//1  0  0  0  //1<<PC3
  6c:	21 e0       	ldi	r18, 0x01	; 1
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	02 c0       	rjmp	.+4      	; 0x76 <step+0xa>
  72:	22 0f       	add	r18, r18
  74:	33 1f       	adc	r19, r19
  76:	8a 95       	dec	r24
  78:	e2 f7       	brpl	.-8      	; 0x72 <step+0x6>
  7a:	25 bb       	out	0x15, r18	; 21
  7c:	08 95       	ret

0000007e <main>:
#include<avr/io.h>
#include<util/delay.h>
void step(char x);
int main()
{
	DDRC=0XFF;              // 255 0b11111111
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	84 bb       	out	0x14, r24	; 20
	int x =0;
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	04 c0       	rjmp	.+8      	; 0x90 <main+0x12>
	while(1)
	{						
			step(x++);
  88:	ce 01       	movw	r24, r28
  8a:	02 c0       	rjmp	.+4      	; 0x90 <main+0x12>
			_delay_ms(1000);
			if(x==4)x=0;	
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	90 e0       	ldi	r25, 0x00	; 0
{
	DDRC=0XFF;              // 255 0b11111111
	int x =0;
	while(1)
	{						
			step(x++);
  90:	ec 01       	movw	r28, r24
  92:	21 96       	adiw	r28, 0x01	; 1
  94:	0e 94 36 00 	call	0x6c	; 0x6c <step>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f e3       	ldi	r18, 0x3F	; 63
  9a:	8d e0       	ldi	r24, 0x0D	; 13
  9c:	93 e0       	ldi	r25, 0x03	; 3
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x20>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x2a>
  a8:	00 00       	nop
			_delay_ms(1000);
			if(x==4)x=0;	
  aa:	c4 30       	cpi	r28, 0x04	; 4
  ac:	d1 05       	cpc	r29, r1
  ae:	61 f7       	brne	.-40     	; 0x88 <main+0xa>
  b0:	ed cf       	rjmp	.-38     	; 0x8c <main+0xe>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
