
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000234  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000234  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc9  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071d  00000000  00000000  00000f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000562  00000000  00000000  00001682  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00001be4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fc  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000608  00000000  00000000  00002108  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  7a:	0c 94 18 01 	jmp	0x230	; 0x230 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_send_data_4bit>:
	PORTA = (1<<PA1) | (1<<PA2);             //  IN2 IN3 high
	
	//(COM01 non inverting) cs00 prescaler 1    (wgm01 wgm00 fastpwm)
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
	DDRB|=(1<<PB3);// PIN OC0 output Enable1 pwm
	OCR0=((d*255)/100);// duty  d ==> 10*255/100
  82:	95 b3       	in	r25, 0x15	; 21
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	95 bb       	out	0x15, r25	; 21
  8e:	95 b3       	in	r25, 0x15	; 21
  90:	92 60       	ori	r25, 0x02	; 2
  92:	95 bb       	out	0x15, r25	; 21
  94:	95 b3       	in	r25, 0x15	; 21
  96:	9b 7f       	andi	r25, 0xFB	; 251
  98:	95 bb       	out	0x15, r25	; 21
  9a:	95 b3       	in	r25, 0x15	; 21
  9c:	98 60       	ori	r25, 0x08	; 8
  9e:	95 bb       	out	0x15, r25	; 21
  a0:	35 e0       	ldi	r19, 0x05	; 5
  a2:	3a 95       	dec	r19
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_send_data_4bit+0x20>
  a6:	00 00       	nop
  a8:	95 b3       	in	r25, 0x15	; 21
  aa:	97 7f       	andi	r25, 0xF7	; 247
  ac:	95 bb       	out	0x15, r25	; 21
  ae:	ef e1       	ldi	r30, 0x1F	; 31
  b0:	f3 e0       	ldi	r31, 0x03	; 3
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <LCD_send_data_4bit+0x30>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <LCD_send_data_4bit+0x36>
  b8:	00 00       	nop
  ba:	25 b3       	in	r18, 0x15	; 21
  bc:	f0 e1       	ldi	r31, 0x10	; 16
  be:	8f 9f       	mul	r24, r31
  c0:	c0 01       	movw	r24, r0
  c2:	11 24       	eor	r1, r1
  c4:	92 2f       	mov	r25, r18
  c6:	9f 70       	andi	r25, 0x0F	; 15
  c8:	89 2b       	or	r24, r25
  ca:	85 bb       	out	0x15, r24	; 21
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	85 bb       	out	0x15, r24	; 21
  d2:	35 e0       	ldi	r19, 0x05	; 5
  d4:	3a 95       	dec	r19
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_send_data_4bit+0x52>
  d8:	00 00       	nop
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	87 7f       	andi	r24, 0xF7	; 247
  de:	85 bb       	out	0x15, r24	; 21
  e0:	8f e9       	ldi	r24, 0x9F	; 159
  e2:	9f e0       	ldi	r25, 0x0F	; 15
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_send_data_4bit+0x62>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_send_data_4bit+0x68>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <LCD_send_command_4bit>:
  ee:	95 b3       	in	r25, 0x15	; 21
  f0:	9f 70       	andi	r25, 0x0F	; 15
  f2:	28 2f       	mov	r18, r24
  f4:	20 7f       	andi	r18, 0xF0	; 240
  f6:	92 2b       	or	r25, r18
  f8:	95 bb       	out	0x15, r25	; 21
  fa:	95 b3       	in	r25, 0x15	; 21
  fc:	9d 7f       	andi	r25, 0xFD	; 253
  fe:	95 bb       	out	0x15, r25	; 21
 100:	95 b3       	in	r25, 0x15	; 21
 102:	9b 7f       	andi	r25, 0xFB	; 251
 104:	95 bb       	out	0x15, r25	; 21
 106:	95 b3       	in	r25, 0x15	; 21
 108:	98 60       	ori	r25, 0x08	; 8
 10a:	95 bb       	out	0x15, r25	; 21
 10c:	35 e0       	ldi	r19, 0x05	; 5
 10e:	3a 95       	dec	r19
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_send_command_4bit+0x20>
 112:	00 00       	nop
 114:	95 b3       	in	r25, 0x15	; 21
 116:	97 7f       	andi	r25, 0xF7	; 247
 118:	95 bb       	out	0x15, r25	; 21
 11a:	ef e1       	ldi	r30, 0x1F	; 31
 11c:	f3 e0       	ldi	r31, 0x03	; 3
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_send_command_4bit+0x30>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_send_command_4bit+0x36>
 124:	00 00       	nop
 126:	25 b3       	in	r18, 0x15	; 21
 128:	f0 e1       	ldi	r31, 0x10	; 16
 12a:	8f 9f       	mul	r24, r31
 12c:	c0 01       	movw	r24, r0
 12e:	11 24       	eor	r1, r1
 130:	92 2f       	mov	r25, r18
 132:	9f 70       	andi	r25, 0x0F	; 15
 134:	89 2b       	or	r24, r25
 136:	85 bb       	out	0x15, r24	; 21
 138:	85 b3       	in	r24, 0x15	; 21
 13a:	88 60       	ori	r24, 0x08	; 8
 13c:	85 bb       	out	0x15, r24	; 21
 13e:	35 e0       	ldi	r19, 0x05	; 5
 140:	3a 95       	dec	r19
 142:	f1 f7       	brne	.-4      	; 0x140 <LCD_send_command_4bit+0x52>
 144:	00 00       	nop
 146:	85 b3       	in	r24, 0x15	; 21
 148:	87 7f       	andi	r24, 0xF7	; 247
 14a:	85 bb       	out	0x15, r24	; 21
 14c:	8f e9       	ldi	r24, 0x9F	; 159
 14e:	9f e0       	ldi	r25, 0x0F	; 15
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_send_command_4bit+0x62>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_send_command_4bit+0x68>
 156:	00 00       	nop
 158:	08 95       	ret

0000015a <LCD_INIT_4bit>:
 15a:	84 b3       	in	r24, 0x14	; 20
 15c:	80 6f       	ori	r24, 0xF0	; 240
 15e:	84 bb       	out	0x14, r24	; 20
 160:	84 b3       	in	r24, 0x14	; 20
 162:	88 60       	ori	r24, 0x08	; 8
 164:	84 bb       	out	0x14, r24	; 20
 166:	84 b3       	in	r24, 0x14	; 20
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	84 bb       	out	0x14, r24	; 20
 16c:	84 b3       	in	r24, 0x14	; 20
 16e:	84 60       	ori	r24, 0x04	; 4
 170:	84 bb       	out	0x14, r24	; 20
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	0e 94 77 00 	call	0xee	; 0xee <LCD_send_command_4bit>
 178:	88 e2       	ldi	r24, 0x28	; 40
 17a:	0e 94 77 00 	call	0xee	; 0xee <LCD_send_command_4bit>
 17e:	8c e0       	ldi	r24, 0x0C	; 12
 180:	0e 94 77 00 	call	0xee	; 0xee <LCD_send_command_4bit>
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	0e 94 77 00 	call	0xee	; 0xee <LCD_send_command_4bit>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 77 00 	call	0xee	; 0xee <LCD_send_command_4bit>
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	89 ef       	ldi	r24, 0xF9	; 249
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	21 50       	subi	r18, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <LCD_INIT_4bit+0x3c>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_INIT_4bit+0x46>
 1a0:	00 00       	nop
 1a2:	08 95       	ret

000001a4 <LCD_send_string_4bit>:
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	8c 01       	movw	r16, r24
 1ae:	c0 e0       	ldi	r28, 0x00	; 0
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <LCD_send_string_4bit+0x16>
 1b4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_data_4bit>
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	f8 01       	movw	r30, r16
 1bc:	ec 0f       	add	r30, r28
 1be:	fd 1f       	adc	r31, r29
 1c0:	80 81       	ld	r24, Z
 1c2:	81 11       	cpse	r24, r1
 1c4:	f7 cf       	rjmp	.-18     	; 0x1b4 <LCD_send_string_4bit+0x10>
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <UART_INIT>:
// baude rate : speed of sending data    bit per second bps
// table of speed of baude rate: 3Mbps ~ 4800 bps (9600 bps) 9600 )
// 
void UART_INIT(unsigned int baud)//103  479 10101010101
{// 8 bit data 1 stop bit 
	UCSRB |= (1 << RXEN) | (1 << TXEN);	// Enable UART transmitter and receiver
 1d0:	2a b1       	in	r18, 0x0a	; 10
 1d2:	28 61       	ori	r18, 0x18	; 24
 1d4:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	//8 bit data and 1 stop bit
 1d6:	20 b5       	in	r18, 0x20	; 32
 1d8:	26 68       	ori	r18, 0x86	; 134
 1da:	20 bd       	out	0x20, r18	; 32
	UBRRL = baud;//lower
 1dc:	89 b9       	out	0x09, r24	; 9
	UBRRH = (baud >> 8);//higher 
 1de:	90 bd       	out	0x20, r25	; 32
 1e0:	08 95       	ret

000001e2 <UART_sendchar>:
}


void UART_sendchar(unsigned char data)
{   
		while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
 1e2:	5d 9b       	sbis	0x0b, 5	; 11
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <UART_sendchar>
		UDR = data ;
 1e6:	8c b9       	out	0x0c, r24	; 12
 1e8:	08 95       	ret

000001ea <main>:


int main(void)
{
    
    UART_INIT(103);  // init baud = 9600
 1ea:	87 e6       	ldi	r24, 0x67	; 103
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <UART_INIT>
	
	LCD_INIT_4bit();
 1f2:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_INIT_4bit>
	LCD_send_string_4bit("AHMED ");
 1f6:	80 e6       	ldi	r24, 0x60	; 96
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_send_string_4bit>
	
    while (1)  
    {
		UART_sendchar('A'); _delay_ms(1000);
 1fe:	81 e4       	ldi	r24, 0x41	; 65
 200:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_sendchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	83 ed       	ldi	r24, 0xD3	; 211
 208:	90 e3       	ldi	r25, 0x30	; 48
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0x20>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x2a>
 214:	00 00       	nop
		UART_sendchar('B'); _delay_ms(1000);
 216:	82 e4       	ldi	r24, 0x42	; 66
 218:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_sendchar>
 21c:	2f ef       	ldi	r18, 0xFF	; 255
 21e:	83 ed       	ldi	r24, 0xD3	; 211
 220:	90 e3       	ldi	r25, 0x30	; 48
 222:	21 50       	subi	r18, 0x01	; 1
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <main+0x38>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x42>
 22c:	00 00       	nop
 22e:	e7 cf       	rjmp	.-50     	; 0x1fe <main+0x14>

00000230 <_exit>:
 230:	f8 94       	cli

00000232 <__stop_program>:
 232:	ff cf       	rjmp	.-2      	; 0x232 <__stop_program>
