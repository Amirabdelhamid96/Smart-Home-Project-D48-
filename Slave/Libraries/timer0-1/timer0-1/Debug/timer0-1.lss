
timer0-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000609  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000589  00000000  00000000  000007c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000239  00000000  00000000  00000d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f5  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000024  00000000  00000000  000012c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000012e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 57 00 	call	0xae	; 0xae <main>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <timer_init>:
#define LED PD6
char counter =0;

void timer_init()
{
	TCNT0=0;
  7c:	12 be       	out	0x32, r1	; 50
	TCCR0 |=  (1<<CS02);//256  prescaler
  7e:	83 b7       	in	r24, 0x33	; 51
  80:	84 60       	ori	r24, 0x04	; 4
  82:	83 bf       	out	0x33, r24	; 51
  84:	08 95       	ret

00000086 <delay_sec>:
//  256 no counts 15

void delay_sec(int sec)
{
	int i ;
	int counts = sec *15 ;  //15 --> 1 
  86:	2f e0       	ldi	r18, 0x0F	; 15
  88:	28 9f       	mul	r18, r24
  8a:	a0 01       	movw	r20, r0
  8c:	29 9f       	mul	r18, r25
  8e:	50 0d       	add	r21, r0
  90:	11 24       	eor	r1, r1
	
	for(i=0;i<counts;i++)   //little bug
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	07 c0       	rjmp	.+14     	; 0xa6 <delay_sec+0x20>
	{
		while ((TIFR&(1<<TOV0))==0)
  98:	08 b6       	in	r0, 0x38	; 56
  9a:	00 fe       	sbrs	r0, 0
  9c:	fd cf       	rjmp	.-6      	; 0x98 <delay_sec+0x12>
		{		}// check over or not
		TIFR =  0x01; // clear flag
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	98 bf       	out	0x38, r25	; 56
void delay_sec(int sec)
{
	int i ;
	int counts = sec *15 ;  //15 --> 1 
	
	for(i=0;i<counts;i++)   //little bug
  a2:	2f 5f       	subi	r18, 0xFF	; 255
  a4:	3f 4f       	sbci	r19, 0xFF	; 255
  a6:	24 17       	cp	r18, r20
  a8:	35 07       	cpc	r19, r21
  aa:	b4 f3       	brlt	.-20     	; 0x98 <delay_sec+0x12>
	{
		while ((TIFR&(1<<TOV0))==0)
		{		}// check over or not
		TIFR =  0x01; // clear flag
	}
}
  ac:	08 95       	ret

000000ae <main>:



int main()
{
	timer_init();  //calling
  ae:	0e 94 3e 00 	call	0x7c	; 0x7c <timer_init>
	DDRD=0xff;     //configure PORTD as output
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	81 bb       	out	0x11, r24	; 17
	while(1)
	{
		delay_sec(3); //delay function
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 43 00 	call	0x86	; 0x86 <delay_sec>
		PORTD ^= (1 << LED);
  be:	92 b3       	in	r25, 0x12	; 18
  c0:	80 e4       	ldi	r24, 0x40	; 64
  c2:	89 27       	eor	r24, r25
  c4:	82 bb       	out	0x12, r24	; 18
  c6:	f7 cf       	rjmp	.-18     	; 0xb6 <main+0x8>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
