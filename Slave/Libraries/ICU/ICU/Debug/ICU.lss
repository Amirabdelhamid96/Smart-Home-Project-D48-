
ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000586  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000506  00000000  00000000  0000070a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000205  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d0  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000028  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	// measure input pulses time
	// pulses 
	// event 

	unsigned int t;
	DDRA = 0xFF;	
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;	
  70:	87 bb       	out	0x17, r24	; 23
	PORTD = 0xFF;	  // high 
  72:	82 bb       	out	0x12, r24	; 18
	// timer1  16 bit  8 & 8
	TCCR1A = 0; // init 
  74:	1f bc       	out	0x2f, r1	; 47
	TIFR = (1<<ICF1);		/* clear input capture flag */
  76:	80 e2       	ldi	r24, 0x20	; 32
  78:	88 bf       	out	0x38, r24	; 56
	TCCR1B = 0x41;			/* capture on rising edge */ 
  7a:	81 e4       	ldi	r24, 0x41	; 65
  7c:	8e bd       	out	0x2e, r24	; 46
	// rising edge 
	// level
	//_____    _    _    _
    ///       |__| |__| |__| |_
    // 1- capture check 
	while ((TIFR&(1<<ICF1)) == 0);  /* monitor for capture*/
  7e:	08 b6       	in	r0, 0x38	; 56
  80:	05 fe       	sbrs	r0, 5
  82:	fd cf       	rjmp	.-6      	; 0x7e <main+0x12>
	// check capture   TIFR
	t = ICR1;	// 16 bit value		
  84:	26 b5       	in	r18, 0x26	; 38
  86:	37 b5       	in	r19, 0x27	; 39
	TIFR = (1<<ICF1);		/* clear capture flag */
  88:	80 e2       	ldi	r24, 0x20	; 32
  8a:	88 bf       	out	0x38, r24	; 56
	//pulse time - pulse time 
	while ((TIFR&(1<<ICF1)) == 0);  /* monitor for next rising	edge capture */
  8c:	08 b6       	in	r0, 0x38	; 56
  8e:	05 fe       	sbrs	r0, 5
  90:	fd cf       	rjmp	.-6      	; 0x8c <main+0x20>
    // t == count 
    // count >10000 < 500
	t = ICR1 - t;  			/* period= recent capture-previous capture */
  92:	86 b5       	in	r24, 0x26	; 38
  94:	97 b5       	in	r25, 0x27	; 39
  96:	82 1b       	sub	r24, r18
  98:	93 0b       	sbc	r25, r19
	PORTA = t;  			// put period count on PORTA & PORTB 	
  9a:	8b bb       	out	0x1b, r24	; 27
	PORTB = t>>8;
  9c:	98 bb       	out	0x18, r25	; 24
  9e:	ff cf       	rjmp	.-2      	; 0x9e <main+0x32>

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
