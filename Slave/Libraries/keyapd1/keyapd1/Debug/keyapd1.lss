
keyapd1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b2  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000581  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e3  00000000  00000000  00000e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031a  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000137  00000000  00000000  00001436  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000156d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define toggelbit(reg,bit) reg^=(1<<bit)	// toggle
#define readbit(reg,bit)    ((reg&(1<<bit))>>bit)	// input read

int main(void)
{
	DDRD = 255; // port D direction  output A B C D
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
	DDRC = 0;   // port c			 input 1 2 3 4
  70:	14 ba       	out	0x14, r1	; 20
	DDRA = 255;
  72:	8a bb       	out	0x1a, r24	; 26
	char x = 0;
  74:	80 e0       	ldi	r24, 0x00	; 0
	while (1)
	{	//---------A------------//
		PORTD=(1<<A);
  76:	91 e0       	ldi	r25, 0x01	; 1
  78:	92 bb       	out	0x12, r25	; 18
		if(readbit(PINC,PC0)==1)		x = 7;
  7a:	98 99       	sbic	0x13, 0	; 19
  7c:	87 e0       	ldi	r24, 0x07	; 7
		if(readbit(PINC,PC1)==1)		x = 8;
  7e:	99 99       	sbic	0x13, 1	; 19
  80:	88 e0       	ldi	r24, 0x08	; 8
		if(readbit(PINC,PC2)==1)		x = 9;
  82:	9a 99       	sbic	0x13, 2	; 19
  84:	89 e0       	ldi	r24, 0x09	; 9
		if(readbit(PINC,PC3)==1)		x = '/';
  86:	9b 99       	sbic	0x13, 3	; 19
  88:	8f e2       	ldi	r24, 0x2F	; 47
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	e9 ef       	ldi	r30, 0xF9	; 249
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <main+0x22>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x28>
  94:	00 00       	nop
		_delay_ms(1);
		//---------B------------//
		PORTD=(1<<B);
  96:	92 e0       	ldi	r25, 0x02	; 2
  98:	92 bb       	out	0x12, r25	; 18
		if(readbit(PINC,PC0)==1)		x = 4;
  9a:	98 99       	sbic	0x13, 0	; 19
  9c:	84 e0       	ldi	r24, 0x04	; 4
		if(readbit(PINC,PC1)==1)		x = 5;
  9e:	99 99       	sbic	0x13, 1	; 19
  a0:	85 e0       	ldi	r24, 0x05	; 5
		if(readbit(PINC,PC2)==1)		x = 6;
  a2:	9a 99       	sbic	0x13, 2	; 19
  a4:	86 e0       	ldi	r24, 0x06	; 6
		if(readbit(PINC,PC3)==1)		x = '*';
  a6:	9b 99       	sbic	0x13, 3	; 19
  a8:	8a e2       	ldi	r24, 0x2A	; 42
  aa:	e9 ef       	ldi	r30, 0xF9	; 249
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x42>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x48>
  b4:	00 00       	nop
		_delay_ms(1);
		//---------C------------//
		PORTD=(1<<C);
  b6:	94 e0       	ldi	r25, 0x04	; 4
  b8:	92 bb       	out	0x12, r25	; 18
		if(readbit(PINC,PC0)==1)		x = 1;
  ba:	98 99       	sbic	0x13, 0	; 19
  bc:	81 e0       	ldi	r24, 0x01	; 1
		if(readbit(PINC,PC1)==1)		x = 2;
  be:	99 99       	sbic	0x13, 1	; 19
  c0:	82 e0       	ldi	r24, 0x02	; 2
		if(readbit(PINC,PC2)==1)		x = 3;
  c2:	9a 99       	sbic	0x13, 2	; 19
  c4:	83 e0       	ldi	r24, 0x03	; 3
		if(readbit(PINC,PC3)==1)		x = '-';
  c6:	9b 99       	sbic	0x13, 3	; 19
  c8:	8d e2       	ldi	r24, 0x2D	; 45
  ca:	e9 ef       	ldi	r30, 0xF9	; 249
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x62>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x68>
  d4:	00 00       	nop
		_delay_ms(1);
		//---------D------------//
		PORTD=(1<<D);
  d6:	98 e0       	ldi	r25, 0x08	; 8
  d8:	92 bb       	out	0x12, r25	; 18
		if(readbit(PINC,PC0)==1)		x = 'o';
  da:	98 99       	sbic	0x13, 0	; 19
  dc:	8f e6       	ldi	r24, 0x6F	; 111
		if(readbit(PINC,PC1)==1)		x = 0;
  de:	99 99       	sbic	0x13, 1	; 19
  e0:	80 e0       	ldi	r24, 0x00	; 0
		if(readbit(PINC,PC2)==1)		x = '=';
  e2:	9a 99       	sbic	0x13, 2	; 19
  e4:	8d e3       	ldi	r24, 0x3D	; 61
		if(readbit(PINC,PC3)==1)		x = '+';
  e6:	9b 99       	sbic	0x13, 3	; 19
  e8:	8b e2       	ldi	r24, 0x2B	; 43
  ea:	e9 ef       	ldi	r30, 0xF9	; 249
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x82>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x88>
  f4:	00 00       	nop
		_delay_ms(1);
		
		PORTA=x;
  f6:	8b bb       	out	0x1b, r24	; 27
	}
  f8:	be cf       	rjmp	.-132    	; 0x76 <main+0xa>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
