
PWM_DC_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000634  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057d  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  00000d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000324  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ab  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main ()
{
	unsigned char d;
	DDRA =255;//
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	PORTA |= 1<<PA0;// PA0 IN1 high
  70:	8b b3       	in	r24, 0x1b	; 27
  72:	81 60       	ori	r24, 0x01	; 1
  74:	8b bb       	out	0x1b, r24	; 27
	PORTA |= 1<<PA1;// IN2 HIGH
  76:	8b b3       	in	r24, 0x1b	; 27
  78:	82 60       	ori	r24, 0x02	; 2
  7a:	8b bb       	out	0x1b, r24	; 27
	//PORTA |= (1<<PA0)|(1<<PA1);
	/*     */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
  7c:	89 e6       	ldi	r24, 0x69	; 105
  7e:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);// PIN OC0 output Enable1 pwm
  80:	87 b3       	in	r24, 0x17	; 23
  82:	88 60       	ori	r24, 0x08	; 8
  84:	87 bb       	out	0x17, r24	; 23
	while (1)
	{
		for(d=0; d<255; d++)
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	08 c0       	rjmp	.+16     	; 0x9a <main+0x2e>
		{
			OCR0=d;  //increase
  8a:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	e3 ec       	ldi	r30, 0xC3	; 195
  8e:	f9 e0       	ldi	r31, 0x09	; 9
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x24>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x2a>
  96:	00 00       	nop
	/*     */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
	DDRB|=(1<<PB3);// PIN OC0 output Enable1 pwm
	while (1)
	{
		for(d=0; d<255; d++)
  98:	8f 5f       	subi	r24, 0xFF	; 255
  9a:	8f 3f       	cpi	r24, 0xFF	; 255
  9c:	b1 f7       	brne	.-20     	; 0x8a <main+0x1e>
  9e:	08 c0       	rjmp	.+16     	; 0xb0 <main+0x44>
			_delay_ms(10);
		}
		
		for(d=255; d>1; d--)
		{
			OCR0=d;  //decrease
  a0:	8c bf       	out	0x3c, r24	; 60
  a2:	e3 ec       	ldi	r30, 0xC3	; 195
  a4:	f9 e0       	ldi	r31, 0x09	; 9
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x3a>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
		{
			OCR0=d;  //increase
			_delay_ms(10);
		}
		
		for(d=255; d>1; d--)
  ae:	81 50       	subi	r24, 0x01	; 1
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	b0 f7       	brcc	.-20     	; 0xa0 <main+0x34>
  b4:	e8 cf       	rjmp	.-48     	; 0x86 <main+0x1a>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
