
interrupt_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002d6  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cb7  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b3  00000000  00000000  000010f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000574  00000000  00000000  000017aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  00001d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e5  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000070a  00000000  00000000  000022a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000029ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_1>
   8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_2>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  7a:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_send_data_4bit>:



void LCD_send_data_4bit(unsigned char data)
{
	LCD_DATA_PORT = (LCD_DATA_PORT &0x0f) |(data & 0xf0);//send high nibble
  82:	95 b3       	in	r25, 0x15	; 21
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	95 bb       	out	0x15, r25	; 21
	setbit(LCD_control_PORT,RS);// rs 1
  8e:	95 b3       	in	r25, 0x15	; 21
  90:	92 60       	ori	r25, 0x02	; 2
  92:	95 bb       	out	0x15, r25	; 21
	clearbit(LCD_control_PORT,RW);
  94:	95 b3       	in	r25, 0x15	; 21
  96:	9b 7f       	andi	r25, 0xFB	; 251
  98:	95 bb       	out	0x15, r25	; 21
	setbit(LCD_control_PORT,EN);//en 1
  9a:	95 b3       	in	r25, 0x15	; 21
  9c:	98 60       	ori	r25, 0x08	; 8
  9e:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	00 00       	nop
	_delay_us(1);
	clearbit(LCD_control_PORT,EN);// en 0
  a2:	95 b3       	in	r25, 0x15	; 21
  a4:	97 7f       	andi	r25, 0xF7	; 247
  a6:	95 bb       	out	0x15, r25	; 21
  a8:	32 e4       	ldi	r19, 0x42	; 66
  aa:	3a 95       	dec	r19
  ac:	f1 f7       	brne	.-4      	; 0xaa <LCD_send_data_4bit+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <LCD_send_data_4bit+0x2e>
	_delay_us(200);
	LCD_DATA_PORT = (LCD_DATA_PORT &0x0f) |(data<<4);//send low nibble
  b0:	25 b3       	in	r18, 0x15	; 21
  b2:	30 e1       	ldi	r19, 0x10	; 16
  b4:	83 9f       	mul	r24, r19
  b6:	c0 01       	movw	r24, r0
  b8:	11 24       	eor	r1, r1
  ba:	92 2f       	mov	r25, r18
  bc:	9f 70       	andi	r25, 0x0F	; 15
  be:	89 2b       	or	r24, r25
  c0:	85 bb       	out	0x15, r24	; 21
	setbit(LCD_control_PORT,EN);
  c2:	85 b3       	in	r24, 0x15	; 21
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	85 bb       	out	0x15, r24	; 21
  c8:	00 00       	nop
	_delay_us(1);
	clearbit(LCD_control_PORT,EN);
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	87 7f       	andi	r24, 0xF7	; 247
  ce:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	89 ef       	ldi	r24, 0xF9	; 249
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_send_data_4bit+0x52>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_send_data_4bit+0x58>
  da:	00 00       	nop
  dc:	08 95       	ret

000000de <LCD_send_command_4bit>:
	//	higher .lower
	//  0 1 0 1.0 1 0 1
	//EN=1 --> 0. --> 1 --> 0
	
	
	LCD_DATA_PORT = (LCD_DATA_PORT &0x0f) |(cmd & 0xf0);//send high nibble
  de:	95 b3       	in	r25, 0x15	; 21
  e0:	9f 70       	andi	r25, 0x0F	; 15
  e2:	28 2f       	mov	r18, r24
  e4:	20 7f       	andi	r18, 0xF0	; 240
  e6:	92 2b       	or	r25, r18
  e8:	95 bb       	out	0x15, r25	; 21
	//                          cmd  . old data
	
	
	
	
	clearbit(LCD_control_PORT,RS);
  ea:	95 b3       	in	r25, 0x15	; 21
  ec:	9d 7f       	andi	r25, 0xFD	; 253
  ee:	95 bb       	out	0x15, r25	; 21
	clearbit(LCD_control_PORT,RW);
  f0:	95 b3       	in	r25, 0x15	; 21
  f2:	9b 7f       	andi	r25, 0xFB	; 251
  f4:	95 bb       	out	0x15, r25	; 21
	setbit(LCD_control_PORT,EN);// en 1
  f6:	95 b3       	in	r25, 0x15	; 21
  f8:	98 60       	ori	r25, 0x08	; 8
  fa:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	00 00       	nop
	_delay_us(1);
	clearbit(LCD_control_PORT,EN);// en 0
  fe:	95 b3       	in	r25, 0x15	; 21
 100:	97 7f       	andi	r25, 0xF7	; 247
 102:	95 bb       	out	0x15, r25	; 21
 104:	32 e4       	ldi	r19, 0x42	; 66
 106:	3a 95       	dec	r19
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_send_command_4bit+0x28>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_send_command_4bit+0x2e>
	_delay_us(200);// higher to lower nipple
	
	LCD_DATA_PORT = (LCD_DATA_PORT &0x0f) |(cmd<<4);//send low nibble
 10c:	25 b3       	in	r18, 0x15	; 21
 10e:	30 e1       	ldi	r19, 0x10	; 16
 110:	83 9f       	mul	r24, r19
 112:	c0 01       	movw	r24, r0
 114:	11 24       	eor	r1, r1
 116:	92 2f       	mov	r25, r18
 118:	9f 70       	andi	r25, 0x0F	; 15
 11a:	89 2b       	or	r24, r25
 11c:	85 bb       	out	0x15, r24	; 21
	// port & 0xf0   |   cmd & 0x0f lower
	// port & 0xf0   |   cmd >> 4 higher nibble
	///////////////////////////////////////////////////////
	
	
	setbit(LCD_control_PORT,EN);//en 1
 11e:	85 b3       	in	r24, 0x15	; 21
 120:	88 60       	ori	r24, 0x08	; 8
 122:	85 bb       	out	0x15, r24	; 21
 124:	00 00       	nop
	_delay_us(1);
	clearbit(LCD_control_PORT,EN);//en 0
 126:	85 b3       	in	r24, 0x15	; 21
 128:	87 7f       	andi	r24, 0xF7	; 247
 12a:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	89 ef       	ldi	r24, 0xF9	; 249
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_send_command_4bit+0x52>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_send_command_4bit+0x58>
 136:	00 00       	nop
 138:	08 95       	ret

0000013a <LCD_INIT_4bit>:
	_delay_ms(1); // time command
}

void LCD_INIT_4bit(void)
{
	LCD_DATA_DIR|= 0xf0;
 13a:	84 b3       	in	r24, 0x14	; 20
 13c:	80 6f       	ori	r24, 0xF0	; 240
 13e:	84 bb       	out	0x14, r24	; 20
	setbit(LCD_control_DIR,EN);
 140:	84 b3       	in	r24, 0x14	; 20
 142:	88 60       	ori	r24, 0x08	; 8
 144:	84 bb       	out	0x14, r24	; 20
	setbit(LCD_control_DIR,RS);
 146:	84 b3       	in	r24, 0x14	; 20
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	84 bb       	out	0x14, r24	; 20
	setbit(LCD_control_DIR,RW);
 14c:	84 b3       	in	r24, 0x14	; 20
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	84 bb       	out	0x14, r24	; 20
	LCD_send_command_4bit(0x02);// return home
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	0e 94 6f 00 	call	0xde	; 0xde <LCD_send_command_4bit>
	LCD_send_command_4bit(0x28);// 2 line  and 4 bit mode
 158:	88 e2       	ldi	r24, 0x28	; 40
 15a:	0e 94 6f 00 	call	0xde	; 0xde <LCD_send_command_4bit>
	LCD_send_command_4bit(0x0c);// display on
 15e:	8c e0       	ldi	r24, 0x0C	; 12
 160:	0e 94 6f 00 	call	0xde	; 0xde <LCD_send_command_4bit>
	LCD_send_command_4bit(0x06);// auto increment
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	0e 94 6f 00 	call	0xde	; 0xde <LCD_send_command_4bit>
	LCD_send_command_4bit(0x01);// clear screen
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 6f 00 	call	0xde	; 0xde <LCD_send_command_4bit>
 170:	87 e8       	ldi	r24, 0x87	; 135
 172:	93 e1       	ldi	r25, 0x13	; 19
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_INIT_4bit+0x3a>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_INIT_4bit+0x40>
 17a:	00 00       	nop
 17c:	08 95       	ret

0000017e <LCD_send_string_4bit>:
	_delay_ms(20);
	
	
}
void LCD_send_string_4bit( char* str)
{
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	8c 01       	movw	r16, r24
	int count =0;
 188:	c0 e0       	ldi	r28, 0x00	; 0
 18a:	d0 e0       	ldi	r29, 0x00	; 0
	while(str[count]!=0)
 18c:	03 c0       	rjmp	.+6      	; 0x194 <LCD_send_string_4bit+0x16>
	{
		LCD_send_data_4bit(str[count]);
 18e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_send_data_4bit>
		count++;
 192:	21 96       	adiw	r28, 0x01	; 1
	
}
void LCD_send_string_4bit( char* str)
{
	int count =0;
	while(str[count]!=0)
 194:	f8 01       	movw	r30, r16
 196:	ec 0f       	add	r30, r28
 198:	fd 1f       	adc	r31, r29
 19a:	80 81       	ld	r24, Z
 19c:	81 11       	cpse	r24, r1
 19e:	f7 cf       	rjmp	.-18     	; 0x18e <LCD_send_string_4bit+0x10>
	{
		LCD_send_data_4bit(str[count]);
		count++;
	}
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <int1_init>:
    }
}

void int1_init()
{
	clearbit(DDRD,3);    // set pin as INPUT
 1aa:	81 b3       	in	r24, 0x11	; 17
 1ac:	87 7f       	andi	r24, 0xF7	; 247
 1ae:	81 bb       	out	0x11, r24	; 17
	setbit(MCUCR,ISC11); // The rising edge of INT1 generates an interrupt request.
 1b0:	85 b7       	in	r24, 0x35	; 53
 1b2:	88 60       	ori	r24, 0x08	; 8
 1b4:	85 bf       	out	0x35, r24	; 53
	setbit(MCUCR,ISC10); // The rising edge of INT1 generates an interrupt request.
 1b6:	85 b7       	in	r24, 0x35	; 53
 1b8:	84 60       	ori	r24, 0x04	; 4
 1ba:	85 bf       	out	0x35, r24	; 53
	setbit(GICR,INT1);   // external interrupt  EN  INT1
 1bc:	8b b7       	in	r24, 0x3b	; 59
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	8b bf       	out	0x3b, r24	; 59
	sei();               // global interrupt EN
 1c2:	78 94       	sei
 1c4:	08 95       	ret

000001c6 <int0_init>:
}

void int0_init()
{
	clearbit(DDRD,2);    // set pin as INPUT
 1c6:	81 b3       	in	r24, 0x11	; 17
 1c8:	8b 7f       	andi	r24, 0xFB	; 251
 1ca:	81 bb       	out	0x11, r24	; 17
	setbit(MCUCR,ISC01); // The rising edge of INT1 generates an interrupt request.
 1cc:	85 b7       	in	r24, 0x35	; 53
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	85 bf       	out	0x35, r24	; 53
	setbit(MCUCR,ISC00); //The rising edge of INT1 generates an interrupt request.
 1d2:	85 b7       	in	r24, 0x35	; 53
 1d4:	81 60       	ori	r24, 0x01	; 1
 1d6:	85 bf       	out	0x35, r24	; 53
	setbit(GICR,INT0);   // external interrupt  EN INT0
 1d8:	8b b7       	in	r24, 0x3b	; 59
 1da:	80 64       	ori	r24, 0x40	; 64
 1dc:	8b bf       	out	0x3b, r24	; 59
	sei();               // global interrupt EN
 1de:	78 94       	sei
 1e0:	08 95       	ret

000001e2 <main>:



int main(void)
{
    LCD_INIT_4bit();
 1e2:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_INIT_4bit>
    while (1) 
    {
		setbit(DDRA,5);		// make LED as OUTPUT
 1e6:	8a b3       	in	r24, 0x1a	; 26
 1e8:	80 62       	ori	r24, 0x20	; 32
 1ea:	8a bb       	out	0x1a, r24	; 26
		int1_init();        // calling
 1ec:	0e 94 d5 00 	call	0x1aa	; 0x1aa <int1_init>
		int0_init();
 1f0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <int0_init>
		setbit(DDRB,6);     // toggle pin LED
 1f4:	87 b3       	in	r24, 0x17	; 23
 1f6:	80 64       	ori	r24, 0x40	; 64
 1f8:	87 bb       	out	0x17, r24	; 23
		while (1)
		{
			toggelbit(PORTB,6); // toggling
 1fa:	98 b3       	in	r25, 0x18	; 24
 1fc:	80 e4       	ldi	r24, 0x40	; 64
 1fe:	89 27       	eor	r24, r25
 200:	88 bb       	out	0x18, r24	; 24
 202:	2f e9       	ldi	r18, 0x9F	; 159
 204:	86 e8       	ldi	r24, 0x86	; 134
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x26>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x30>
 212:	00 00       	nop
 214:	f2 cf       	rjmp	.-28     	; 0x1fa <main+0x18>

00000216 <__vector_2>:
	setbit(GICR,INT0);   // external interrupt  EN INT0
	sei();               // global interrupt EN
}

ISR(INT1_vect)
{	LCD_send_command_4bit(0x01);
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	4f 93       	push	r20
 226:	5f 93       	push	r21
 228:	6f 93       	push	r22
 22a:	7f 93       	push	r23
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	af 93       	push	r26
 232:	bf 93       	push	r27
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 6f 00 	call	0xde	; 0xde <LCD_send_command_4bit>
 23e:	89 ef       	ldi	r24, 0xF9	; 249
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <__vector_2+0x2c>
 246:	00 c0       	rjmp	.+0      	; 0x248 <__vector_2+0x32>
 248:	00 00       	nop
	_delay_ms(1);
	LCD_send_string_4bit("Ahla");
 24a:	80 e6       	ldi	r24, 0x60	; 96
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_send_string_4bit>
}
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	7f 91       	pop	r23
 260:	6f 91       	pop	r22
 262:	5f 91       	pop	r21
 264:	4f 91       	pop	r20
 266:	3f 91       	pop	r19
 268:	2f 91       	pop	r18
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <__vector_1>:


ISR(INT0_vect)
{	LCD_send_command_4bit(0x01);
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	2f 93       	push	r18
 280:	3f 93       	push	r19
 282:	4f 93       	push	r20
 284:	5f 93       	push	r21
 286:	6f 93       	push	r22
 288:	7f 93       	push	r23
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	af 93       	push	r26
 290:	bf 93       	push	r27
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 6f 00 	call	0xde	; 0xde <LCD_send_command_4bit>
 29c:	89 ef       	ldi	r24, 0xF9	; 249
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <__vector_1+0x2c>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <__vector_1+0x32>
 2a6:	00 00       	nop
	_delay_ms(1);
	LCD_send_string_4bit("sala");
 2a8:	85 e6       	ldi	r24, 0x65	; 101
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_send_string_4bit>
}
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	7f 91       	pop	r23
 2be:	6f 91       	pop	r22
 2c0:	5f 91       	pop	r21
 2c2:	4f 91       	pop	r20
 2c4:	3f 91       	pop	r19
 2c6:	2f 91       	pop	r18
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
