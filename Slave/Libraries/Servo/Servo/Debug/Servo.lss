
Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000675  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  00000831  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000280  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000103c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031f  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  0000137f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000140f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <stdio.h>			
#include <util/delay.h>		

int main(void)
{
	DDRD |= (1<<PD5);	/* Make OC1A pin as output */
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 62       	ori	r24, 0x20	; 32
  70:	81 bb       	out	0x11, r24	; 17
	TCNT1 = 0;			/* Set timer1 count zero */
  72:	1d bc       	out	0x2d, r1	; 45
  74:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;		/* Set TOP count for timer1 in ICR1 register */
  76:	83 ec       	ldi	r24, 0xC3	; 195
  78:	99 e0       	ldi	r25, 0x09	; 9
  7a:	97 bd       	out	0x27, r25	; 39
  7c:	86 bd       	out	0x26, r24	; 38

	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
  7e:	82 e8       	ldi	r24, 0x82	; 130
  80:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
  82:	8b e1       	ldi	r24, 0x1B	; 27
  84:	8e bd       	out	0x2e, r24	; 46
	while(1)
	{
		OCR1A = 65;		/* Set servo shaft at -90° position */
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	9b bd       	out	0x2b, r25	; 43
  8c:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ed       	ldi	r18, 0xDF	; 223
  90:	83 e9       	ldi	r24, 0x93	; 147
  92:	94 e0       	ldi	r25, 0x04	; 4
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x28>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
		_delay_ms(1500);
		OCR1A = 175;	/* Set servo shaft at 0° position */
  a0:	8f ea       	ldi	r24, 0xAF	; 175
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	9b bd       	out	0x2b, r25	; 43
  a6:	8a bd       	out	0x2a, r24	; 42
  a8:	2f ed       	ldi	r18, 0xDF	; 223
  aa:	83 e9       	ldi	r24, 0x93	; 147
  ac:	94 e0       	ldi	r25, 0x04	; 4
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x42>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x4c>
  b8:	00 00       	nop
		_delay_ms(1500);
		OCR1A = 300;	/* Set servo at +90° position */
  ba:	8c e2       	ldi	r24, 0x2C	; 44
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	9b bd       	out	0x2b, r25	; 43
  c0:	8a bd       	out	0x2a, r24	; 42
  c2:	2f ed       	ldi	r18, 0xDF	; 223
  c4:	83 e9       	ldi	r24, 0x93	; 147
  c6:	94 e0       	ldi	r25, 0x04	; 4
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x5c>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x66>
  d2:	00 00       	nop
  d4:	d8 cf       	rjmp	.-80     	; 0x86 <main+0x1a>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
