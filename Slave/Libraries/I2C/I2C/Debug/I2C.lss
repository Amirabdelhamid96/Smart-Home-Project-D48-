
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000700  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005de  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035b  00000000  00000000  00000ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001254  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034c  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000db  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000016df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6f 00 	call	0xde	; 0xde <main>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2C_Init>:
3-write   func*/
// twsr = twps0 twps1  ==> 11
#define BITRATE(TWSR)	((F_CPU/SCL_CLK)-16)/(2*pow(4,(TWSR&((1<<TWPS0)|(1<<TWPS1)))))
void I2C_Init()			
{   // clock configuration 
	TWBR = BITRATE(TWSR=0x00);	// Get bit rate register value by formula 
  6c:	11 b8       	out	0x01, r1	; 1
  6e:	8a e2       	ldi	r24, 0x2A	; 42
  70:	80 b9       	out	0x00, r24	; 0
  72:	08 95       	ret

00000074 <I2C_Start>:
}//TWSR  ==> TWPS0 prescale

char I2C_Start(char address)  // input address 
{
	char status;		
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);	/* Enable TWI, generate START					*/
  74:	94 ea       	ldi	r25, 0xA4	; 164
  76:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR&(1<<TWINT)));				/* Wait until TWI finish its current job		*/
  78:	06 b6       	in	r0, 0x36	; 54
  7a:	07 fe       	sbrs	r0, 7
  7c:	fd cf       	rjmp	.-6      	; 0x78 <I2C_Start+0x4>
	//TWSR & 0b1111 1000 =
	//reg = 10101 000 & 11111 000
	// status = 10101
	status=TWSR&0xF8;						/* Read TWI status register						*/
  7e:	91 b1       	in	r25, 0x01	; 1
  80:	98 7f       	andi	r25, 0xF8	; 248
	if(status!=0x08)						/* Check weather START transmitted or not?		*/
  82:	98 30       	cpi	r25, 0x08	; 8
  84:	71 f4       	brne	.+28     	; 0xa2 <I2C_Start+0x2e>
	return 0;								/* Return 0 to indicate start condition fail	*/
	TWDR= address;							/* Write SLA+W in TWI data register				*/
  86:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);				/* Enable TWI & clear interrupt flag			*/
  88:	84 e8       	ldi	r24, 0x84	; 132
  8a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));				/* Wait until TWI finish its current job		*/
  8c:	06 b6       	in	r0, 0x36	; 54
  8e:	07 fe       	sbrs	r0, 7
  90:	fd cf       	rjmp	.-6      	; 0x8c <I2C_Start+0x18>
	status=TWSR&0xF8;						/* Read TWI status register */
  92:	81 b1       	in	r24, 0x01	; 1
  94:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x18)	//ACK				/* Check for SLA+W transmitted &ack received	*/
  96:	88 31       	cpi	r24, 0x18	; 24
  98:	31 f0       	breq	.+12     	; 0xa6 <I2C_Start+0x32>
	return 1;								/* Return 1 to indicate ack received			*/
	if(status==0x20)	//Not ACK			/* Check for SLA+W transmitted &nack received	*/
  9a:	80 32       	cpi	r24, 0x20	; 32
  9c:	31 f4       	brne	.+12     	; 0xaa <I2C_Start+0x36>
	return 2;								/* Return 2 to indicate nack received			*/
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	08 95       	ret
	//TWSR & 0b1111 1000 =
	//reg = 10101 000 & 11111 000
	// status = 10101
	status=TWSR&0xF8;						/* Read TWI status register						*/
	if(status!=0x08)						/* Check weather START transmitted or not?		*/
	return 0;								/* Return 0 to indicate start condition fail	*/
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	08 95       	ret
	TWDR= address;							/* Write SLA+W in TWI data register				*/
	TWCR=(1<<TWEN)|(1<<TWINT);				/* Enable TWI & clear interrupt flag			*/
	while(!(TWCR&(1<<TWINT)));				/* Wait until TWI finish its current job		*/
	status=TWSR&0xF8;						/* Read TWI status register */
	if(status==0x18)	//ACK				/* Check for SLA+W transmitted &ack received	*/
	return 1;								/* Return 1 to indicate ack received			*/
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	08 95       	ret
	if(status==0x20)	//Not ACK			/* Check for SLA+W transmitted &nack received	*/
	return 2;								/* Return 2 to indicate nack received			*/
	else
	return 3;		// bus fault						/* Else return 3 to indicate SLA+W failed		*/
  aa:	83 e0       	ldi	r24, 0x03	; 3
}
  ac:	08 95       	ret

000000ae <I2C_Write>:

char I2C_Write(char data)					/* I2C write function */
{
	char status;							/* Declare variable */
	TWDR=data;								/* Copy data in TWI data register */
  ae:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);				/* Enable TWI and clear interrupt flag */
  b0:	84 e8       	ldi	r24, 0x84	; 132
  b2:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));				/* Wait until TWI finish its current job */
  b4:	06 b6       	in	r0, 0x36	; 54
  b6:	07 fe       	sbrs	r0, 7
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <I2C_Write+0x6>
	status=TWSR&0xF8;						/* Read TWI status register */
  ba:	81 b1       	in	r24, 0x01	; 1
  bc:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x28)						/* Check for data transmitted &ack received */
  be:	88 32       	cpi	r24, 0x28	; 40
  c0:	21 f0       	breq	.+8      	; 0xca <I2C_Write+0x1c>
	return 0;								/* Return 0 to indicate ack received */
	if(status==0x30)						/* Check for data transmitted &nack received */
  c2:	80 33       	cpi	r24, 0x30	; 48
  c4:	21 f4       	brne	.+8      	; 0xce <I2C_Write+0x20>
	return 1;								/* Return 1 to indicate nack received */
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	08 95       	ret
	TWDR=data;								/* Copy data in TWI data register */
	TWCR=(1<<TWEN)|(1<<TWINT);				/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));				/* Wait until TWI finish its current job */
	status=TWSR&0xF8;						/* Read TWI status register */
	if(status==0x28)						/* Check for data transmitted &ack received */
	return 0;								/* Return 0 to indicate ack received */
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	08 95       	ret
	if(status==0x30)						/* Check for data transmitted &nack received */
	return 1;								/* Return 1 to indicate nack received */
	else
	return 2;	// data fault							/* Else return 2 for data transmission failure */
  ce:	82 e0       	ldi	r24, 0x02	; 2
}
  d0:	08 95       	ret

000000d2 <I2C_Stop>:

void I2C_Stop()								/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);	/* Enable TWI, generate stop */
  d2:	84 e9       	ldi	r24, 0x94	; 148
  d4:	86 bf       	out	0x36, r24	; 54
	while(TWCR&(1<<TWSTO));					/* Wait until stop condition execution */
  d6:	06 b6       	in	r0, 0x36	; 54
  d8:	04 fc       	sbrc	r0, 4
  da:	fd cf       	rjmp	.-6      	; 0xd6 <I2C_Stop+0x4>
}
  dc:	08 95       	ret

000000de <main>:
int main(void)
{
	I2C_Init();
  de:	0e 94 36 00 	call	0x6c	; 0x6c <I2C_Init>
    while (1) 
    {
		I2C_Start(0x20);   //address
  e2:	80 e2       	ldi	r24, 0x20	; 32
  e4:	0e 94 3a 00 	call	0x74	; 0x74 <I2C_Start>
		I2C_Write(0x05);   //data
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	0e 94 57 00 	call	0xae	; 0xae <I2C_Write>
		I2C_Write(0x09);   //data
  ee:	89 e0       	ldi	r24, 0x09	; 9
  f0:	0e 94 57 00 	call	0xae	; 0xae <I2C_Write>
		I2C_Write(0x55);   //data
  f4:	85 e5       	ldi	r24, 0x55	; 85
  f6:	0e 94 57 00 	call	0xae	; 0xae <I2C_Write>
		I2C_Stop();        //stop
  fa:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	2f e3       	ldi	r18, 0x3F	; 63
 100:	82 e4       	ldi	r24, 0x42	; 66
 102:	9f e0       	ldi	r25, 0x0F	; 15
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x26>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x30>
 10e:	00 00       	nop
 110:	e8 cf       	rjmp	.-48     	; 0xe2 <main+0x4>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
