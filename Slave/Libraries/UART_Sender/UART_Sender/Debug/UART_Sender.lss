
UART_Sender.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066f  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bb  00000000  00000000  0000082b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028f  00000000  00000000  00000de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000320  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c1  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000014d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 49 00 	call	0x92	; 0x92 <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_INIT>:



void UART_INIT(unsigned int baud)
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);				// Enable UART transmitter and receiver
  6c:	2a b1       	in	r18, 0x0a	; 10
  6e:	28 61       	ori	r18, 0x18	; 24
  70:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	//8 bit data and 1 stop bit
  72:	20 b5       	in	r18, 0x20	; 32
  74:	26 68       	ori	r18, 0x86	; 134
  76:	20 bd       	out	0x20, r18	; 32
	UBRRL = baud;
  78:	89 b9       	out	0x09, r24	; 9
	UBRRH = (baud >> 8);
  7a:	90 bd       	out	0x20, r25	; 32
  7c:	08 95       	ret

0000007e <UART_sendchar>:
}
void UART_sendchar(unsigned char data)
{
	while(readbit(UCSRA,UDRE)==0)// wait the reg to be empty
  7e:	5d 9b       	sbis	0x0b, 5	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <UART_sendchar>
	{	;	}
	UDR = data; // send  data
  82:	8c b9       	out	0x0c, r24	; 12
	while(readbit(UCSRA,TXC)==0)// wait till the data to be send
  84:	5e 9b       	sbis	0x0b, 6	; 11
  86:	fe cf       	rjmp	.-4      	; 0x84 <UART_sendchar+0x6>
	{	;	}
}
  88:	08 95       	ret

0000008a <UART_receivechar>:
unsigned char UART_receivechar()
{
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
  8a:	5f 9b       	sbis	0x0b, 7	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <UART_receivechar>
	return(UDR);			/* Return the byte*/
  8e:	8c b1       	in	r24, 0x0c	; 12
}
  90:	08 95       	ret

00000092 <main>:



int main(void)
{
    UART_INIT(103);
  92:	87 e6       	ldi	r24, 0x67	; 103
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 36 00 	call	0x6c	; 0x6c <UART_INIT>
    unsigned char x;
    DDRA = 255;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	8a bb       	out	0x1a, r24	; 26
    while (1)
    {		
			x=UART_receivechar();
  9e:	0e 94 45 00 	call	0x8a	; 0x8a <UART_receivechar>
  a2:	c8 2f       	mov	r28, r24
			UART_sendchar(x);
  a4:	0e 94 3f 00 	call	0x7e	; 0x7e <UART_sendchar>
				if(x=='A')
  a8:	c1 34       	cpi	r28, 0x41	; 65
  aa:	19 f4       	brne	.+6      	; 0xb2 <main+0x20>
					{
						PORTA =255; 
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	8b bb       	out	0x1b, r24	; 27
  b0:	f6 cf       	rjmp	.-20     	; 0x9e <main+0xc>
					}
				
				else
					{
						PORTA =0;
  b2:	1b ba       	out	0x1b, r1	; 27
  b4:	f4 cf       	rjmp	.-24     	; 0x9e <main+0xc>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
