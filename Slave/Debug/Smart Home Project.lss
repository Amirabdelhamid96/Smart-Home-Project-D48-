
Smart Home Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000562  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f25  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a3c  00000000  00000000  000016a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bef  00000000  00000000  000020dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000023c  00000000  00000000  00002ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000550  00000000  00000000  00002f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004e3  00000000  00000000  00003458  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  0000393b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_1>
   8:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 f7 01 	call	0x3ee	; 0x3ee <main>
  64:	0c 94 af 02 	jmp	0x55e	; 0x55e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_init>:
  6c:	87 b1       	in	r24, 0x07	; 7
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 b9       	out	0x07, r24	; 7
  72:	86 b1       	in	r24, 0x06	; 6
  74:	80 68       	ori	r24, 0x80	; 128
  76:	86 b9       	out	0x06, r24	; 6
  78:	86 b1       	in	r24, 0x06	; 6
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	86 b9       	out	0x06, r24	; 6
  7e:	08 95       	ret

00000080 <ADC_read>:
  80:	97 b1       	in	r25, 0x07	; 7
  82:	90 7e       	andi	r25, 0xE0	; 224
  84:	89 2b       	or	r24, r25
  86:	87 b9       	out	0x07, r24	; 7
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	86 b9       	out	0x06, r24	; 6
  8e:	34 9b       	sbis	0x06, 4	; 6
  90:	fe cf       	rjmp	.-4      	; 0x8e <ADC_read+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	8a 95       	dec	r24
  96:	f1 f7       	brne	.-4      	; 0x94 <ADC_read+0x14>
  98:	00 00       	nop
  9a:	24 b1       	in	r18, 0x04	; 4
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	98 2f       	mov	r25, r24
  a2:	88 27       	eor	r24, r24
  a4:	82 0f       	add	r24, r18
  a6:	91 1d       	adc	r25, r1
  a8:	08 95       	ret

000000aa <Bulb_on>:
#define readbit(reg,bit) ((reg>>bit)&1)


void Bulb_on(int a)
{
		if(a==1)
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	91 05       	cpc	r25, r1
  ae:	31 f4       	brne	.+12     	; 0xbc <Bulb_on+0x12>
		{
		setbit(DDRC,2);
  b0:	24 b3       	in	r18, 0x14	; 20
  b2:	24 60       	ori	r18, 0x04	; 4
  b4:	24 bb       	out	0x14, r18	; 20
		setbit(PORTC,2);	
  b6:	25 b3       	in	r18, 0x15	; 21
  b8:	24 60       	ori	r18, 0x04	; 4
  ba:	25 bb       	out	0x15, r18	; 21
		}
		if(a==2)
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	91 05       	cpc	r25, r1
  c0:	31 f4       	brne	.+12     	; 0xce <Bulb_on+0x24>
		{
			setbit(DDRC,7);
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	20 68       	ori	r18, 0x80	; 128
  c6:	24 bb       	out	0x14, r18	; 20
			setbit(PORTC,7);
  c8:	25 b3       	in	r18, 0x15	; 21
  ca:	20 68       	ori	r18, 0x80	; 128
  cc:	25 bb       	out	0x15, r18	; 21
		}
		if(a==3)
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	91 05       	cpc	r25, r1
  d2:	31 f4       	brne	.+12     	; 0xe0 <Bulb_on+0x36>
		{
			setbit(DDRD,3);
  d4:	21 b3       	in	r18, 0x11	; 17
  d6:	28 60       	ori	r18, 0x08	; 8
  d8:	21 bb       	out	0x11, r18	; 17
			setbit(PORTD,3);
  da:	22 b3       	in	r18, 0x12	; 18
  dc:	28 60       	ori	r18, 0x08	; 8
  de:	22 bb       	out	0x12, r18	; 18
		}
		if(a==4)
  e0:	84 30       	cpi	r24, 0x04	; 4
  e2:	91 05       	cpc	r25, r1
  e4:	31 f4       	brne	.+12     	; 0xf2 <Bulb_on+0x48>
		{
			setbit(DDRA,6);
  e6:	2a b3       	in	r18, 0x1a	; 26
  e8:	20 64       	ori	r18, 0x40	; 64
  ea:	2a bb       	out	0x1a, r18	; 26
			setbit(PORTA,6);
  ec:	2b b3       	in	r18, 0x1b	; 27
  ee:	20 64       	ori	r18, 0x40	; 64
  f0:	2b bb       	out	0x1b, r18	; 27
		}
		if(a==5)
  f2:	05 97       	sbiw	r24, 0x05	; 5
  f4:	31 f4       	brne	.+12     	; 0x102 <Bulb_on+0x58>
		{
			setbit(DDRA,7);
  f6:	8a b3       	in	r24, 0x1a	; 26
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	8a bb       	out	0x1a, r24	; 26
			setbit(PORTA,7);
  fc:	8b b3       	in	r24, 0x1b	; 27
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	8b bb       	out	0x1b, r24	; 27
 102:	08 95       	ret

00000104 <Bulb_off>:
		}
}

void Bulb_off(int a)
{
		if(a==1)
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 05       	cpc	r25, r1
 108:	31 f4       	brne	.+12     	; 0x116 <Bulb_off+0x12>
		{
			clearbit(DDRC,2);
 10a:	24 b3       	in	r18, 0x14	; 20
 10c:	2b 7f       	andi	r18, 0xFB	; 251
 10e:	24 bb       	out	0x14, r18	; 20
			clearbit(PORTC,2);
 110:	25 b3       	in	r18, 0x15	; 21
 112:	2b 7f       	andi	r18, 0xFB	; 251
 114:	25 bb       	out	0x15, r18	; 21
		}
		if(a==2)
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	91 05       	cpc	r25, r1
 11a:	31 f4       	brne	.+12     	; 0x128 <Bulb_off+0x24>
		{
			clearbit(DDRC,7);
 11c:	24 b3       	in	r18, 0x14	; 20
 11e:	2f 77       	andi	r18, 0x7F	; 127
 120:	24 bb       	out	0x14, r18	; 20
			clearbit(PORTC,7);
 122:	25 b3       	in	r18, 0x15	; 21
 124:	2f 77       	andi	r18, 0x7F	; 127
 126:	25 bb       	out	0x15, r18	; 21
		}
		if(a==3)
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	91 05       	cpc	r25, r1
 12c:	31 f4       	brne	.+12     	; 0x13a <Bulb_off+0x36>
		{
			clearbit(DDRD,3);
 12e:	21 b3       	in	r18, 0x11	; 17
 130:	27 7f       	andi	r18, 0xF7	; 247
 132:	21 bb       	out	0x11, r18	; 17
			clearbit(PORTD,3);
 134:	22 b3       	in	r18, 0x12	; 18
 136:	27 7f       	andi	r18, 0xF7	; 247
 138:	22 bb       	out	0x12, r18	; 18
		}
		if(a==4)
 13a:	84 30       	cpi	r24, 0x04	; 4
 13c:	91 05       	cpc	r25, r1
 13e:	31 f4       	brne	.+12     	; 0x14c <Bulb_off+0x48>
		{
			clearbit(DDRA,6);
 140:	2a b3       	in	r18, 0x1a	; 26
 142:	2f 7b       	andi	r18, 0xBF	; 191
 144:	2a bb       	out	0x1a, r18	; 26
			clearbit(PORTA,6);
 146:	2b b3       	in	r18, 0x1b	; 27
 148:	2f 7b       	andi	r18, 0xBF	; 191
 14a:	2b bb       	out	0x1b, r18	; 27
		}
		if(a==5)
 14c:	05 97       	sbiw	r24, 0x05	; 5
 14e:	31 f4       	brne	.+12     	; 0x15c <Bulb_off+0x58>
		{
			clearbit(DDRA,7);
 150:	8a b3       	in	r24, 0x1a	; 26
 152:	8f 77       	andi	r24, 0x7F	; 127
 154:	8a bb       	out	0x1a, r24	; 26
			clearbit(PORTA,7);
 156:	8b b3       	in	r24, 0x1b	; 27
 158:	8f 77       	andi	r24, 0x7F	; 127
 15a:	8b bb       	out	0x1b, r24	; 27
 15c:	08 95       	ret

0000015e <motor_start>:
 15e:	84 b3       	in	r24, 0x14	; 20
 160:	88 61       	ori	r24, 0x18	; 24
 162:	84 bb       	out	0x14, r24	; 20
 164:	85 b3       	in	r24, 0x15	; 21
 166:	88 60       	ori	r24, 0x08	; 8
 168:	85 bb       	out	0x15, r24	; 21
 16a:	85 b3       	in	r24, 0x15	; 21
 16c:	8f 7e       	andi	r24, 0xEF	; 239
 16e:	85 bb       	out	0x15, r24	; 21
 170:	08 95       	ret

00000172 <motor_stop>:
 172:	84 b3       	in	r24, 0x14	; 20
 174:	88 61       	ori	r24, 0x18	; 24
 176:	84 bb       	out	0x14, r24	; 20
 178:	85 b3       	in	r24, 0x15	; 21
 17a:	87 7f       	andi	r24, 0xF7	; 247
 17c:	85 bb       	out	0x15, r24	; 21
 17e:	85 b3       	in	r24, 0x15	; 21
 180:	8f 7e       	andi	r24, 0xEF	; 239
 182:	85 bb       	out	0x15, r24	; 21
 184:	08 95       	ret

00000186 <__vector_2>:
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	0f c0       	rjmp	.+30     	; 0x1be <__vector_2+0x38>
 1a0:	9b b3       	in	r25, 0x1b	; 27
 1a2:	80 e2       	ldi	r24, 0x20	; 32
 1a4:	89 27       	eor	r24, r25
 1a6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	4f e9       	ldi	r20, 0x9F	; 159
 1aa:	86 e8       	ldi	r24, 0x86	; 134
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	41 50       	subi	r20, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <__vector_2+0x28>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <__vector_2+0x32>
 1b8:	00 00       	nop
 1ba:	2f 5f       	subi	r18, 0xFF	; 255
 1bc:	3f 4f       	sbci	r19, 0xFF	; 255
 1be:	27 30       	cpi	r18, 0x07	; 7
 1c0:	31 05       	cpc	r19, r1
 1c2:	74 f3       	brlt	.-36     	; 0x1a0 <__vector_2+0x1a>
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_1>:
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	8f 93       	push	r24
 1e4:	8b b3       	in	r24, 0x1b	; 27
 1e6:	8f 7d       	andi	r24, 0xDF	; 223
 1e8:	8b bb       	out	0x1b, r24	; 27
 1ea:	8f 91       	pop	r24
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <Timer1_init>:
 1f6:	8f b5       	in	r24, 0x2f	; 47
 1f8:	8e 7f       	andi	r24, 0xFE	; 254
 1fa:	8f bd       	out	0x2f, r24	; 47
 1fc:	8f b5       	in	r24, 0x2f	; 47
 1fe:	82 60       	ori	r24, 0x02	; 2
 200:	8f bd       	out	0x2f, r24	; 47
 202:	8e b5       	in	r24, 0x2e	; 46
 204:	88 60       	ori	r24, 0x08	; 8
 206:	8e bd       	out	0x2e, r24	; 46
 208:	8e b5       	in	r24, 0x2e	; 46
 20a:	80 61       	ori	r24, 0x10	; 16
 20c:	8e bd       	out	0x2e, r24	; 46
 20e:	8f b5       	in	r24, 0x2f	; 47
 210:	8f 7b       	andi	r24, 0xBF	; 191
 212:	8f bd       	out	0x2f, r24	; 47
 214:	8f b5       	in	r24, 0x2f	; 47
 216:	80 68       	ori	r24, 0x80	; 128
 218:	8f bd       	out	0x2f, r24	; 47
 21a:	81 b3       	in	r24, 0x11	; 17
 21c:	80 62       	ori	r24, 0x20	; 32
 21e:	81 bb       	out	0x11, r24	; 17
 220:	81 b3       	in	r24, 0x11	; 17
 222:	80 68       	ori	r24, 0x80	; 128
 224:	81 bb       	out	0x11, r24	; 17
 226:	08 95       	ret

00000228 <Timer1_start>:
 228:	8e b5       	in	r24, 0x2e	; 46
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	8e bd       	out	0x2e, r24	; 46
 22e:	8e b5       	in	r24, 0x2e	; 46
 230:	82 60       	ori	r24, 0x02	; 2
 232:	8e bd       	out	0x2e, r24	; 46
 234:	8e b5       	in	r24, 0x2e	; 46
 236:	8b 7f       	andi	r24, 0xFB	; 251
 238:	8e bd       	out	0x2e, r24	; 46
 23a:	08 95       	ret

0000023c <Timer1_set_freq>:
 23c:	bc 01       	movw	r22, r24
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 9b 02 	call	0x536	; 0x536 <__divmodhi4>
 246:	28 ee       	ldi	r18, 0xE8	; 232
 248:	33 e0       	ldi	r19, 0x03	; 3
 24a:	62 9f       	mul	r22, r18
 24c:	a0 01       	movw	r20, r0
 24e:	63 9f       	mul	r22, r19
 250:	50 0d       	add	r21, r0
 252:	72 9f       	mul	r23, r18
 254:	50 0d       	add	r21, r0
 256:	11 24       	eor	r1, r1
 258:	42 9f       	mul	r20, r18
 25a:	c0 01       	movw	r24, r0
 25c:	43 9f       	mul	r20, r19
 25e:	90 0d       	add	r25, r0
 260:	52 9f       	mul	r21, r18
 262:	90 0d       	add	r25, r0
 264:	11 24       	eor	r1, r1
 266:	99 23       	and	r25, r25
 268:	0c f4       	brge	.+2      	; 0x26c <Timer1_set_freq+0x30>
 26a:	03 96       	adiw	r24, 0x03	; 3
 26c:	95 95       	asr	r25
 26e:	87 95       	ror	r24
 270:	95 95       	asr	r25
 272:	87 95       	ror	r24
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	97 bd       	out	0x27, r25	; 39
 278:	86 bd       	out	0x26, r24	; 38
 27a:	08 95       	ret

0000027c <Timer1_set_direction>:
 27c:	8a 35       	cpi	r24, 0x5A	; 90
 27e:	91 05       	cpc	r25, r1
 280:	31 f0       	breq	.+12     	; 0x28e <Timer1_set_direction+0x12>
 282:	84 3b       	cpi	r24, 0xB4	; 180
 284:	91 05       	cpc	r25, r1
 286:	41 f0       	breq	.+16     	; 0x298 <Timer1_set_direction+0x1c>
 288:	89 2b       	or	r24, r25
 28a:	79 f4       	brne	.+30     	; 0x2aa <Timer1_set_direction+0x2e>
 28c:	0a c0       	rjmp	.+20     	; 0x2a2 <Timer1_set_direction+0x26>
 28e:	86 e7       	ldi	r24, 0x76	; 118
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	9b bd       	out	0x2b, r25	; 43
 294:	8a bd       	out	0x2a, r24	; 42
 296:	08 95       	ret
 298:	83 ef       	ldi	r24, 0xF3	; 243
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	9b bd       	out	0x2b, r25	; 43
 29e:	8a bd       	out	0x2a, r24	; 42
 2a0:	08 95       	ret
 2a2:	89 ef       	ldi	r24, 0xF9	; 249
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	9b bd       	out	0x2b, r25	; 43
 2a8:	8a bd       	out	0x2a, r24	; 42
 2aa:	08 95       	ret

000002ac <Servo_init>:
 2ac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Timer1_init>
 2b0:	82 e3       	ldi	r24, 0x32	; 50
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 1e 01 	call	0x23c	; 0x23c <Timer1_set_freq>
 2b8:	0e 94 14 01 	call	0x228	; 0x228 <Timer1_start>
 2bc:	08 95       	ret

000002be <Servo_open>:
 2be:	84 eb       	ldi	r24, 0xB4	; 180
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 3e 01 	call	0x27c	; 0x27c <Timer1_set_direction>
 2c6:	08 95       	ret

000002c8 <Servo_close>:
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 3e 01 	call	0x27c	; 0x27c <Timer1_set_direction>
 2d0:	08 95       	ret

000002d2 <SPI_Init>:
//1-init
//2-function send
//3-function recive
void SPI_Init()					/* SPI Initialize function */
{
	clearbit(DDRB,MOSI);
 2d2:	87 b3       	in	r24, 0x17	; 23
 2d4:	8f 7d       	andi	r24, 0xDF	; 223
 2d6:	87 bb       	out	0x17, r24	; 23
	clearbit(DDRB,SCK);
 2d8:	87 b3       	in	r24, 0x17	; 23
 2da:	8f 77       	andi	r24, 0x7F	; 127
 2dc:	87 bb       	out	0x17, r24	; 23
	clearbit(DDRB,SS);
 2de:	87 b3       	in	r24, 0x17	; 23
 2e0:	8f 7e       	andi	r24, 0xEF	; 239
 2e2:	87 bb       	out	0x17, r24	; 23
	setbit(DDRB,MISO);
 2e4:	87 b3       	in	r24, 0x17	; 23
 2e6:	80 64       	ori	r24, 0x40	; 64
 2e8:	87 bb       	out	0x17, r24	; 23
	
	clearbit(PINB,SS);
 2ea:	86 b3       	in	r24, 0x16	; 22
 2ec:	8f 7e       	andi	r24, 0xEF	; 239
 2ee:	86 bb       	out	0x16, r24	; 22
	
	setbit(SPCR,SPE);
 2f0:	8d b1       	in	r24, 0x0d	; 13
 2f2:	80 64       	ori	r24, 0x40	; 64
 2f4:	8d b9       	out	0x0d, r24	; 13
	clearbit(SPCR,MSTR);
 2f6:	8d b1       	in	r24, 0x0d	; 13
 2f8:	8f 7e       	andi	r24, 0xEF	; 239
 2fa:	8d b9       	out	0x0d, r24	; 13
	setbit(SPCR,SPR0);
 2fc:	8d b1       	in	r24, 0x0d	; 13
 2fe:	81 60       	ori	r24, 0x01	; 1
 300:	8d b9       	out	0x0d, r24	; 13
	
	setbit(PINB,SS);
 302:	86 b3       	in	r24, 0x16	; 22
 304:	80 61       	ori	r24, 0x10	; 16
 306:	86 bb       	out	0x16, r24	; 22
 308:	08 95       	ret

0000030a <SPI_Write>:


void SPI_Write(char data)		/* SPI write data function */
{
	
	SPDR = data;			/* Write data to SPI data register */
 30a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	/* Wait till transmission complete */
 30c:	77 9b       	sbis	0x0e, 7	; 14
 30e:	fe cf       	rjmp	.-4      	; 0x30c <SPI_Write+0x2>
	
	
}
 310:	08 95       	ret

00000312 <SPI_Read>:


char SPI_Read()				/* SPI read data function */
{
	SPDR = 0xFF;
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	/* Wait till reception complete */
 316:	77 9b       	sbis	0x0e, 7	; 14
 318:	fe cf       	rjmp	.-4      	; 0x316 <SPI_Read+0x4>
	return(SPDR);			/* Return received data */
 31a:	8f b1       	in	r24, 0x0f	; 15
}
 31c:	08 95       	ret

0000031e <Int_SPI>:

void Int_SPI(int ab)
{
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	28 97       	sbiw	r28, 0x08	; 8
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
	int i;
	int array[4]; // array arrange data
	for(i=0; i<=3; i++)                  /* Convert decimal to ASCII                     */
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	13 c0       	rjmp	.+38     	; 0x362 <Int_SPI+0x44>
	{	// 35% 10 ==> 5
		array[i] = ab%10; // remainder  500   10 % 10 ==> 0  -->
 33c:	6a e0       	ldi	r22, 0x0A	; 10
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	0e 94 9b 02 	call	0x536	; 0x536 <__divmodhi4>
 344:	f9 01       	movw	r30, r18
 346:	ee 0f       	add	r30, r30
 348:	ff 1f       	adc	r31, r31
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	50 e0       	ldi	r21, 0x00	; 0
 34e:	4c 0f       	add	r20, r28
 350:	5d 1f       	adc	r21, r29
 352:	e4 0f       	add	r30, r20
 354:	f5 1f       	adc	r31, r21
 356:	91 83       	std	Z+1, r25	; 0x01
 358:	80 83       	st	Z, r24
		//array[0]  last ab = 1 (1 % 10)==> 1 --> array[1]
		// 0 % 10 = 0 --> 0%10 = 0
		ab       = ab/10; // ab = 10/10 = 1 --> 1/10 ==> 0 int
 35a:	86 2f       	mov	r24, r22
 35c:	97 2f       	mov	r25, r23

void Int_SPI(int ab)
{
	int i;
	int array[4]; // array arrange data
	for(i=0; i<=3; i++)                  /* Convert decimal to ASCII                     */
 35e:	2f 5f       	subi	r18, 0xFF	; 255
 360:	3f 4f       	sbci	r19, 0xFF	; 255
 362:	24 30       	cpi	r18, 0x04	; 4
 364:	31 05       	cpc	r19, r1
 366:	54 f3       	brlt	.-44     	; 0x33c <Int_SPI+0x1e>
 368:	04 e0       	ldi	r16, 0x04	; 4
 36a:	10 e0       	ldi	r17, 0x00	; 0
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	1a c0       	rjmp	.+52     	; 0x3a6 <Int_SPI+0x88>
		//  5300
	}
	int k=4;
	for(i=3; i>=0; i--)
	{
		if(array[i]!=0 || i==0)
 372:	fc 01       	movw	r30, r24
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	2c 0f       	add	r18, r28
 37e:	3d 1f       	adc	r19, r29
 380:	e2 0f       	add	r30, r18
 382:	f3 1f       	adc	r31, r19
 384:	20 81       	ld	r18, Z
 386:	31 81       	ldd	r19, Z+1	; 0x01
 388:	23 2b       	or	r18, r19
 38a:	29 f4       	brne	.+10     	; 0x396 <Int_SPI+0x78>
 38c:	00 97       	sbiw	r24, 0x00	; 0
 38e:	31 f0       	breq	.+12     	; 0x39c <Int_SPI+0x7e>
 390:	9c 01       	movw	r18, r24
 392:	c8 01       	movw	r24, r16
 394:	05 c0       	rjmp	.+10     	; 0x3a0 <Int_SPI+0x82>
		{k=i;i=0;}
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <Int_SPI+0x82>
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
		// 0100
		// 0010
		//  5300
	}
	int k=4;
	for(i=3; i>=0; i--)
 3a0:	8c 01       	movw	r16, r24
 3a2:	c9 01       	movw	r24, r18
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	99 23       	and	r25, r25
 3a8:	24 f7       	brge	.-56     	; 0x372 <Int_SPI+0x54>
 3aa:	14 c0       	rjmp	.+40     	; 0x3d4 <Int_SPI+0xb6>

	}
	
	for(i=k; i>=0; i--)
	{
		SPI_Write(array[i]);
 3ac:	f8 01       	movw	r30, r16
 3ae:	ee 0f       	add	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	41 e0       	ldi	r20, 0x01	; 1
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	4c 0f       	add	r20, r28
 3b8:	5d 1f       	adc	r21, r29
 3ba:	e4 0f       	add	r30, r20
 3bc:	f5 1f       	adc	r31, r21
 3be:	80 81       	ld	r24, Z
 3c0:	0e 94 85 01 	call	0x30a	; 0x30a <SPI_Write>
 3c4:	87 ea       	ldi	r24, 0xA7	; 167
 3c6:	91 e6       	ldi	r25, 0x61	; 97
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <Int_SPI+0xaa>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <Int_SPI+0xb0>
 3ce:	00 00       	nop
		if(array[i]!=0 || i==0)
		{k=i;i=0;}

	}
	
	for(i=k; i>=0; i--)
 3d0:	01 50       	subi	r16, 0x01	; 1
 3d2:	11 09       	sbc	r17, r1
 3d4:	11 23       	and	r17, r17
 3d6:	54 f7       	brge	.-44     	; 0x3ac <Int_SPI+0x8e>
		// 0 0 1 0
		// sending no : 48 ====> '0'
		// 0 1 2 3 ---> 9
		// 48 49 50 ---> end
	}
}
 3d8:	28 96       	adiw	r28, 0x08	; 8
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	de bf       	out	0x3e, r29	; 62
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	cd bf       	out	0x3d, r28	; 61
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	08 95       	ret

000003ee <main>:
void Dimmer_init(void);

int main(void)
{
	//Initialization
	ADC_init();
 3ee:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_init>
	SPI_Init();
 3f2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <SPI_Init>
	Servo_init();
 3f6:	0e 94 56 01 	call	0x2ac	; 0x2ac <Servo_init>
	//Dimmer_init();
	
	//adc2 input
	unsigned int x =0;
	clearbit(DDRA,1);
 3fa:	8a b3       	in	r24, 0x1a	; 26
 3fc:	8d 7f       	andi	r24, 0xFD	; 253
 3fe:	8a bb       	out	0x1a, r24	; 26
	
	char AC_Flag=0;
 400:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1)
	{
		
		//SPI Signal from Master
		signal=SPI_Read();
 402:	0e 94 89 01 	call	0x312	; 0x312 <SPI_Read>
 406:	c8 2f       	mov	r28, r24
		x=ADC_read(1);
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 40 00 	call	0x80	; 0x80 <ADC_read>
 410:	8c 01       	movw	r16, r24
		
		if(signal==1)
 412:	c1 30       	cpi	r28, 0x01	; 1
 414:	21 f4       	brne	.+8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		{Bulb_on(1);}
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 55 00 	call	0xaa	; 0xaa <Bulb_on>
		if(signal==2)
 41e:	c2 30       	cpi	r28, 0x02	; 2
 420:	21 f4       	brne	.+8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		{Bulb_off(1);}		
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 82 00 	call	0x104	; 0x104 <Bulb_off>
		if(signal==3)
 42a:	c3 30       	cpi	r28, 0x03	; 3
 42c:	21 f4       	brne	.+8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		{Bulb_on(2);}
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 55 00 	call	0xaa	; 0xaa <Bulb_on>
		if(signal==4)
 436:	c4 30       	cpi	r28, 0x04	; 4
 438:	21 f4       	brne	.+8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
		{Bulb_off(2);}
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 82 00 	call	0x104	; 0x104 <Bulb_off>
		if(signal==5)
 442:	c5 30       	cpi	r28, 0x05	; 5
 444:	21 f4       	brne	.+8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
		{Bulb_on(3);}
 446:	83 e0       	ldi	r24, 0x03	; 3
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 55 00 	call	0xaa	; 0xaa <Bulb_on>
		if(signal==6)
 44e:	c6 30       	cpi	r28, 0x06	; 6
 450:	21 f4       	brne	.+8      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		{Bulb_off(3);}
 452:	83 e0       	ldi	r24, 0x03	; 3
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 82 00 	call	0x104	; 0x104 <Bulb_off>
		if(signal==7)
 45a:	c7 30       	cpi	r28, 0x07	; 7
 45c:	21 f4       	brne	.+8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
		{Bulb_on(4);}
 45e:	84 e0       	ldi	r24, 0x04	; 4
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 55 00 	call	0xaa	; 0xaa <Bulb_on>
		if(signal==8)
 466:	c8 30       	cpi	r28, 0x08	; 8
 468:	21 f4       	brne	.+8      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
		{Bulb_off(4);}
 46a:	84 e0       	ldi	r24, 0x04	; 4
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 82 00 	call	0x104	; 0x104 <Bulb_off>
		if(signal==9)
 472:	c9 30       	cpi	r28, 0x09	; 9
 474:	21 f4       	brne	.+8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
		{Bulb_on(5);}
 476:	85 e0       	ldi	r24, 0x05	; 5
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 55 00 	call	0xaa	; 0xaa <Bulb_on>
		if(signal==0)
 47e:	c1 11       	cpse	r28, r1
 480:	04 c0       	rjmp	.+8      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
		{Bulb_off(5);}	
 482:	85 e0       	ldi	r24, 0x05	; 5
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 82 00 	call	0x104	; 0x104 <Bulb_off>
		if(signal==0X0D)
		{Dimmer(180);}
		if(signal==0X0E)
		{OCR2=10;}
		*/		
		if(signal==0X0F)
 48a:	cf 30       	cpi	r28, 0x0F	; 15
 48c:	09 f4       	brne	.+2      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		{AC_Flag=0;}
 48e:	d0 e0       	ldi	r29, 0x00	; 0
		if(signal==0XA0)
 490:	c0 3a       	cpi	r28, 0xA0	; 160
 492:	19 f4       	brne	.+6      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
		{motor_start();AC_Flag=1;}
 494:	0e 94 af 00 	call	0x15e	; 0x15e <motor_start>
 498:	d1 e0       	ldi	r29, 0x01	; 1
		if(signal==0XA1)
 49a:	c1 3a       	cpi	r28, 0xA1	; 161
 49c:	19 f4       	brne	.+6      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
		{motor_stop();AC_Flag=1;}		
 49e:	0e 94 b9 00 	call	0x172	; 0x172 <motor_stop>
 4a2:	d1 e0       	ldi	r29, 0x01	; 1
		if(signal==0XA2)
 4a4:	c2 3a       	cpi	r28, 0xA2	; 162
 4a6:	81 f4       	brne	.+32     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
		{
			Int_SPI(x*500/1023);
 4a8:	24 ef       	ldi	r18, 0xF4	; 244
 4aa:	31 e0       	ldi	r19, 0x01	; 1
 4ac:	02 9f       	mul	r16, r18
 4ae:	c0 01       	movw	r24, r0
 4b0:	03 9f       	mul	r16, r19
 4b2:	90 0d       	add	r25, r0
 4b4:	12 9f       	mul	r17, r18
 4b6:	90 0d       	add	r25, r0
 4b8:	11 24       	eor	r1, r1
 4ba:	6f ef       	ldi	r22, 0xFF	; 255
 4bc:	73 e0       	ldi	r23, 0x03	; 3
 4be:	0e 94 87 02 	call	0x50e	; 0x50e <__udivmodhi4>
 4c2:	cb 01       	movw	r24, r22
 4c4:	0e 94 8f 01 	call	0x31e	; 0x31e <Int_SPI>
		}		
		if(signal==0XA3)
 4c8:	c3 3a       	cpi	r28, 0xA3	; 163
 4ca:	11 f4       	brne	.+4      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
		{
			Servo_open();
 4cc:	0e 94 5f 01 	call	0x2be	; 0x2be <Servo_open>
		}
		if(signal==0XA4)
 4d0:	c4 3a       	cpi	r28, 0xA4	; 164
 4d2:	11 f4       	brne	.+4      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
		{
			Servo_close();
 4d4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Servo_close>
		}			
	
		if (AC_Flag==0)
 4d8:	d1 11       	cpse	r29, r1
 4da:	93 cf       	rjmp	.-218    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		{			
	 
	       if ((x*500/1023)>28)
 4dc:	84 ef       	ldi	r24, 0xF4	; 244
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	08 9f       	mul	r16, r24
 4e2:	70 01       	movw	r14, r0
 4e4:	09 9f       	mul	r16, r25
 4e6:	f0 0c       	add	r15, r0
 4e8:	18 9f       	mul	r17, r24
 4ea:	f0 0c       	add	r15, r0
 4ec:	11 24       	eor	r1, r1
 4ee:	83 ee       	ldi	r24, 0xE3	; 227
 4f0:	e8 16       	cp	r14, r24
 4f2:	83 e7       	ldi	r24, 0x73	; 115
 4f4:	f8 06       	cpc	r15, r24
 4f6:	10 f0       	brcs	.+4      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
	       {
		     motor_start();
 4f8:	0e 94 af 00 	call	0x15e	; 0x15e <motor_start>
	       }
	       if ((x*500/1023)<21)
 4fc:	8b ee       	ldi	r24, 0xEB	; 235
 4fe:	e8 16       	cp	r14, r24
 500:	83 e5       	ldi	r24, 0x53	; 83
 502:	f8 06       	cpc	r15, r24
 504:	08 f0       	brcs	.+2      	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 506:	7d cf       	rjmp	.-262    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
	       {
		     motor_stop();
 508:	0e 94 b9 00 	call	0x172	; 0x172 <motor_stop>
 50c:	7a cf       	rjmp	.-268    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>

0000050e <__udivmodhi4>:
 50e:	aa 1b       	sub	r26, r26
 510:	bb 1b       	sub	r27, r27
 512:	51 e1       	ldi	r21, 0x11	; 17
 514:	07 c0       	rjmp	.+14     	; 0x524 <__udivmodhi4_ep>

00000516 <__udivmodhi4_loop>:
 516:	aa 1f       	adc	r26, r26
 518:	bb 1f       	adc	r27, r27
 51a:	a6 17       	cp	r26, r22
 51c:	b7 07       	cpc	r27, r23
 51e:	10 f0       	brcs	.+4      	; 0x524 <__udivmodhi4_ep>
 520:	a6 1b       	sub	r26, r22
 522:	b7 0b       	sbc	r27, r23

00000524 <__udivmodhi4_ep>:
 524:	88 1f       	adc	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	5a 95       	dec	r21
 52a:	a9 f7       	brne	.-22     	; 0x516 <__udivmodhi4_loop>
 52c:	80 95       	com	r24
 52e:	90 95       	com	r25
 530:	bc 01       	movw	r22, r24
 532:	cd 01       	movw	r24, r26
 534:	08 95       	ret

00000536 <__divmodhi4>:
 536:	97 fb       	bst	r25, 7
 538:	07 2e       	mov	r0, r23
 53a:	16 f4       	brtc	.+4      	; 0x540 <__divmodhi4+0xa>
 53c:	00 94       	com	r0
 53e:	07 d0       	rcall	.+14     	; 0x54e <__divmodhi4_neg1>
 540:	77 fd       	sbrc	r23, 7
 542:	09 d0       	rcall	.+18     	; 0x556 <__divmodhi4_neg2>
 544:	0e 94 87 02 	call	0x50e	; 0x50e <__udivmodhi4>
 548:	07 fc       	sbrc	r0, 7
 54a:	05 d0       	rcall	.+10     	; 0x556 <__divmodhi4_neg2>
 54c:	3e f4       	brtc	.+14     	; 0x55c <__divmodhi4_exit>

0000054e <__divmodhi4_neg1>:
 54e:	90 95       	com	r25
 550:	81 95       	neg	r24
 552:	9f 4f       	sbci	r25, 0xFF	; 255
 554:	08 95       	ret

00000556 <__divmodhi4_neg2>:
 556:	70 95       	com	r23
 558:	61 95       	neg	r22
 55a:	7f 4f       	sbci	r23, 0xFF	; 255

0000055c <__divmodhi4_exit>:
 55c:	08 95       	ret

0000055e <_exit>:
 55e:	f8 94       	cli

00000560 <__stop_program>:
 560:	ff cf       	rjmp	.-2      	; 0x560 <__stop_program>
